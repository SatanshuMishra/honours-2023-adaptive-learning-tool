export const dummyData: {
  difficulty: number;
  question: string;
  code?: string;
  answers: string[];
  correct: number;
  explanations: string[];
  bloomTaxonomy: string;
  timeTakenSeconds: number;
  topic: string;
}[] = [
  {
    difficulty: 0.3,
    question: "Which keyword is used to handle exceptions in Java?",
    answers: ["try", "catch", "finally", "throw"],
    correct: 1,
    explanations: [
      "The 'catch' keyword is used to handle exceptions in Java.",
      "'try' is the keyword used to start a block of code to be tested for exceptions.",
      "'finally' is used to execute important code such as closing database connections, whether an exception is thrown or not.",
      "'throw' is used to explicitly throw an exception within a method.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 20,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question: "What is the purpose of the 'throws' keyword in Java?",
    answers: [
      "To declare that a method may raise a particular type of exception.",
      "To catch exceptions.",
      "To handle runtime errors.",
      "To specify the return type of a method.",
    ],
    correct: 0,
    explanations: [
      "The 'throws' keyword is used to declare that a method may raise a particular type of exception.",
      "'catch' is used to handle exceptions.",
      "'throw' is used to explicitly throw an exception within a method.",
      "'throws' does not specify the return type of a method.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 25,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question: "Which method is called when an exception is not caught?",
    answers: ["finalize()", "main()", "catch()", "run()"],
    correct: 0,
    explanations: [
      "'finalize()' method is called by the garbage collector before an object is destroyed.",
      "'main()' method is the entry point for a Java application.",
      "'catch()' is used within try-catch blocks to handle exceptions.",
      "'run()' is the entry point for a thread.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 30,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question: "Which keyword is used to re-throw an exception in Java?",
    answers: ["throw", "finally", "rethrow", "throws"],
    correct: 0,
    explanations: [
      "The 'throw' keyword is used to re-throw an exception in Java.",
      "'finally' is used to execute important code such as closing database connections, whether an exception is thrown or not.",
      "'rethrow' is not a valid keyword in Java.",
      "'throws' is used to declare that a method may raise a particular type of exception.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 20,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question:
      "Which keyword is used to create a custom exception class in Java?",
    answers: ["exception", "error", "custom", "throw"],
    correct: 2,
    explanations: [
      "To create a custom exception class in Java, the 'class' keyword is used.",
      "'error' represents runtime errors that cannot be handled.",
      "'custom' is not a keyword for creating custom exception classes.",
      "'throw' is used to explicitly throw an exception within a method.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 25,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question:
      "What does the 'finally' block contain in a try-catch-finally statement?",
    answers: [
      "Code that is executed regardless of whether an exception occurs or not.",
      "Code that is executed if an exception occurs.",
      "Code that is executed if no exception occurs.",
      "Code that is executed before the try block.",
    ],
    correct: 0,
    explanations: [
      "The 'finally' block contains code that is executed regardless of whether an exception occurs or not.",
      "'catch' block contains code that is executed if an exception occurs.",
      "'try' block contains the main code that may cause exceptions.",
      "The 'finally' block is executed after the try and catch blocks.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 30,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "Which exception is thrown when an array is accessed with an invalid index?",
    answers: [
      "ArrayOutOfBoundsException",
      "IndexOutOfRangeException",
      "ArrayIndexException",
      "IndexOutOfBoundsException",
    ],
    correct: 3,
    explanations: [
      "The 'IndexOutOfBoundsException' is thrown when an array is accessed with an invalid index.",
      "'ArrayOutOfBoundsException' is not a valid exception in Java.",
      "'IndexOutOfRangeException' is not a valid exception in Java.",
      "'ArrayIndexException' is not a valid exception in Java.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 35,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question: "What happens if an exception occurs within the 'finally' block?",
    answers: [
      "The exception is caught by the enclosing 'try-catch' block.",
      "The program terminates.",
      "The exception is ignored.",
      "The 'finally' block is not executed.",
    ],
    correct: 0,
    explanations: [
      "If an exception occurs within the 'finally' block, it is caught by the enclosing 'try-catch' block.",
      "The program does not terminate immediately; it handles the exception.",
      "The exception within the 'finally' block is not ignored.",
      "The 'finally' block is always executed unless the program is terminated abruptly.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 40,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question: "Which keyword is used to define an exception handler in Java?",
    answers: ["handle", "catch", "try", "exception"],
    correct: 1,
    explanations: [
      "The 'catch' keyword is used to define an exception handler in Java.",
      "'handle' is not a keyword for defining exception handlers.",
      "'try' is used to start a block of code to be tested for exceptions.",
      "'exception' is not a keyword for defining exception handlers.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 45,
    topic: "Error Handling",
  },
  {
    difficulty: 0.9,
    question:
      "Which of the following statements is true regarding checked and unchecked exceptions in Java?",
    answers: [
      "Checked exceptions are checked at compile-time, whereas unchecked exceptions are checked at runtime.",
      "Unchecked exceptions are checked at compile-time, whereas checked exceptions are checked at runtime.",
      "Both checked and unchecked exceptions are checked at compile-time.",
      "Both checked and unchecked exceptions are checked at runtime.",
    ],
    correct: 0,
    explanations: [
      "Checked exceptions are checked at compile-time, whereas unchecked exceptions are checked at runtime.",
      "Unchecked exceptions are not checked at compile-time.",
      "Both checked and unchecked exceptions are not checked at compile-time.",
      "Both checked and unchecked exceptions are not checked at runtime.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 50,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question:
      "Which keyword is used to propagate an exception up the call stack in Java?",
    answers: ["try", "catch", "finally", "throw"],
    correct: 3,
    explanations: [
      "The 'throw' keyword is used to propagate an exception up the call stack in Java.",
      "'try' is used to start a block of code to be tested for exceptions.",
      "'catch' is used to handle exceptions.",
      "'finally' is used to execute important code such as closing database connections, whether an exception is thrown or not.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 25,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "Which keyword is used to catch multiple exceptions in a single catch block in Java?",
    answers: ["multiple", "all", "union", "multi-catch"],
    correct: 3,
    explanations: [
      "The 'multi-catch' keyword is used to catch multiple exceptions in a single catch block in Java.",
      "There's no keyword 'multiple' for catching multiple exceptions.",
      "There's no keyword 'all' for catching multiple exceptions.",
      "There's no keyword 'union' for catching multiple exceptions.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 35,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question: "Which of the following is not a type of exception in Java?",
    answers: [
      "Checked Exceptions",
      "Runtime Exceptions",
      "Unresolved Exceptions",
      "Error Exceptions",
    ],
    correct: 2,
    explanations: [
      "'Unresolved Exceptions' is not a type of exception in Java.",
      "'Checked Exceptions' are checked at compile-time, 'Runtime Exceptions' are unchecked, and 'Error Exceptions' represent serious problems that a reasonable application should not try to catch.",
      "'Checked Exceptions', 'Runtime Exceptions', and 'Error Exceptions' are valid types of exceptions in Java.",
      "'Error Exceptions' represent errors that are not expected to be caught by the application.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 40,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question:
      "What happens if an exception occurs in the 'try' block and is not caught by any 'catch' block in Java?",
    answers: [
      "The program terminates with an uncaught exception error.",
      "The exception is caught by the 'finally' block.",
      "The program continues execution without any impact.",
      "The exception is logged to a file.",
    ],
    correct: 0,
    explanations: [
      "If an exception occurs in the 'try' block and is not caught by any 'catch' block in Java, the program terminates with an uncaught exception error.",
      "The 'finally' block executes regardless of whether an exception is caught or not.",
      "The program does not continue execution if an uncaught exception occurs.",
      "Exceptions are not automatically logged to a file in Java.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 30,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question: "Which keyword is used to suppress exceptions in Java?",
    answers: ["suppress", "ignore", "silence", "SuppressWarnings"],
    correct: 3,
    explanations: [
      "The 'SuppressWarnings' keyword is used to suppress exceptions in Java.",
      "There's no keyword 'suppress' for suppressing exceptions.",
      "There's no keyword 'ignore' for suppressing exceptions.",
      "There's no keyword 'silence' for suppressing exceptions.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 35,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question: "Which of the following is not a type of error in Java?",
    answers: [
      "Syntax Error",
      "Runtime Error",
      "Logic Error",
      "Exception Error",
    ],
    correct: 3,
    explanations: [
      "'Exception Error' is not a type of error in Java.",
      "'Syntax Error' occurs due to incorrect syntax in the code, 'Runtime Error' occurs during program execution, and 'Logic Error' occurs due to incorrect program logic.",
      "'Syntax Error', 'Runtime Error', and 'Logic Error' are valid types of errors in Java.",
      "'Exception Error' is not a recognized term in Java.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 40,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question:
      "Which method is used to specify code that may throw multiple exceptions in Java?",
    answers: ["catch", "throws", "try", "multi-catch"],
    correct: 1,
    explanations: [
      "The 'throws' keyword is used to specify code that may throw multiple exceptions in Java.",
      "'catch' is used to handle exceptions.",
      "'try' is used to start a block of code to be tested for exceptions.",
      "'multi-catch' is used to catch multiple exceptions in a single catch block.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 45,
    topic: "Error Handling",
  },
  {
    difficulty: 0.2,
    question: "Which keyword is used to catch exceptions in Java?",
    answers: ["try", "catch", "finally", "throw"],
    correct: 1,
    explanations: [
      "The 'catch' keyword is used to catch exceptions in Java.",
      "'try' is used to start a block of code to be tested for exceptions.",
      "'finally' is used to execute important code such as closing database connections, whether an exception is thrown or not.",
      "'throw' is used to explicitly throw an exception within a method.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 15,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question:
      "What is the purpose of the 'finally' block in Java exception handling?",
    answers: [
      "To execute code regardless of whether an exception occurs or not.",
      "To catch exceptions.",
      "To specify the return type of a method.",
      "To propagate an exception up the call stack.",
    ],
    correct: 0,
    explanations: [
      "The 'finally' block in Java exception handling is used to execute code regardless of whether an exception occurs or not.",
      "'catch' is used to handle exceptions.",
      "'try' is used to start a block of code to be tested for exceptions.",
      "'throw' is used to explicitly throw an exception within a method.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 20,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question:
      "Which keyword is used to explicitly throw an exception within a method in Java?",
    answers: ["raise", "throws", "throw", "exception"],
    correct: 2,
    explanations: [
      "The 'throw' keyword is used to explicitly throw an exception within a method in Java.",
      "'raise' is not a keyword for throwing exceptions.",
      "'throws' is used to declare that a method may raise a particular type of exception.",
      "'exception' is not a keyword for throwing exceptions.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 20,
    topic: "Error Handling",
  },
  {
    difficulty: 0.2,
    question: "What is the superclass of all exception types in Java?",
    answers: ["Exception", "Throwable", "RuntimeException", "Error"],
    correct: 1,
    explanations: [
      "The superclass of all exception types in Java is 'Throwable'.",
      "'Exception' is a subclass of 'Throwable' representing exceptional conditions that programs should catch.",
      "'RuntimeException' is a subclass of 'Exception' representing exceptions that occur due to programming errors.",
      "'Error' is a subclass of 'Throwable' representing serious problems that are typically beyond the control of the application.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 15,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question:
      "Which of the following is not a standard exception class in Java?",
    answers: [
      "IOException",
      "NullPointerException",
      "DatabaseException",
      "ArrayIndexOutOfBoundsException",
    ],
    correct: 2,
    explanations: [
      "'DatabaseException' is not a standard exception class in Java.",
      "'IOException', 'NullPointerException', and 'ArrayIndexOutOfBoundsException' are standard exception classes.",
      "'DatabaseException' might be a custom exception class but is not part of the standard Java exceptions.",
      "'NullPointerException' is thrown when trying to access a member of an object that is null.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 20,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question:
      "Which of the following is true regarding checked and unchecked exceptions in Java?",
    answers: [
      "Checked exceptions are checked at compile-time, whereas unchecked exceptions are checked at runtime.",
      "Unchecked exceptions are checked at compile-time, whereas checked exceptions are checked at runtime.",
      "Both checked and unchecked exceptions are checked at compile-time.",
      "Both checked and unchecked exceptions are checked at runtime.",
    ],
    correct: 0,
    explanations: [
      "Checked exceptions are checked at compile-time, whereas unchecked exceptions are checked at runtime.",
      "Unchecked exceptions are not checked at compile-time.",
      "Both checked and unchecked exceptions are not checked at compile-time.",
      "Both checked and unchecked exceptions are not checked at runtime.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 20,
    topic: "Error Handling",
  },
  {
    difficulty: 0.2,
    question:
      "What happens if an exception occurs within the 'finally' block in Java?",
    answers: [
      "The exception is caught by the enclosing 'try-catch' block.",
      "The program terminates.",
      "The exception is ignored.",
      "The 'finally' block is not executed.",
    ],
    correct: 0,
    explanations: [
      "If an exception occurs within the 'finally' block in Java, it is caught by the enclosing 'try-catch' block.",
      "The program does not terminate immediately; it handles the exception.",
      "The exception within the 'finally' block is not ignored.",
      "The 'finally' block is always executed, even if an exception occurs within it.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 15,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question:
      "Which keyword is used to propagate an exception up the call stack in Java?",
    answers: ["try", "catch", "finally", "throw"],
    correct: 3,
    explanations: [
      "The 'throw' keyword is used to propagate an exception up the call stack in Java.",
      "'try' is used to start a block of code to be tested for exceptions.",
      "'catch' is used to handle exceptions.",
      "'finally' is used to execute important code such as closing database connections, whether an exception is thrown or not.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 20,
    topic: "Error Handling",
  },
  {
    difficulty: 0.2,
    question: "Which keyword is used to suppress exceptions in Java?",
    answers: ["suppress", "ignore", "silence", "SuppressWarnings"],
    correct: 3,
    explanations: [
      "The 'SuppressWarnings' keyword is used to suppress exceptions in Java.",
      "There's no keyword 'suppress' for suppressing exceptions.",
      "There's no keyword 'ignore' for suppressing exceptions.",
      "There's no keyword 'silence' for suppressing exceptions.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 15,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question:
      "What is the purpose of the 'try' block in Java exception handling?",
    answers: [
      "To define a block of code to be tested for exceptions.",
      "To catch exceptions.",
      "To specify the return type of a method.",
      "To explicitly throw an exception within a method.",
    ],
    correct: 0,
    explanations: [
      "The 'try' block in Java exception handling is used to define a block of code to be tested for exceptions.",
      "It does not catch exceptions; it defines the code that may throw exceptions.",
      "It does not specify the return type of a method; it defines a block of code.",
      "It does not throw exceptions; it defines a block of code.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 30,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question: "Which keyword is used to catch exceptions in Java?",
    answers: ["try", "catch", "finally", "throw"],
    correct: 1,
    explanations: [
      "The 'catch' keyword is used to catch exceptions in Java.",
      "'try' is used to define a block of code to be tested for exceptions.",
      "'finally' is used to execute important code regardless of whether an exception occurs or not.",
      "'throw' is used to explicitly throw an exception within a method.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 35,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question:
      "What is the difference between 'catch' and 'finally' blocks in Java exception handling?",
    answers: [
      "'catch' block is always executed, whereas 'finally' block is executed only if an exception occurs.",
      "'finally' block is always executed, whereas 'catch' block is executed only if an exception occurs.",
      "'catch' block must be followed by a 'finally' block, whereas 'finally' block can be used alone.",
      "'finally' block is used to define a block of code to be tested for exceptions, whereas 'catch' block is used to catch exceptions.",
    ],
    correct: 1,
    explanations: [
      "'finally' block is always executed, whereas 'catch' block is executed only if an exception occurs.",
      "The 'finally' block is used for cleanup code that should be executed regardless of whether an exception occurs or not.",
      "'catch' block is not always executed; it depends on whether an exception occurs in the try block.",
      "'finally' block can be used alone without a preceding 'catch' block.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 30,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question:
      "Which of the following statements is true regarding checked and unchecked exceptions in Java?",
    answers: [
      "Checked exceptions are checked at runtime, whereas unchecked exceptions are checked at compile-time.",
      "Unchecked exceptions are checked at compile-time, whereas checked exceptions are checked at runtime.",
      "Both checked and unchecked exceptions are checked at compile-time.",
      "Both checked and unchecked exceptions are checked at runtime.",
    ],
    correct: 1,
    explanations: [
      "Unchecked exceptions are checked at compile-time, whereas checked exceptions are checked at runtime.",
      "Checked exceptions must be caught or declared to be thrown at compile-time, while unchecked exceptions do not require this.",
      "Checked exceptions are not checked at runtime.",
      "Unchecked exceptions are not checked at runtime.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 35,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question:
      "Which keyword is used to define a block of code to be tested for exceptions in Java?",
    answers: ["try", "catch", "finally", "throw"],
    correct: 0,
    explanations: [
      "The 'try' keyword is used to define a block of code to be tested for exceptions in Java.",
      "'catch' is used to catch exceptions.",
      "'finally' is used to execute important code regardless of whether an exception occurs or not.",
      "'throw' is used to explicitly throw an exception within a method.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 30,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question:
      "What is the purpose of the 'finally' block in Java exception handling?",
    answers: [
      "To execute code only if an exception occurs.",
      "To catch exceptions.",
      "To specify the return type of a method.",
      "To execute code regardless of whether an exception occurs or not.",
    ],
    correct: 3,
    explanations: [
      "The 'finally' block in Java exception handling is used to execute code regardless of whether an exception occurs or not.",
      "It does not catch exceptions; it is used for cleanup or finalization code.",
      "It does not specify the return type of a method; it defines a block of code.",
      "It ensures certain code is always executed, even if an exception occurs or not.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 35,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question: "What is the purpose of the 'throws' keyword in Java?",
    answers: [
      "To catch exceptions.",
      "To specify the return type of a method.",
      "To declare that a method may raise a particular type of exception.",
      "To re-throw an exception within a method.",
    ],
    correct: 2,
    explanations: [
      "The 'throws' keyword in Java is used to declare that a method may raise a particular type of exception.",
      "It does not catch exceptions; it declares the exceptions that a method may throw.",
      "It does not specify the return type of a method; it declares the exceptions that the method may throw.",
      "It does not re-throw exceptions within a method; it declares the exceptions that may be thrown by the method.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 30,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question:
      "What happens if an exception occurs within the 'finally' block in Java?",
    answers: [
      "The program terminates.",
      "The exception is caught by the enclosing 'try-catch' block.",
      "The 'finally' block is not executed.",
      "The exception is ignored.",
    ],
    correct: 1,
    explanations: [
      "If an exception occurs within the 'finally' block in Java, it is caught by the enclosing 'try-catch' block.",
      "The program does not terminate immediately; it handles the exception.",
      "The 'finally' block is always executed, even if an exception occurs within it.",
      "The exception within the 'finally' block is not ignored.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 35,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question:
      "Which keyword is used to propagate an exception up the call stack in Java?",
    answers: ["try", "catch", "finally", "throw"],
    correct: 3,
    explanations: [
      "The 'throw' keyword is used to propagate an exception up the call stack in Java.",
      "'try' is used to start a block of code to be tested for exceptions.",
      "'catch' is used to handle exceptions.",
      "'finally' is used to execute important code such as closing database connections, whether an exception is thrown or not.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 30,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question: "What is the superclass of all exception types in Java?",
    answers: ["Exception", "Throwable", "RuntimeException", "Error"],
    correct: 1,
    explanations: [
      "The superclass of all exception types in Java is 'Throwable'.",
      "'Exception' is a subclass of 'Throwable' representing exceptional conditions that programs should catch.",
      "'RuntimeException' is a subclass of 'Exception' representing exceptions that occur due to programming errors.",
      "'Error' is a subclass of 'Throwable' representing serious problems that are typically beyond the control of the application.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 35,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question:
      "Write a Java code snippet to demonstrate the use of try-catch-finally blocks for error handling.",
    code: 'public class ErrorHandlingExample {\n    public static void main(String[] args) {\n        try {\n            // Code that may throw an exception\n            int result = 10 / 0; // Division by zero\n            System.out.println(result);\n        } catch (ArithmeticException e) {\n            // Handling arithmetic exception\n            System.out.println("Error: Division by zero");\n        } finally {\n            // Cleanup or finalization code\n            System.out.println("Finally block executed");\n        }\n    }\n}',
    answers: [
      'public class ErrorHandlingExample {\n    public static void main(String[] args) {\n        try {\n            // Code that may throw an exception\n            int result = 10 / 0; // Division by zero\n            System.out.println(result);\n        } catch (ArithmeticException e) {\n            // Handling arithmetic exception\n            System.out.println("Error: Division by zero");\n        } finally {\n            // Cleanup or finalization code\n            System.out.println("Finally block executed");\n        }\n    }\n}',
      'public class ErrorHandlingExample {\n    public static void main(String[] args) {\n        try {\n            // Code that may throw an exception\n            int result = 10 / 0; // Division by zero\n            System.out.println(result);\n        } catch (Exception e) {\n            // Handling all exceptions\n            System.out.println("Error occurred: " + e.getMessage());\n        }\n    }\n}',
      'public class ErrorHandlingExample {\n    public static void main(String[] args) {\n        try {\n            // Code that may throw an exception\n            int result = 10 / 0; // Division by zero\n            System.out.println(result);\n        } finally {\n            // Cleanup or finalization code\n            System.out.println("Finally block executed");\n        }\n    }\n}',
      "public class ErrorHandlingExample {\n    public static void main(String[] args) {\n        try {\n            // Code that may throw an exception\n            int result = 10 / 0; // Division by zero\n            System.out.println(result);\n        }\n    }\n}",
    ],
    correct: 0,
    explanations: [
      "The correct code snippet demonstrates the use of try-catch-finally blocks for error handling. It tries to perform a division operation that may throw an ArithmeticException due to division by zero. The exception is caught in the catch block, and the finally block is used for cleanup or finalization code.",
      "This code snippet catches all exceptions using a generic Exception class, which is not recommended for precise exception handling.",
      "This code snippet lacks a catch block to handle exceptions; it only has a finally block.",
      "This code snippet lacks both catch and finally blocks, making it incomplete for proper error handling.",
    ],
    bloomTaxonomy: "Applying",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "Explain with a Java code example how to create a custom exception class and throw it.",
    code: 'public class CustomException extends Exception {\n    public CustomException(String message) {\n        super(message);\n    }\n}\n\npublic class CustomExceptionExample {\n    public static void main(String[] args) {\n        try {\n            throw new CustomException("Custom exception thrown");\n        } catch (CustomException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}',
    answers: [
      'public class CustomException extends Exception {\n    public CustomException(String message) {\n        super(message);\n    }\n}\n\npublic class CustomExceptionExample {\n    public static void main(String[] args) {\n        try {\n            throw new CustomException("Custom exception thrown");\n        } catch (CustomException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}',
      'public class CustomException extends RuntimeException {\n    public CustomException(String message) {\n        super(message);\n    }\n}\n\npublic class CustomExceptionExample {\n    public static void main(String[] args) {\n        throw new CustomException("Custom exception thrown");\n    }\n}',
      'public class CustomException extends Exception {\n    public CustomException(String message) {\n        super(message);\n    }\n}\n\npublic class CustomExceptionExample {\n    public static void main(String[] args) {\n        try {\n            throw new CustomException("Custom exception thrown");\n        }\n    }\n}',
      'public class CustomException extends Exception {\n    public CustomException(String message) {\n        super(message);\n    }\n}\n\npublic class CustomExceptionExample {\n    public static void main(String[] args) {\n        throw new CustomException("Custom exception thrown");\n    }\n}',
    ],
    correct: 0,
    explanations: [
      "The correct code snippet demonstrates the creation of a custom exception class 'CustomException' that extends the Exception class. It is then thrown and caught in the main method of 'CustomExceptionExample' class.",
      "This code snippet creates a custom exception class but throws it without handling it, which is not recommended.",
      "This code snippet creates a custom exception class and tries to throw it but lacks a catch block to handle the exception.",
      "This code snippet lacks both the try and catch blocks, making it incomplete for proper error handling.",
    ],
    bloomTaxonomy: "Applying",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "Write a Java program that demonstrates the use of nested try-catch blocks for error handling.",
    code: 'public class NestedTryCatchExample {\n    public static void main(String[] args) {\n        try {\n            try {\n                int[] arr = new int[3];\n                arr[5] = 10; // ArrayIndexOutOfBoundsException\n            } catch (ArrayIndexOutOfBoundsException e) {\n                System.out.println("Inner catch block: " + e.getMessage());\n            }\n        } catch (Exception e) {\n            System.out.println("Outer catch block: " + e.getMessage());\n        }\n    }\n}',
    answers: [
      'public class NestedTryCatchExample {\n    public static void main(String[] args) {\n        try {\n            try {\n                int[] arr = new int[3];\n                arr[5] = 10; // ArrayIndexOutOfBoundsException\n            } catch (ArrayIndexOutOfBoundsException e) {\n                System.out.println("Inner catch block: " + e.getMessage());\n            }\n        } catch (Exception e) {\n            System.out.println("Outer catch block: " + e.getMessage());\n        }\n    }\n}',
      'public class NestedTryCatchExample {\n    public static void main(String[] args) {\n        try {\n            int[] arr = new int[3];\n            arr[5] = 10; // ArrayIndexOutOfBoundsException\n        } catch (ArrayIndexOutOfBoundsException e) {\n            System.out.println("Catch block: " + e.getMessage());\n        }\n    }\n}',
      'public class NestedTryCatchExample {\n    public static void main(String[] args) {\n        try {\n            try {\n                int[] arr = new int[3];\n                arr[5] = 10; // ArrayIndexOutOfBoundsException\n            }\n        } catch (ArrayIndexOutOfBoundsException e) {\n            System.out.println("Catch block: " + e.getMessage());\n        }\n    }\n}',
      'public class NestedTryCatchExample {\n    public static void main(String[] args) {\n        try {\n            try {\n                int[] arr = new int[3];\n                arr[5] = 10; // ArrayIndexOutOfBoundsException\n            }\n        } catch (Exception e) {\n            System.out.println("Catch block: " + e.getMessage());\n        }\n    }\n}',
    ],
    correct: 0,
    explanations: [
      "The correct code snippet demonstrates the use of nested try-catch blocks for error handling. It includes an inner try-catch block to handle an ArrayIndexOutOfBoundsException and an outer try-catch block to catch any other exceptions.",
      "This code snippet lacks nested try-catch blocks, making it incomplete for demonstrating the topic.",
      "This code snippet has incomplete try-catch blocks; it lacks necessary code.",
      "This code snippet has incomplete try-catch blocks; it lacks necessary code.",
    ],
    bloomTaxonomy: "Applying",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "Analyzing Java code, identify the potential error and suggest a correction:",
    code: 'public class ErrorAnalysis {\n    public static void main(String[] args) {\n        try {\n            int[] arr = new int[5];\n            arr[5] = 10; // ArrayIndexOutOfBoundsException\n        } catch (Exception e) {\n            System.out.println("Exception occurred: " + e.getMessage());\n        }\n    }\n}',
    answers: [
      "The potential error is the attempt to access an index outside the bounds of the array (ArrayIndexOutOfBoundsException). To correct it, adjust the index to a valid value within the array's bounds.",
      "The code has no errors.",
      "The potential error is the missing 'throws' declaration in the method signature. To correct it, add 'throws Exception' to the main method signature.",
      "The potential error is the missing 'try-catch' block around the array access. To correct it, enclose the array access with a try-catch block.",
    ],
    correct: 0,
    explanations: [
      "The correct answer identifies the potential error in the code, which is the attempt to access an index outside the bounds of the array, leading to an ArrayIndexOutOfBoundsException. The suggested correction is to adjust the index to a valid value within the array's bounds.",
      "This answer incorrectly states that the code has no errors, ignoring the ArrayIndexOutOfBoundsException.",
      "This answer incorrectly suggests that the potential error is the missing 'throws' declaration, which is unrelated to the ArrayIndexOutOfBoundsException.",
      "This answer incorrectly suggests adding a try-catch block, which is already present in the code.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "Analyze the following Java code and identify the potential issue:",
    code: 'public class ErrorAnalysis {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}',
    answers: [
      "The potential issue is division by zero in the 'divide' method, which can cause an ArithmeticException. To address this, add a check to ensure the divisor is not zero before performing the division.",
      "The code has no issues.",
      "The potential issue is the missing 'throws ArithmeticException' declaration in the 'divide' method signature. To address this, add 'throws ArithmeticException' to the method signature.",
      "The potential issue is the missing 'try-catch' block around the division operation in the 'divide' method. To address this, enclose the division operation with a try-catch block.",
    ],
    correct: 0,
    explanations: [
      "The correct answer identifies the potential issue in the code, which is division by zero in the 'divide' method, leading to an ArithmeticException. The suggested correction is to add a check to ensure the divisor is not zero before performing the division.",
      "This answer incorrectly states that the code has no issues, ignoring the potential division by zero.",
      "This answer incorrectly suggests that the potential issue is the missing 'throws ArithmeticException' declaration, which is unrelated to the division by zero.",
      "This answer incorrectly suggests adding a try-catch block, which is not necessary for handling division by zero.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "Analyzing the following Java code snippet, identify the potential error and suggest a correction:",
    code: 'public class ErrorAnalysis {\n    public static void main(String[] args) {\n        try {\n            int[] arr = new int[5];\n            arr[6] = 10; // ArrayIndexOutOfBoundsException\n        } catch (ArrayIndexOutOfBoundsException e) {\n            System.out.println("Array index out of bounds");\n        } catch (Exception e) {\n            System.out.println("Exception occurred: " + e.getMessage());\n        }\n    }\n}',
    answers: [
      "The potential error is the attempt to access an index outside the bounds of the array (ArrayIndexOutOfBoundsException). To correct it, adjust the index to a valid value within the array's bounds.",
      "The code has no errors.",
      "The potential error is the missing 'throws' declaration in the method signature. To correct it, add 'throws Exception' to the main method signature.",
      "The potential error is the missing 'try-catch' block around the array access. To correct it, enclose the array access with a try-catch block.",
    ],
    correct: 0,
    explanations: [
      "The correct answer identifies the potential error in the code, which is the attempt to access an index outside the bounds of the array, leading to an ArrayIndexOutOfBoundsException. The suggested correction is to adjust the index to a valid value within the array's bounds.",
      "This answer incorrectly states that the code has no errors, ignoring the ArrayIndexOutOfBoundsException.",
      "This answer incorrectly suggests that the potential error is the missing 'throws' declaration, which is unrelated to the ArrayIndexOutOfBoundsException.",
      "This answer incorrectly suggests adding a try-catch block, which is already present in the code.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question: "Analyze the given Java code and identify the potential error:",
    code: 'public class ErrorAnalysis {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (Exception e) {\n            System.out.println("Exception occurred: " + e.getMessage());\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        try {\n            return dividend / divisor;\n        } finally {\n            System.out.println("Finally block executed");\n        }\n    }\n}',
    answers: [
      "The potential error is division by zero in the 'divide' method, which can cause an ArithmeticException. However, the finally block will still be executed even if an exception occurs. To address this, consider handling the division by zero separately to prevent the finally block from executing in such cases.",
      "The code has no errors.",
      "The potential error is the missing 'throws ArithmeticException' declaration in the 'divide' method signature. To address this, add 'throws ArithmeticException' to the method signature.",
      "The potential error is the missing 'try-catch' block around the division operation in the 'divide' method. To address this, enclose the division operation with a try-catch block.",
    ],
    correct: 0,
    explanations: [
      "The correct answer identifies the potential error in the code, which is division by zero in the 'divide' method, leading to an ArithmeticException. However, the finally block will still be executed even if an exception occurs. The suggested correction is to consider handling the division by zero separately to prevent the finally block from executing in such cases.",
      "This answer incorrectly states that the code has no errors, ignoring the potential division by zero.",
      "This answer incorrectly suggests that the potential issue is the missing 'throws ArithmeticException' declaration, which is unrelated to the division by zero.",
      "This answer incorrectly suggests adding a try-catch block, which is not necessary for handling division by zero.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "Analyze the following Java code snippet and identify the potential error:",
    code: 'public class ErrorAnalysis {\n    public static void main(String[] args) {\n        try {\n            int[] arr = new int[5];\n            System.out.println(arr[6]); // ArrayIndexOutOfBoundsException\n        } catch (ArrayIndexOutOfBoundsException e) {\n            System.out.println("Array index out of bounds");\n        } catch (Exception e) {\n            System.out.println("Exception occurred: " + e.getMessage());\n        }\n    }\n}',
    answers: [
      "The potential error is the attempt to access an index outside the bounds of the array (ArrayIndexOutOfBoundsException). To correct it, adjust the index to a valid value within the array's bounds.",
      "The code has no errors.",
      "The potential error is the missing 'throws' declaration in the method signature. To correct it, add 'throws Exception' to the main method signature.",
      "The potential error is the missing 'try-catch' block around the array access. To correct it, enclose the array access with a try-catch block.",
    ],
    correct: 0,
    explanations: [
      "The correct answer identifies the potential error in the code, which is the attempt to access an index outside the bounds of the array, leading to an ArrayIndexOutOfBoundsException. The suggested correction is to adjust the index to a valid value within the array's bounds.",
      "This answer incorrectly states that the code has no errors, ignoring the ArrayIndexOutOfBoundsException.",
      "This answer incorrectly suggests that the potential error is the missing 'throws' declaration, which is unrelated to the ArrayIndexOutOfBoundsException.",
      "This answer incorrectly suggests adding a try-catch block, which is already present in the code.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question: "Analyze the given Java code and identify the potential error:",
    code: 'public class ErrorAnalysis {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        try {\n            return dividend / divisor;\n        } finally {\n            System.out.println("Finally block executed");\n        }\n    }\n}',
    answers: [
      "The potential error is division by zero in the 'divide' method, which can cause an ArithmeticException. However, the finally block will still be executed even if an exception occurs. To address this, consider handling the division by zero separately to prevent the finally block from executing in such cases.",
      "The code has no errors.",
      "The potential error is the missing 'throws ArithmeticException' declaration in the 'divide' method signature. To address this, add 'throws ArithmeticException' to the method signature.",
      "The potential error is the missing 'try-catch' block around the division operation in the 'divide' method. To address this, enclose the division operation with a try-catch block.",
    ],
    correct: 0,
    explanations: [
      "The correct answer identifies the potential error in the code, which is division by zero in the 'divide' method, leading to an ArithmeticException. However, the finally block will still be executed even if an exception occurs. The suggested correction is to consider handling the division by zero separately to prevent the finally block from executing in such cases.",
      "This answer incorrectly states that the code has no errors, ignoring the potential division by zero.",
      "This answer incorrectly suggests that the potential issue is the missing 'throws ArithmeticException' declaration, which is unrelated to the division by zero.",
      "This answer incorrectly suggests adding a try-catch block, which is not necessary for handling division by zero.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "Analyze the given Java code snippet and identify the potential error:",
    code: 'public class ErrorAnalysis {\n    public static void main(String[] args) {\n        try {\n            int[] arr = new int[5];\n            System.out.println(arr[6]); // ArrayIndexOutOfBoundsException\n        } catch (ArrayIndexOutOfBoundsException e) {\n            System.out.println("Array index out of bounds");\n        } catch (Exception e) {\n            System.out.println("Exception occurred: " + e.getMessage());\n        }\n    }\n}',
    answers: [
      "The potential error is the attempt to access an index outside the bounds of the array (ArrayIndexOutOfBoundsException). To correct it, adjust the index to a valid value within the array's bounds.",
      "The code has no errors.",
      "The potential error is the missing 'throws' declaration in the method signature. To correct it, add 'throws Exception' to the main method signature.",
      "The potential error is the missing 'try-catch' block around the array access. To correct it, enclose the array access with a try-catch block.",
    ],
    correct: 0,
    explanations: [
      "The correct answer identifies the potential error in the code, which is the attempt to access an index outside the bounds of the array, leading to an ArrayIndexOutOfBoundsException. The suggested correction is to adjust the index to a valid value within the array's bounds.",
      "This answer incorrectly states that the code has no errors, ignoring the ArrayIndexOutOfBoundsException.",
      "This answer incorrectly suggests that the potential error is the missing 'throws' declaration, which is unrelated to the ArrayIndexOutOfBoundsException.",
      "This answer incorrectly suggests adding a try-catch block, which is already present in the code.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question: "Analyze the given Java code and identify the potential error:",
    code: 'public class ErrorAnalysis {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        try {\n            return dividend / divisor;\n        } finally {\n            System.out.println("Finally block executed");\n        }\n    }\n}',
    answers: [
      "The potential error is division by zero in the 'divide' method, which can cause an ArithmeticException. However, the finally block will still be executed even if an exception occurs. To address this, consider handling the division by zero separately to prevent the finally block from executing in such cases.",
      "The code has no errors.",
      "The potential error is the missing 'throws ArithmeticException' declaration in the 'divide' method signature. To address this, add 'throws ArithmeticException' to the method signature.",
      "The potential error is the missing 'try-catch' block around the division operation in the 'divide' method. To address this, enclose the division operation with a try-catch block.",
    ],
    correct: 0,
    explanations: [
      "The correct answer identifies the potential error in the code, which is division by zero in the 'divide' method, leading to an ArithmeticException. However, the finally block will still be executed even if an exception occurs. The suggested correction is to consider handling the division by zero separately to prevent the finally block from executing in such cases.",
      "This answer incorrectly states that the code has no errors, ignoring the potential division by zero.",
      "This answer incorrectly suggests that the potential issue is the missing 'throws ArithmeticException' declaration, which is unrelated to the division by zero.",
      "This answer incorrectly suggests adding a try-catch block, which is not necessary for handling division by zero.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question: "Evaluate the given Java code and determine the output:",
    code: 'public class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 2); // Valid division\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Result: 5",
      "The output will be: Error: Division by zero",
      "The code will not compile due to a missing semicolon.",
      "The code will throw a NullPointerException.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be "Result: 5" since the division operation is valid and will result in 5.',
      "This answer incorrectly suggests that the output will be an error message due to division by zero, which is not the case in this code.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question: "Evaluate the given Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Error: Division by zero",
      "The output will be: Result: Infinity",
      "The code will throw a NullPointerException.",
      "The code will not compile due to a missing semicolon.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be an error message "Error: Division by zero" since the code attempts to perform division by zero, resulting in an ArithmeticException.',
      'This answer incorrectly suggests that the output will be "Result: Infinity", which is not the case for division by zero in Java.',
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question: "Evaluate the given Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (Exception e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Error: Division by zero",
      "The output will be: Result: Infinity",
      "The code will throw a NullPointerException.",
      "The code will not compile due to a missing semicolon.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be an error message "Error: Division by zero" since the code attempts to perform division by zero, resulting in an ArithmeticException, which is caught by the catch block for Exception.',
      'This answer incorrectly suggests that the output will be "Result: Infinity", which is not the case for division by zero in Java.',
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question: "Evaluate the given Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 2); // Valid division\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Result: 5",
      "The output will be: Error: Division by zero",
      "The code will not compile due to a missing semicolon.",
      "The code will throw a NullPointerException.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be "Result: 5" since the division operation is valid and will result in 5.',
      "This answer incorrectly suggests that the output will be an error message due to division by zero, which is not the case in this code.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question: "Evaluate the given Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Error: Division by zero",
      "The output will be: Result: Infinity",
      "The code will throw a NullPointerException.",
      "The code will not compile due to a missing semicolon.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be an error message "Error: Division by zero" since the code attempts to perform division by zero, resulting in an ArithmeticException.',
      'This answer incorrectly suggests that the output will be "Result: Infinity", which is not the case for division by zero in Java.',
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question: "Evaluate the given Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (Exception e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Error: Division by zero",
      "The output will be: Result: Infinity",
      "The code will throw a NullPointerException.",
      "The code will not compile due to a missing semicolon.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be an error message "Error: Division by zero" since the code attempts to perform division by zero, resulting in an ArithmeticException, which is caught by the catch block for Exception.',
      'This answer incorrectly suggests that the output will be "Result: Infinity", which is not the case for division by zero in Java.',
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question: "Evaluate the given Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 2); // Valid division\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Result: 5",
      "The output will be: Error: Division by zero",
      "The code will not compile due to a missing semicolon.",
      "The code will throw a NullPointerException.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be "Result: 5" since the division operation is valid and will result in 5.',
      "This answer incorrectly suggests that the output will be an error message due to division by zero, which is not the case in this code.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question: "Evaluate the given Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Error: Division by zero",
      "The output will be: Result: Infinity",
      "The code will throw a NullPointerException.",
      "The code will not compile due to a missing semicolon.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be an error message "Error: Division by zero" since the code attempts to perform division by zero, resulting in an ArithmeticException.',
      'This answer incorrectly suggests that the output will be "Result: Infinity", which is not the case for division by zero in Java.',
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question: "Evaluate the given Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (Exception e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Error: Division by zero",
      "The output will be: Result: Infinity",
      "The code will throw a NullPointerException.",
      "The code will not compile due to a missing semicolon.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be an error message "Error: Division by zero" since the code attempts to perform division by zero, resulting in an ArithmeticException, which is caught by the catch block for Exception.',
      'This answer incorrectly suggests that the output will be "Result: Infinity", which is not the case for division by zero in Java.',
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question: "Evaluate the given Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 2); // Valid division\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Result: 5",
      "The output will be: Error: Division by zero",
      "The code will not compile due to a missing semicolon.",
      "The code will throw a NullPointerException.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be "Result: 5" since the division operation is valid and will result in 5.',
      "This answer incorrectly suggests that the output will be an error message due to division by zero, which is not the case in this code.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question: "Evaluate the given Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Error: Division by zero",
      "The output will be: Result: Infinity",
      "The code will throw a NullPointerException.",
      "The code will not compile due to a missing semicolon.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be an error message "Error: Division by zero" since the code attempts to perform division by zero, resulting in an ArithmeticException.',
      'This answer incorrectly suggests that the output will be "Result: Infinity", which is not the case for division by zero in Java.',
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question: "Evaluate the given Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (Exception e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Error: Division by zero",
      "The output will be: Result: Infinity",
      "The code will throw a NullPointerException.",
      "The code will not compile due to a missing semicolon.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be an error message "Error: Division by zero" since the code attempts to perform division by zero, resulting in an ArithmeticException, which is caught by the catch block for Exception.',
      'This answer incorrectly suggests that the output will be "Result: Infinity", which is not the case for division by zero in Java.',
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question: "Evaluate the following Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 2); // Valid division\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Result: 5",
      "The output will be: Error: Division by zero",
      "The code will not compile due to a missing semicolon.",
      "The code will throw a NullPointerException.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be "Result: 5" since the division operation is valid and will result in 5.',
      "This answer incorrectly suggests that the output will be an error message due to division by zero, which is not the case in this code.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.9,
    question: "Evaluate the following Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Error: Division by zero",
      "The output will be: Result: Infinity",
      "The code will throw a NullPointerException.",
      "The code will not compile due to a missing semicolon.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be an error message "Error: Division by zero" since the code attempts to perform division by zero, resulting in an ArithmeticException.',
      'This answer incorrectly suggests that the output will be "Result: Infinity", which is not the case for division by zero in Java.',
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question: "Evaluate the following Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (Exception e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Error: Division by zero",
      "The output will be: Result: Infinity",
      "The code will throw a NullPointerException.",
      "The code will not compile due to a missing semicolon.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be an error message "Error: Division by zero" since the code attempts to perform division by zero, resulting in an ArithmeticException, which is caught by the catch block for Exception.',
      'This answer incorrectly suggests that the output will be "Result: Infinity", which is not the case for division by zero in Java.',
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question: "Evaluate the following Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Error: Division by zero",
      "The output will be: Result: Infinity",
      "The code will throw a NullPointerException.",
      "The code will not compile due to a missing semicolon.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be an error message "Error: Division by zero" since the code attempts to perform division by zero, resulting in an ArithmeticException.',
      'This answer incorrectly suggests that the output will be "Result: Infinity", which is not the case for division by zero in Java.',
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question: "Evaluate the following Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 2); // Valid division\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Result: 5",
      "The output will be: Error: Division by zero",
      "The code will not compile due to a missing semicolon.",
      "The code will throw a NullPointerException.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be "Result: 5" since the division operation is valid and will result in 5.',
      "This answer incorrectly suggests that the output will be an error message due to division by zero, which is not the case in this code.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.9,
    question: "Evaluate the following Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Error: Division by zero",
      "The output will be: Result: Infinity",
      "The code will throw a NullPointerException.",
      "The code will not compile due to a missing semicolon.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be an error message "Error: Division by zero" since the code attempts to perform division by zero, resulting in an ArithmeticException.',
      'This answer incorrectly suggests that the output will be "Result: Infinity", which is not the case for division by zero in Java.',
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question: "Evaluate the following Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 2); // Valid division\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Result: 5",
      "The output will be: Error: Division by zero",
      "The code will not compile due to a missing semicolon.",
      "The code will throw a NullPointerException.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be "Result: 5" since the division operation is valid and will result in 5.',
      "This answer incorrectly suggests that the output will be an error message due to division by zero, which is not the case in this code.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question:
      "Create a Java program that handles a custom exception named 'CustomException' and throws it when a number entered by the user is negative.",
    code: "",
    answers: [
      "The code correctly handles the custom exception and throws it when a negative number is entered.",
      "The code throws an ArithmeticException instead of the custom exception for negative numbers.",
      "The code does not handle exceptions properly and crashes when a negative number is entered.",
      "The code does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that defines a custom exception 'CustomException' and throws it when a negative number is entered by the user.",
      "This answer incorrectly identifies a different type of exception being thrown instead of the custom exception specified in the question.",
      "This answer indicates that the code does not handle exceptions properly, leading to program crashes, which is incorrect for a well-designed error handling mechanism.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "Create a Java method named 'checkNumber' that takes an integer as input and throws a 'NegativeNumberException' if the input is negative.",
    code: "",
    answers: [
      "The 'checkNumber' method correctly throws a 'NegativeNumberException' when a negative number is passed as input.",
      "The 'checkNumber' method throws a NullPointerException instead of the 'NegativeNumberException'.",
      "The 'checkNumber' method does not throw any exception for negative numbers.",
      "The 'checkNumber' method throws an ArithmeticException instead of the 'NegativeNumberException'.",
    ],
    correct: 0,
    explanations: [
      "The correct answer defines a Java method 'checkNumber' that properly throws a 'NegativeNumberException' when a negative number is passed as input.",
      "This answer incorrectly suggests a NullPointerException being thrown instead of the specified 'NegativeNumberException'.",
      "This answer indicates that the method does not throw any exception for negative numbers, which is incorrect based on the question requirements.",
      "This answer incorrectly identifies a different type of exception being thrown instead of the specified 'NegativeNumberException'.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.9,
    question:
      "Create a Java program that reads input from the user and handles NumberFormatException gracefully by displaying an appropriate error message.",
    code: "",
    answers: [
      "The program correctly handles NumberFormatException by displaying an appropriate error message.",
      "The program crashes when NumberFormatException occurs without displaying any error message.",
      "The program throws a NullPointerException instead of handling NumberFormatException.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that reads input from the user and gracefully handles NumberFormatException by displaying an appropriate error message.",
      "This answer indicates that the program crashes when NumberFormatException occurs without displaying any error message, which is incorrect for a well-handled error scenario.",
      "This answer incorrectly suggests that the program throws a NullPointerException instead of properly handling NumberFormatException.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question:
      "Create a Java program that defines a custom exception 'InvalidInputException' and throws it when the user enters a non-numeric input.",
    code: "",
    answers: [
      "The program correctly defines the custom exception 'InvalidInputException' and throws it for non-numeric inputs.",
      "The program throws a NumberFormatException instead of the custom exception for non-numeric inputs.",
      "The program does not handle non-numeric inputs and crashes.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly defines a custom exception 'InvalidInputException' and throws it when the user enters a non-numeric input.",
      "This answer incorrectly suggests that the program throws a NumberFormatException instead of the specified custom exception for non-numeric inputs.",
      "This answer indicates that the program does not handle non-numeric inputs and crashes, which is incorrect for a well-designed error handling mechanism.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "Create a Java method named 'validateInput' that takes a string as input and throws a 'InvalidInputException' if the input contains any non-alphanumeric characters.",
    code: "",
    answers: [
      "The 'validateInput' method correctly throws a 'InvalidInputException' for input containing non-alphanumeric characters.",
      "The 'validateInput' method throws a NullPointerException instead of the 'InvalidInputException'.",
      "The 'validateInput' method does not throw any exception for non-alphanumeric inputs.",
      "The 'validateInput' method throws a NumberFormatException instead of the 'InvalidInputException'.",
    ],
    correct: 0,
    explanations: [
      "The correct answer defines a Java method 'validateInput' that properly throws a 'InvalidInputException' for input containing non-alphanumeric characters.",
      "This answer incorrectly suggests a NullPointerException being thrown instead of the specified 'InvalidInputException'.",
      "This answer indicates that the method does not throw any exception for inputs containing non-alphanumeric characters, which is incorrect based on the question requirements.",
      "This answer incorrectly identifies a different type of exception being thrown instead of the specified 'InvalidInputException'.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.9,
    question:
      "Create a Java program that handles multiple exceptions including FileNotFoundException and IOException by providing appropriate error messages.",
    code: "",
    answers: [
      "The program correctly handles FileNotFoundException and IOException by providing appropriate error messages.",
      "The program crashes when FileNotFoundException or IOException occurs without displaying any error messages.",
      "The program throws a NullPointerException instead of handling FileNotFoundException and IOException.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly handles multiple exceptions including FileNotFoundException and IOException by providing appropriate error messages.",
      "This answer indicates that the program crashes when FileNotFoundException or IOException occurs without displaying any error messages, which is incorrect for a well-handled error scenario.",
      "This answer incorrectly suggests that the program throws a NullPointerException instead of properly handling FileNotFoundException and IOException.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question:
      "Create a Java program that defines a custom exception 'FileReadException' and throws it when a file read operation fails.",
    code: "",
    answers: [
      "The program correctly defines the custom exception 'FileReadException' and throws it for file read failures.",
      "The program throws a FileNotFoundException instead of the custom exception for file read failures.",
      "The program does not handle file read failures and crashes.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly defines a custom exception 'FileReadException' and throws it when a file read operation fails.",
      "This answer incorrectly suggests that the program throws a FileNotFoundException instead of the specified custom exception for file read failures.",
      "This answer indicates that the program does not handle file read failures and crashes, which is incorrect for a well-designed error handling mechanism.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "Create a Java method named 'parseInput' that takes a string as input and throws a 'InvalidFormatException' if the input cannot be parsed to an integer.",
    code: "",
    answers: [
      "The 'parseInput' method correctly throws a 'InvalidFormatException' for input that cannot be parsed to an integer.",
      "The 'parseInput' method throws a NullPointerException instead of the 'InvalidFormatException'.",
      "The 'parseInput' method does not throw any exception for invalid input.",
      "The 'parseInput' method throws a NumberFormatException instead of the 'InvalidFormatException'.",
    ],
    correct: 0,
    explanations: [
      "The correct answer defines a Java method 'parseInput' that properly throws a 'InvalidFormatException' for input that cannot be parsed to an integer.",
      "This answer incorrectly suggests a NullPointerException being thrown instead of the specified 'InvalidFormatException'.",
      "This answer indicates that the method does not throw any exception for invalid input, which is incorrect based on the question requirements.",
      "This answer incorrectly identifies a different type of exception being thrown instead of the specified 'InvalidFormatException'.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.9,
    question:
      "Create a Java program that handles ArrayIndexOutOfBoundsException by gracefully terminating the program with an appropriate error message.",
    code: "",
    answers: [
      "The program correctly handles ArrayIndexOutOfBoundsException by gracefully terminating with an appropriate error message.",
      "The program crashes when ArrayIndexOutOfBoundsException occurs without displaying any error message.",
      "The program throws a NullPointerException instead of handling ArrayIndexOutOfBoundsException.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly handles ArrayIndexOutOfBoundsException by gracefully terminating with an appropriate error message.",
      "This answer indicates that the program crashes when ArrayIndexOutOfBoundsException occurs without displaying any error message, which is incorrect for a well-handled error scenario.",
      "This answer incorrectly suggests that the program throws a NullPointerException instead of properly handling ArrayIndexOutOfBoundsException.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question:
      "Create a Java program that defines a custom exception 'DataFormatException' and throws it when the format of input data is invalid.",
    code: "",
    answers: [
      "The program correctly defines the custom exception 'DataFormatException' and throws it for invalid input data formats.",
      "The program throws a NumberFormatException instead of the custom exception for invalid input data formats.",
      "The program does not handle invalid input data formats and crashes.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly defines a custom exception 'DataFormatException' and throws it when the format of input data is invalid.",
      "This answer incorrectly suggests that the program throws a NumberFormatException instead of the specified custom exception for invalid input data formats.",
      "This answer indicates that the program does not handle invalid input data formats and crashes, which is incorrect for a well-designed error handling mechanism.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "Create a Java method named 'validateEmail' that takes an email address as input and throws an 'InvalidEmailException' if the email format is incorrect.",
    code: "",
    answers: [
      "The 'validateEmail' method correctly throws an 'InvalidEmailException' for incorrect email formats.",
      "The 'validateEmail' method throws a NullPointerException instead of the 'InvalidEmailException'.",
      "The 'validateEmail' method does not throw any exception for incorrect email formats.",
      "The 'validateEmail' method throws a NumberFormatException instead of the 'InvalidEmailException'.",
    ],
    correct: 0,
    explanations: [
      "The correct answer defines a Java method 'validateEmail' that properly throws an 'InvalidEmailException' for incorrect email formats.",
      "This answer incorrectly suggests a NullPointerException being thrown instead of the specified 'InvalidEmailException'.",
      "This answer indicates that the method does not throw any exception for incorrect email formats, which is incorrect based on the question requirements.",
      "This answer incorrectly identifies a different type of exception being thrown instead of the specified 'InvalidEmailException'.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question:
      "Create a Java program that defines a custom exception 'InvalidPasswordException' and throws it when the length of the password entered by the user is less than 8 characters.",
    code: "",
    answers: [
      "The program correctly defines the custom exception 'InvalidPasswordException' and throws it for passwords with less than 8 characters.",
      "The program throws a NullPointerException instead of the custom exception for passwords with less than 8 characters.",
      "The program does not handle passwords with less than 8 characters and crashes.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly defines a custom exception 'InvalidPasswordException' and throws it when the length of the password entered by the user is less than 8 characters.",
      "This answer incorrectly suggests that the program throws a NullPointerException instead of the specified custom exception for passwords with less than 8 characters.",
      "This answer indicates that the program does not handle passwords with less than 8 characters and crashes, which is incorrect for a well-designed error handling mechanism.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.9,
    question:
      "Create a Java program that handles NullPointerException by providing a user-friendly error message and terminating gracefully.",
    code: "",
    answers: [
      "The program correctly handles NullPointerException by providing a user-friendly error message and terminating gracefully.",
      "The program crashes when NullPointerException occurs without displaying any error message.",
      "The program throws a NumberFormatException instead of handling NullPointerException.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly handles NullPointerException by providing a user-friendly error message and terminating gracefully.",
      "This answer indicates that the program crashes when NullPointerException occurs without displaying any error message, which is incorrect for a well-handled error scenario.",
      "This answer incorrectly suggests that the program throws a NumberFormatException instead of properly handling NullPointerException.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "Create a Java method named 'checkUsername' that takes a username as input and throws an 'InvalidUsernameException' if the username contains any special characters.",
    code: "",
    answers: [
      "The 'checkUsername' method correctly throws an 'InvalidUsernameException' for usernames containing special characters.",
      "The 'checkUsername' method throws a NullPointerException instead of the 'InvalidUsernameException'.",
      "The 'checkUsername' method does not throw any exception for usernames containing special characters.",
      "The 'checkUsername' method throws a NumberFormatException instead of the 'InvalidUsernameException'.",
    ],
    correct: 0,
    explanations: [
      "The correct answer defines a Java method 'checkUsername' that properly throws an 'InvalidUsernameException' for usernames containing special characters.",
      "This answer incorrectly suggests a NullPointerException being thrown instead of the specified 'InvalidUsernameException'.",
      "This answer indicates that the method does not throw any exception for usernames containing special characters, which is incorrect based on the question requirements.",
      "This answer incorrectly identifies a different type of exception being thrown instead of the specified 'InvalidUsernameException'.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question:
      "Create a Java program that defines a custom exception 'InvalidInputException' and throws it when the user enters a negative number.",
    code: "",
    answers: [
      "The program correctly defines the custom exception 'InvalidInputException' and throws it for negative numbers entered by the user.",
      "The program throws a NumberFormatException instead of the custom exception for negative numbers entered by the user.",
      "The program does not handle negative numbers entered by the user and crashes.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly defines a custom exception 'InvalidInputException' and throws it when the user enters a negative number.",
      "This answer incorrectly suggests that the program throws a NumberFormatException instead of the specified custom exception for negative numbers entered by the user.",
      "This answer indicates that the program does not handle negative numbers entered by the user and crashes, which is incorrect for a well-designed error handling mechanism.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.9,
    question:
      "Create a Java program that handles ArrayIndexOutOfBoundsException by providing an appropriate error message and gracefully terminating.",
    code: "",
    answers: [
      "The program correctly handles ArrayIndexOutOfBoundsException by providing an appropriate error message and terminating gracefully.",
      "The program crashes when ArrayIndexOutOfBoundsException occurs without displaying any error message.",
      "The program throws a NullPointerException instead of handling ArrayIndexOutOfBoundsException.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly handles ArrayIndexOutOfBoundsException by providing an appropriate error message and terminating gracefully.",
      "This answer indicates that the program crashes when ArrayIndexOutOfBoundsException occurs without displaying any error message, which is incorrect for a well-handled error scenario.",
      "This answer incorrectly suggests that the program throws a NullPointerException instead of properly handling ArrayIndexOutOfBoundsException.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "Create a Java method named 'validatePassword' that takes a password as input and throws an 'InvalidPasswordException' if the password is weak (less than 8 characters).",
    code: "",
    answers: [
      "The 'validatePassword' method correctly throws an 'InvalidPasswordException' for weak passwords.",
      "The 'validatePassword' method throws a NullPointerException instead of the 'InvalidPasswordException'.",
      "The 'validatePassword' method does not throw any exception for weak passwords.",
      "The 'validatePassword' method throws a NumberFormatException instead of the 'InvalidPasswordException'.",
    ],
    correct: 0,
    explanations: [
      "The correct answer defines a Java method 'validatePassword' that properly throws an 'InvalidPasswordException' for weak passwords.",
      "This answer incorrectly suggests a NullPointerException being thrown instead of the specified 'InvalidPasswordException'.",
      "This answer indicates that the method does not throw any exception for weak passwords, which is incorrect based on the question requirements.",
      "This answer incorrectly identifies a different type of exception being thrown instead of the specified 'InvalidPasswordException'.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.9,
    question:
      "Create a Java program that handles FileNotFoundException by providing an appropriate error message and gracefully terminating.",
    code: "",
    answers: [
      "The program correctly handles FileNotFoundException by providing an appropriate error message and terminating gracefully.",
      "The program crashes when FileNotFoundException occurs without displaying any error message.",
      "The program throws a NullPointerException instead of handling FileNotFoundException.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly handles FileNotFoundException by providing an appropriate error message and terminating gracefully.",
      "This answer indicates that the program crashes when FileNotFoundException occurs without displaying any error message, which is incorrect for a well-handled error scenario.",
      "This answer incorrectly suggests that the program throws a NullPointerException instead of properly handling FileNotFoundException.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "Create a Java method named 'checkInput' that takes an integer as input and throws a 'NegativeNumberException' if the input is negative.",
    code: "",
    answers: [
      "The 'checkInput' method correctly throws a 'NegativeNumberException' when a negative number is passed as input.",
      "The 'checkInput' method throws a NullPointerException instead of the 'NegativeNumberException' for negative numbers.",
      "The 'checkInput' method does not throw any exception for negative numbers.",
      "The 'checkInput' method throws an ArithmeticException instead of the 'NegativeNumberException' for negative numbers.",
    ],
    correct: 0,
    explanations: [
      "The correct answer defines a Java method 'checkInput' that properly throws a 'NegativeNumberException' when a negative number is passed as input.",
      "This answer incorrectly suggests a NullPointerException being thrown instead of the specified 'NegativeNumberException' for negative numbers.",
      "This answer indicates that the method does not throw any exception for negative numbers, which is incorrect based on the question requirements.",
      "This answer incorrectly identifies a different type of exception being thrown instead of the specified 'NegativeNumberException' for negative numbers.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question:
      "Create a Java program that handles NullPointerException by printing 'Null Pointer Exception Occurred' and terminating gracefully.",
    code: "",
    answers: [
      "The program correctly handles NullPointerException by printing 'Null Pointer Exception Occurred' and terminating gracefully.",
      "The program crashes when NullPointerException occurs without displaying any message.",
      "The program throws a NumberFormatException instead of handling NullPointerException.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly handles NullPointerException by printing 'Null Pointer Exception Occurred' and terminating gracefully.",
      "This answer indicates that the program crashes when NullPointerException occurs without displaying any message, which is incorrect for a well-handled error scenario.",
      "This answer incorrectly suggests that the program throws a NumberFormatException instead of properly handling NullPointerException.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question:
      "Create a Java program that defines a custom exception 'InvalidInputException' and throws it when the user enters a non-numeric input.",
    code: "",
    answers: [
      "The program correctly defines the custom exception 'InvalidInputException' and throws it for non-numeric inputs.",
      "The program throws a NumberFormatException instead of the custom exception for non-numeric inputs.",
      "The program does not handle non-numeric inputs and crashes.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly defines a custom exception 'InvalidInputException' and throws it when the user enters a non-numeric input.",
      "This answer incorrectly suggests that the program throws a NumberFormatException instead of the specified custom exception for non-numeric inputs.",
      "This answer indicates that the program does not handle non-numeric inputs and crashes, which is incorrect for a well-designed error handling mechanism.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "Create a Java method named 'validateAge' that takes an integer as input and throws an 'InvalidAgeException' if the age is negative.",
    code: "",
    answers: [
      "The 'validateAge' method correctly throws an 'InvalidAgeException' when a negative age is passed as input.",
      "The 'validateAge' method throws a NullPointerException instead of the 'InvalidAgeException' for negative ages.",
      "The 'validateAge' method does not throw any exception for negative ages.",
      "The 'validateAge' method throws an ArithmeticException instead of the 'InvalidAgeException' for negative ages.",
    ],
    correct: 0,
    explanations: [
      "The correct answer defines a Java method 'validateAge' that properly throws an 'InvalidAgeException' when a negative age is passed as input.",
      "This answer incorrectly suggests a NullPointerException being thrown instead of the specified 'InvalidAgeException' for negative ages.",
      "This answer indicates that the method does not throw any exception for negative ages, which is incorrect based on the question requirements.",
      "This answer incorrectly identifies a different type of exception being thrown instead of the specified 'InvalidAgeException' for negative ages.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question:
      "Create a Java program that handles ArithmeticException by printing 'Arithmetic Exception Occurred' and terminating gracefully.",
    code: "",
    answers: [
      "The program correctly handles ArithmeticException by printing 'Arithmetic Exception Occurred' and terminating gracefully.",
      "The program crashes when ArithmeticException occurs without displaying any message.",
      "The program throws a NullPointerException instead of handling ArithmeticException.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly handles ArithmeticException by printing 'Arithmetic Exception Occurred' and terminating gracefully.",
      "This answer indicates that the program crashes when ArithmeticException occurs without displaying any message, which is incorrect for a well-handled error scenario.",
      "This answer incorrectly suggests that the program throws a NullPointerException instead of properly handling ArithmeticException.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question:
      "Create a Java program that defines a custom exception 'InvalidInputException' and throws it when the user enters a string longer than 10 characters.",
    code: "",
    answers: [
      "The program correctly defines the custom exception 'InvalidInputException' and throws it for strings longer than 10 characters.",
      "The program throws a NumberFormatException instead of the custom exception for strings longer than 10 characters.",
      "The program does not handle strings longer than 10 characters and crashes.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly defines a custom exception 'InvalidInputException' and throws it when the user enters a string longer than 10 characters.",
      "This answer incorrectly suggests that the program throws a NumberFormatException instead of the specified custom exception for strings longer than 10 characters.",
      "This answer indicates that the program does not handle strings longer than 10 characters and crashes, which is incorrect for a well-designed error handling mechanism.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "Create a Java method named 'validateUsername' that takes a string as input and throws an 'InvalidUsernameException' if the username is empty.",
    code: "",
    answers: [
      "The 'validateUsername' method correctly throws an 'InvalidUsernameException' when an empty username is passed as input.",
      "The 'validateUsername' method throws a NullPointerException instead of the 'InvalidUsernameException' for empty usernames.",
      "The 'validateUsername' method does not throw any exception for empty usernames.",
      "The 'validateUsername' method throws an IllegalArgumentException instead of the 'InvalidUsernameException' for empty usernames.",
    ],
    correct: 0,
    explanations: [
      "The correct answer defines a Java method 'validateUsername' that properly throws an 'InvalidUsernameException' when an empty username is passed as input.",
      "This answer incorrectly suggests a NullPointerException being thrown instead of the specified 'InvalidUsernameException' for empty usernames.",
      "This answer indicates that the method does not throw any exception for empty usernames, which is incorrect based on the question requirements.",
      "This answer incorrectly identifies a different type of exception being thrown instead of the specified 'InvalidUsernameException' for empty usernames.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question:
      "Create a Java program that handles FileNotFoundException by printing 'File Not Found Exception Occurred' and terminating gracefully.",
    code: "",
    answers: [
      "The program correctly handles FileNotFoundException by printing 'File Not Found Exception Occurred' and terminating gracefully.",
      "The program crashes when FileNotFoundException occurs without displaying any message.",
      "The program throws a NullPointerException instead of handling FileNotFoundException.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly handles FileNotFoundException by printing 'File Not Found Exception Occurred' and terminating gracefully.",
      "This answer indicates that the program crashes when FileNotFoundException occurs without displaying any message, which is incorrect for a well-handled error scenario.",
      "This answer incorrectly suggests that the program throws a NullPointerException instead of properly handling FileNotFoundException.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question:
      "Create a Java program that defines a custom exception 'InvalidInputException' and throws it when the user enters a negative number.",
    code: "",
    answers: [
      "The program correctly defines the custom exception 'InvalidInputException' and throws it for negative numbers entered by the user.",
      "The program throws a NumberFormatException instead of the custom exception for negative numbers entered by the user.",
      "The program does not handle negative numbers entered by the user and crashes.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly defines a custom exception 'InvalidInputException' and throws it when the user enters a negative number.",
      "This answer incorrectly suggests that the program throws a NumberFormatException instead of the specified custom exception for negative numbers entered by the user.",
      "This answer indicates that the program does not handle negative numbers entered by the user and crashes, which is incorrect for a well-designed error handling mechanism.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "Create a Java method named 'validatePhoneNumber' that takes a string as input and throws an 'InvalidPhoneNumberException' if the phone number format is incorrect.",
    code: "",
    answers: [
      "The 'validatePhoneNumber' method correctly throws an 'InvalidPhoneNumberException' for incorrect phone number formats.",
      "The 'validatePhoneNumber' method throws a NullPointerException instead of the 'InvalidPhoneNumberException'.",
      "The 'validatePhoneNumber' method does not throw any exception for incorrect phone number formats.",
      "The 'validatePhoneNumber' method throws a NumberFormatException instead of the 'InvalidPhoneNumberException'.",
    ],
    correct: 0,
    explanations: [
      "The correct answer defines a Java method 'validatePhoneNumber' that properly throws an 'InvalidPhoneNumberException' for incorrect phone number formats.",
      "This answer incorrectly suggests a NullPointerException being thrown instead of the specified 'InvalidPhoneNumberException'.",
      "This answer indicates that the method does not throw any exception for incorrect phone number formats, which is incorrect based on the question requirements.",
      "This answer incorrectly identifies a different type of exception being thrown instead of the specified 'InvalidPhoneNumberException'.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
];
