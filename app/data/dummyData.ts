export const dummyData: {
  difficulty: number;
  question: string;
  code?: string;
  answers: string[];
  correct: number;
  explanations: string[];
  bloomTaxonomy: string;
  timeTakenSeconds: number;
  topic: string;
}[] = [
  {
    difficulty: 0.3,
    question:
      "In Java, which keyword is used to explicitly throw an exception?",

    answers: ["throw", "try", "catch", "finally"],
    correct: 0,
    explanations: [
      "The 'throw' keyword is used to explicitly throw an exception in Java.",
      "Incorrect: 'try' is used to start a block of code that will be tested for exceptions.",
      "Incorrect: 'catch' is used to catch exceptions that are thrown by the 'try' block.",
      "Incorrect: 'finally' is used to create a block of code that will be executed after a 'try' block, regardless of whether an exception is thrown or not.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question:
      "What is the purpose of the 'finally' block in Java exception handling?",

    answers: [
      "To define a block of code that will be executed after a 'try' block, regardless of whether an exception is thrown or not.",
      "To catch exceptions that are thrown by the 'try' block.",
      "To define a block of code that will be executed only if an exception is thrown by the 'try' block.",
      "To explicitly throw an exception.",
    ],
    correct: 0,
    explanations: [
      "The purpose of the 'finally' block is to define a block of code that will be executed after a 'try' block, regardless of whether an exception is thrown or not.",
      "Incorrect: 'catch' is used to catch exceptions that are thrown by the 'try' block.",
      "Incorrect: This describes the behavior of a 'catch' block, not 'finally'.",
      "Incorrect: The 'throw' keyword is used to explicitly throw an exception.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question: "Which of the following is a checked exception in Java?",

    answers: [
      "IOException",
      "NullPointerException",
      "ArrayIndexOutOfBoundsException",
      "NumberFormatException",
    ],
    correct: 0,
    explanations: [
      "IOException is a checked exception in Java, meaning it must be either caught or declared to be thrown.",
      "Incorrect: NullPointerException is an unchecked exception.",
      "Incorrect: ArrayIndexOutOfBoundsException is an unchecked exception.",
      "Incorrect: NumberFormatException is an unchecked exception.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      'What does the following Java code snippet do?\ntry {\n    // Code that may throw exceptions\n}\ncatch (Exception e) {\n    System.out.println("An error occurred: " + e.getMessage());\n}\nfinally {\n    System.out.println("Finally block executed.");\n}',

    answers: [
      "Attempts to execute the code within the 'try' block, catches any exceptions thrown, prints an error message, and then executes the code within the 'finally' block.",
      "Attempts to execute the code within the 'try' block, catches any exceptions thrown, and then executes the code within the 'finally' block.",
      "Executes the code within the 'finally' block regardless of whether exceptions were thrown or not.",
      "Throws an exception regardless of the execution of the 'try' block.",
    ],
    correct: 0,
    explanations: [
      "The code attempts to execute the code within the 'try' block, catches any exceptions thrown, prints an error message, and then executes the code within the 'finally' block.",
      "Incorrect: This answer doesn't include printing the error message.",
      "Incorrect: This answer doesn't handle exceptions caught by the 'catch' block.",
      "Incorrect: The code does not throw an exception itself, it only catches and handles exceptions.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "What is the purpose of the 'throws' keyword in Java method declaration?",

    answers: [
      "To declare that the method may throw certain exceptions and to specify them.",
      "To catch exceptions thrown by the method.",
      "To specify that the method must be surrounded by a 'try-catch' block.",
      "To create a custom exception.",
    ],
    correct: 0,
    explanations: [
      "The 'throws' keyword in Java method declaration is used to declare that the method may throw certain exceptions and to specify them.",
      "Incorrect: 'try-catch' blocks are used to catch exceptions thrown by the method.",
      "Incorrect: The 'throws' keyword does not specify that the method must be surrounded by a 'try-catch' block, but rather that calling code must handle the specified exceptions.",
      "Incorrect: The 'throws' keyword does not create custom exceptions, it only specifies which exceptions may be thrown by the method.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question: "In Java, what is an unchecked exception?",

    answers: [
      "An exception that does not need to be explicitly caught or declared in a method signature.",
      "An exception that must be explicitly caught or declared in a method signature.",
      "An exception that is thrown by the Java Virtual Machine (JVM).",
      "An exception that occurs only during compile-time.",
    ],
    correct: 0,
    explanations: [
      "An unchecked exception in Java is an exception that does not need to be explicitly caught or declared in a method signature.",
      "Incorrect: Checked exceptions must be explicitly caught or declared in a method signature.",
      "Incorrect: Checked exceptions are exceptions that occur during runtime, not necessarily thrown by the JVM.",
      "Incorrect: Compile-time exceptions are not necessarily unchecked exceptions; they can be checked exceptions.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question:
      "Which of the following statements about Java exceptions is true?",

    answers: [
      "Unchecked exceptions are subclasses of RuntimeException.",
      "Checked exceptions are subclasses of Error.",
      "All exceptions in Java are checked exceptions.",
      "The 'throws' keyword is used to catch exceptions.",
    ],
    correct: 0,
    explanations: [
      "Unchecked exceptions in Java are subclasses of RuntimeException.",
      "Incorrect: Checked exceptions are not subclasses of Error; they are a separate category of exceptions.",
      "Incorrect: All exceptions in Java are not checked exceptions; there are also unchecked exceptions.",
      "Incorrect: The 'throws' keyword is used to declare that a method may throw certain exceptions, not to catch exceptions.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question:
      "Which of the following statements about Java exception handling is true?",

    answers: [
      "Exception handling in Java helps manage runtime errors and abnormal conditions.",
      "Java only supports checked exceptions.",
      "The 'finally' block is required in every try-catch statement.",
      "Java does not allow custom exceptions.",
    ],
    correct: 0,
    explanations: [
      "Exception handling in Java helps manage runtime errors and abnormal conditions.",
      "Incorrect: Java supports both checked and unchecked exceptions.",
      "Incorrect: The 'finally' block is not required in every try-catch statement, though it's often used for cleanup operations.",
      "Incorrect: Java allows custom exceptions to be defined.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "What happens if an exception is thrown in the 'catch' block of a Java try-catch statement?",

    answers: [
      "The exception can be caught by an enclosing try-catch statement.",
      "The program terminates.",
      "The exception is silently ignored.",
      "The 'finally' block is executed immediately.",
    ],
    correct: 0,
    explanations: [
      "An exception thrown in the 'catch' block of a Java try-catch statement can be caught by an enclosing try-catch statement.",
      "Incorrect: Unless there's an enclosing try-catch statement, the program does not necessarily terminate.",
      "Incorrect: Exceptions in the 'catch' block are not silently ignored; they can be caught by enclosing try-catch statements.",
      "Incorrect: The 'finally' block is executed after the 'try' block, whether or not an exception is thrown.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.2,
    question:
      "What does the 'getMessage()' method of the Exception class in Java return?",

    answers: [
      "The error message associated with the exception.",
      "The name of the exception class.",
      "The stack trace of the exception.",
      "The error code associated with the exception.",
    ],
    correct: 0,
    explanations: [
      "The 'getMessage()' method of the Exception class in Java returns the error message associated with the exception.",
      "Incorrect: This describes the 'getClass().getName()' method, which returns the name of the exception class.",
      "Incorrect: This describes the 'printStackTrace()' method, which prints the stack trace of the exception.",
      "Incorrect: There is no standard 'errorCode' associated with exceptions in Java.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question:
      'What is the output of the following Java code?\ntry {\n    int[] arr = new int[5];\n    arr[10] = 7;\n}\ncatch (ArrayIndexOutOfBoundsException e) {\n    System.out.println("Array index out of bounds.");\n}\nfinally {\n    System.out.println("Finally block executed.");\n}',

    answers: [
      "Array index out of bounds.\nFinally block executed.",
      "Array index out of bounds.",
      "Finally block executed.",
      "ArrayIndexOutOfBoundsException",
    ],
    correct: 0,
    explanations: [
      "The output of the code is 'Array index out of bounds.' followed by 'Finally block executed.'",
      "Incorrect: This answer does not include the 'Finally block executed.' message.",
      "Incorrect: This answer does not include the 'Array index out of bounds.' message.",
      "Incorrect: The output is not the exception itself, but the message printed by the catch block.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question: "Which of the following is NOT a standard Java exception?",

    answers: [
      "InvalidParameterException",
      "FileNotFoundException",
      "NumberFormatException",
      "NullPointerException",
    ],
    correct: 0,
    explanations: [
      "InvalidParameterException is not a standard Java exception.",
      "Incorrect: FileNotFoundException, NumberFormatException, and NullPointerException are all standard Java exceptions.",
      "Incorrect: FileNotFoundException is a standard Java exception.",
      "Incorrect: NumberFormatException is a standard Java exception.",
      "Incorrect: NullPointerException is a standard Java exception.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question: "What is the primary purpose of using try-catch blocks in Java?",

    answers: [
      "To handle exceptions that may occur during the execution of code.",
      "To declare that a method may throw certain exceptions.",
      "To explicitly throw an exception.",
      "To catch errors thrown by the JVM.",
    ],
    correct: 0,
    explanations: [
      "The primary purpose of using try-catch blocks in Java is to handle exceptions that may occur during the execution of code.",
      "Incorrect: The 'throws' keyword is used to declare that a method may throw certain exceptions.",
      "Incorrect: The 'throw' keyword is used to explicitly throw an exception.",
      "Incorrect: Errors thrown by the JVM are typically caught by higher-level exception handlers or not caught at all.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question:
      "What does the 'printStackTrace()' method of the Exception class in Java do?",

    answers: [
      "Prints the stack trace of the exception to the standard error stream.",
      "Prints the error message associated with the exception to the standard output stream.",
      "Prints the name of the exception class to the standard output stream.",
      "Prints the error code associated with the exception to the standard error stream.",
    ],
    correct: 0,
    explanations: [
      "The 'printStackTrace()' method of the Exception class in Java prints the stack trace of the exception to the standard error stream.",
      "Incorrect: This describes the 'getMessage()' method, which returns the error message associated with the exception.",
      "Incorrect: This describes the 'getClass().getName()' method, which returns the name of the exception class.",
      "Incorrect: There is no standard 'errorCode' associated with exceptions in Java.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question: "Which keyword in Java is used to define custom exceptions?",

    answers: ["class", "try", "catch", "finally"],
    correct: 0,
    explanations: [
      "The 'class' keyword in Java is used to define custom exceptions by creating a new exception class.",
      "Incorrect: 'try' is used to start a block of code that will be tested for exceptions.",
      "Incorrect: 'catch' is used to catch exceptions that are thrown by the 'try' block.",
      "Incorrect: 'finally' is used to create a block of code that will be executed after a 'try' block, regardless of whether an exception is thrown or not.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "What is the purpose of the 'getMessage()' method in Java exceptions?",

    answers: [
      "To retrieve the error message associated with the exception.",
      "To retrieve the name of the exception class.",
      "To print the stack trace of the exception.",
      "To throw an exception.",
    ],
    correct: 0,
    explanations: [
      "The purpose of the 'getMessage()' method in Java exceptions is to retrieve the error message associated with the exception.",
      "Incorrect: This describes the 'getClass().getName()' method, which returns the name of the exception class.",
      "Incorrect: This describes the 'printStackTrace()' method, which prints the stack trace of the exception.",
      "Incorrect: The 'throw' keyword is used to explicitly throw an exception.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "What is the purpose of the 'printStackTrace()' method in Java exceptions?",

    answers: [
      "To print the stack trace of the exception to the standard error stream.",
      "To print the error message associated with the exception to the standard output stream.",
      "To print the name of the exception class to the standard output stream.",
      "To print the error code associated with the exception to the standard error stream.",
    ],
    correct: 0,
    explanations: [
      "The purpose of the 'printStackTrace()' method in Java exceptions is to print the stack trace of the exception to the standard error stream.",
      "Incorrect: This describes the 'getMessage()' method, which returns the error message associated with the exception.",
      "Incorrect: This describes the 'getClass().getName()' method, which returns the name of the exception class.",
      "Incorrect: There is no standard 'errorCode' associated with exceptions in Java.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "What is the purpose of the 'finally' block in Java exception handling?",

    answers: [
      "To define a block of code that will be executed after a 'try' block, regardless of whether an exception is thrown or not.",
      "To catch exceptions that are thrown by the 'try' block.",
      "To define a block of code that will be executed only if an exception is thrown by the 'try' block.",
      "To explicitly throw an exception.",
    ],
    correct: 0,
    explanations: [
      "The purpose of the 'finally' block is to define a block of code that will be executed after a 'try' block, regardless of whether an exception is thrown or not.",
      "Incorrect: 'catch' is used to catch exceptions that are thrown by the 'try' block.",
      "Incorrect: This describes the behavior of a 'catch' block, not 'finally'.",
      "Incorrect: The 'throw' keyword is used to explicitly throw an exception.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question:
      "In Java, which keyword is used to explicitly throw an exception?",

    answers: ["throw", "try", "catch", "finally"],
    correct: 0,
    explanations: [
      "The 'throw' keyword is used to explicitly throw an exception in Java.",
      "Incorrect: 'try' is used to start a block of code that will be tested for exceptions.",
      "Incorrect: 'catch' is used to catch exceptions that are thrown by the 'try' block.",
      "Incorrect: 'finally' is used to create a block of code that will be executed after a 'try' block, regardless of whether an exception is thrown or not.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question: "Which of the following is a checked exception in Java?",

    answers: [
      "IOException",
      "NullPointerException",
      "ArrayIndexOutOfBoundsException",
      "NumberFormatException",
    ],
    correct: 0,
    explanations: [
      "IOException is a checked exception in Java, meaning it must be either caught or declared to be thrown.",
      "Incorrect: NullPointerException is an unchecked exception.",
      "Incorrect: ArrayIndexOutOfBoundsException is an unchecked exception.",
      "Incorrect: NumberFormatException is an unchecked exception.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question: "What is the primary purpose of using try-catch blocks in Java?",

    answers: [
      "To handle exceptions that may occur during the execution of code.",
      "To declare that a method may throw certain exceptions.",
      "To explicitly throw an exception.",
      "To catch errors thrown by the JVM.",
    ],
    correct: 0,
    explanations: [
      "The primary purpose of using try-catch blocks in Java is to handle exceptions that may occur during the execution of code.",
      "Incorrect: The 'throws' keyword is used to declare that a method may throw certain exceptions.",
      "Incorrect: The 'throw' keyword is used to explicitly throw an exception.",
      "Incorrect: Errors thrown by the JVM are typically caught by higher-level exception handlers or not caught at all.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question:
      "Which of the following statements about Java exception handling is true?",

    answers: [
      "Exception handling in Java helps manage runtime errors and abnormal conditions.",
      "Java only supports checked exceptions.",
      "The 'finally' block is required in every try-catch statement.",
      "Java does not allow custom exceptions.",
    ],
    correct: 0,
    explanations: [
      "Exception handling in Java helps manage runtime errors and abnormal conditions.",
      "Incorrect: Java supports both checked and unchecked exceptions.",
      "Incorrect: The 'finally' block is not required in every try-catch statement, though it's often used for cleanup operations.",
      "Incorrect: Java allows custom exceptions to be defined.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.2,
    question:
      "What does the 'getMessage()' method of the Exception class in Java return?",

    answers: [
      "The error message associated with the exception.",
      "The name of the exception class.",
      "The stack trace of the exception.",
      "The error code associated with the exception.",
    ],
    correct: 0,
    explanations: [
      "The 'getMessage()' method of the Exception class in Java returns the error message associated with the exception.",
      "Incorrect: This describes the 'getClass().getName()' method, which returns the name of the exception class.",
      "Incorrect: This describes the 'printStackTrace()' method, which prints the stack trace of the exception.",
      "Incorrect: There is no standard 'errorCode' associated with exceptions in Java.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question:
      "Which of the following statements about Java exceptions is true?",

    answers: [
      "Unchecked exceptions are subclasses of RuntimeException.",
      "Checked exceptions are subclasses of Error.",
      "All exceptions in Java are checked exceptions.",
      "The 'throws' keyword is used to catch exceptions.",
    ],
    correct: 0,
    explanations: [
      "Unchecked exceptions in Java are subclasses of RuntimeException.",
      "Incorrect: Checked exceptions are not subclasses of Error; they are a separate category of exceptions.",
      "Incorrect: All exceptions in Java are not checked exceptions; there are also unchecked exceptions.",
      "Incorrect: The 'throws' keyword is used to declare that a method may throw certain exceptions, not to catch exceptions.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "What happens if an exception is thrown in the 'catch' block of a Java try-catch statement?",

    answers: [
      "The exception can be caught by an enclosing try-catch statement.",
      "The program terminates.",
      "The exception is silently ignored.",
      "The 'finally' block is executed immediately.",
    ],
    correct: 0,
    explanations: [
      "An exception thrown in the 'catch' block of a Java try-catch statement can be caught by an enclosing try-catch statement.",
      "Incorrect: Unless there's an enclosing try-catch statement, the program does not necessarily terminate.",
      "Incorrect: Exceptions in the 'catch' block are not silently ignored; they can be caught by enclosing try-catch statements.",
      "Incorrect: The 'finally' block is executed after the 'try' block, whether or not an exception is thrown.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question:
      "What does the 'printStackTrace()' method of the Exception class in Java do?",

    answers: [
      "Prints the stack trace of the exception to the standard error stream.",
      "Prints the error message associated with the exception to the standard output stream.",
      "Prints the name of the exception class to the standard output stream.",
      "Prints the error code associated with the exception to the standard error stream.",
    ],
    correct: 0,
    explanations: [
      "The 'printStackTrace()' method of the Exception class in Java prints the stack trace of the exception to the standard error stream.",
      "Incorrect: This describes the 'getMessage()' method, which returns the error message associated with the exception.",
      "Incorrect: This describes the 'getClass().getName()' method, which returns the name of the exception class.",
      "Incorrect: There is no standard 'errorCode' associated with exceptions in Java.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question: "Which of the following is NOT a standard Java exception?",

    answers: [
      "InvalidParameterException",
      "FileNotFoundException",
      "NumberFormatException",
      "NullPointerException",
    ],
    correct: 0,
    explanations: [
      "InvalidParameterException is not a standard Java exception.",
      "Incorrect: FileNotFoundException, NumberFormatException, and NullPointerException are all standard Java exceptions.",
      "Incorrect: FileNotFoundException is a standard Java exception.",
      "Incorrect: NumberFormatException is a standard Java exception.",
      "Incorrect: NullPointerException is a standard Java exception.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "What is the purpose of the 'getMessage()' method in Java exceptions?",

    answers: [
      "To retrieve the error message associated with the exception.",
      "To retrieve the name of the exception class.",
      "To print the stack trace of the exception.",
      "To throw an exception.",
    ],
    correct: 0,
    explanations: [
      "The purpose of the 'getMessage()' method in Java exceptions is to retrieve the error message associated with the exception.",
      "Incorrect: This describes the 'getClass().getName()' method, which returns the name of the exception class.",
      "Incorrect: This describes the 'printStackTrace()' method, which prints the stack trace of the exception.",
      "Incorrect: The 'throw' keyword is used to explicitly throw an exception.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question: "Which keyword in Java is used to define custom exceptions?",

    answers: ["class", "try", "catch", "finally"],
    correct: 0,
    explanations: [
      "The 'class' keyword in Java is used to define custom exceptions by creating a new exception class.",
      "Incorrect: 'try' is used to start a block of code that will be tested for exceptions.",
      "Incorrect: 'catch' is used to catch exceptions that are thrown by the 'try' block.",
      "Incorrect: 'finally' is used to create a block of code that will be executed after a 'try' block, regardless of whether an exception is thrown or not.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "What is the purpose of the 'printStackTrace()' method in Java exceptions?",

    answers: [
      "To print the stack trace of the exception to the standard error stream.",
      "To print the error message associated with the exception to the standard output stream.",
      "To print the name of the exception class to the standard output stream.",
      "To print the error code associated with the exception to the standard error stream.",
    ],
    correct: 0,
    explanations: [
      "The purpose of the 'printStackTrace()' method in Java exceptions is to print the stack trace of the exception to the standard error stream.",
      "Incorrect: This describes the 'getMessage()' method, which returns the error message associated with the exception.",
      "Incorrect: This describes the 'getClass().getName()' method, which returns the name of the exception class.",
      "Incorrect: There is no standard 'errorCode' associated with exceptions in Java.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      'What does the following Java code snippet do?\ntry {\n    // Code that may throw exceptions\n}\ncatch (Exception e) {\n    System.out.println("An error occurred: " + e.getMessage());\n}\nfinally {\n    System.out.println("Finally block executed.");\n}',

    answers: [
      "Attempts to execute the code within the 'try' block, catches any exceptions thrown, prints an error message, and then executes the code within the 'finally' block.",
      "Attempts to execute the code within the 'try' block, catches any exceptions thrown, and then executes the code within the 'finally' block.",
      "Executes the code within the 'finally' block regardless of whether exceptions were thrown or not.",
      "Throws an exception regardless of the execution of the 'try' block.",
    ],
    correct: 0,
    explanations: [
      "The code attempts to execute the code within the 'try' block, catches any exceptions thrown, prints an error message, and then executes the code within the 'finally' block.",
      "Incorrect: This answer doesn't include printing the error message.",
      "Incorrect: This answer doesn't handle exceptions caught by the 'catch' block.",
      "Incorrect: The code does not throw an exception itself.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question:
      "Which of the following statements is true regarding custom exceptions in Java?",

    answers: [
      "Custom exceptions must be subclasses of the Exception class or one of its subclasses.",
      "Custom exceptions cannot have custom error messages.",
      "Custom exceptions must not be subclassed further.",
      "Custom exceptions are automatically checked exceptions.",
    ],
    correct: 0,
    explanations: [
      "Custom exceptions must be subclasses of the Exception class or one of its subclasses.",
      "Incorrect: Custom exceptions can have custom error messages.",
      "Incorrect: Custom exceptions can be subclassed further if necessary.",
      "Incorrect: Whether a custom exception is checked or unchecked depends on its hierarchy.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question:
      "What is the purpose of the 'getMessage()' method in Java exceptions?",

    answers: [
      "To retrieve the error message associated with the exception.",
      "To retrieve the name of the exception class.",
      "To print the stack trace of the exception.",
      "To throw an exception.",
    ],
    correct: 0,
    explanations: [
      "The purpose of the 'getMessage()' method in Java exceptions is to retrieve the error message associated with the exception.",
      "Incorrect: This describes the 'getClass().getName()' method, which returns the name of the exception class.",
      "Incorrect: This describes the 'printStackTrace()' method, which prints the stack trace of the exception.",
      "Incorrect: The 'throw' keyword is used to explicitly throw an exception.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "In Java, what happens if you throw an exception inside a 'finally' block?",
    code: "",
    answers: [
      "The exception thrown inside the 'finally' block overrides any previously caught exceptions.",
      "The program terminates immediately.",
      "The exception is caught by an enclosing 'try-catch' block, if one exists.",
      "The exception is silently ignored.",
    ],
    correct: 0,
    explanations: [
      "If you throw an exception inside a 'finally' block in Java, the exception is caught by an enclosing 'try-catch' block, if one exists.",
      "The 'finally' block executes regardless of whether an exception occurs, and any exception thrown inside it is handled accordingly.",
      "Incorrect: The program will not necessarily terminate immediately; it depends on whether the thrown exception is caught higher up in the call stack.",
      "Incorrect: Exceptions thrown within 'finally' blocks are not silently ignored; they can be caught by enclosing 'try-catch' blocks.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question: "What is the purpose of the 'try-catch' block in Java?",
    code: "",
    answers: [
      "To handle exceptions that may occur during the execution of code.",
      "To explicitly throw an exception.",
      "To define a block of code that will be executed after a 'finally' block.",
      "To catch errors thrown by the JVM.",
    ],
    correct: 0,
    explanations: [
      "The purpose of the 'try-catch' block in Java is to handle exceptions that may occur during the execution of code.",
      "Incorrect: The 'throw' keyword is used to explicitly throw an exception.",
      "Incorrect: The 'finally' block is used to define a block of code that will be executed after a 'try' block.",
      "Incorrect: Errors thrown by the JVM are typically caught by higher-level exception handlers or not caught at all.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "Which of the following statements about Java exception handling is true?",
    code: "",
    answers: [
      "Java supports both checked and unchecked exceptions.",
      "Java only supports checked exceptions.",
      "Java only supports unchecked exceptions.",
      "Java does not support exceptions.",
    ],
    correct: 0,
    explanations: [
      "Java supports both checked and unchecked exceptions.",
      "Incorrect: Java supports both checked and unchecked exceptions.",
      "Incorrect: Java supports both checked and unchecked exceptions.",
      "Incorrect: Java supports both checked and unchecked exceptions.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question:
      "What is the purpose of the 'getMessage()' method in Java exceptions?",
    code: "",
    answers: [
      "To retrieve the error message associated with the exception.",
      "To retrieve the name of the exception class.",
      "To print the stack trace of the exception.",
      "To throw an exception.",
    ],
    correct: 0,
    explanations: [
      "The purpose of the 'getMessage()' method in Java exceptions is to retrieve the error message associated with the exception.",
      "This method returns a String containing the error message that was passed when the exception was created.",
      "Incorrect: This method returns the name of the exception class.",
      "Incorrect: This method prints the stack trace of the exception.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question:
      "What is the purpose of the 'printStackTrace()' method in Java exceptions?",
    code: "",
    answers: [
      "To print the stack trace of the exception to the standard error stream.",
      "To print the error message associated with the exception to the standard output stream.",
      "To print the name of the exception class to the standard output stream.",
      "To print the error code associated with the exception to the standard error stream.",
    ],
    correct: 0,
    explanations: [
      "The purpose of the 'printStackTrace()' method in Java exceptions is to print the stack trace of the exception to the standard error stream.",
      "This method is useful for debugging, as it provides information about the sequence of method calls leading up to the exception.",
      "Incorrect: This method prints the error message associated with the exception.",
      "Incorrect: There is no standard 'errorCode' associated with exceptions in Java.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question:
      "Which of the following keywords is used to catch exceptions in Java?",
    code: "",
    answers: ["catch", "try", "throw", "finally"],
    correct: 0,
    explanations: [
      "The 'catch' keyword is used to catch exceptions in Java.",
      "Incorrect: 'try' is used to start a block of code that will be tested for exceptions.",
      "Incorrect: 'throw' is used to explicitly throw an exception.",
      "Incorrect: 'finally' is used to create a block of code that will be executed after a 'try' block, regardless of whether an exception is thrown or not.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "What is the purpose of the 'throws' keyword in Java method declarations?",
    code: "",
    answers: [
      "To indicate that the method may throw certain exceptions and it's the caller's responsibility to handle them.",
      "To indicate that the method will catch all exceptions thrown within its body.",
      "To indicate that the method is expected to rethrow any exceptions it catches.",
      "To indicate that the method will throw an exception regardless of its execution path.",
    ],
    correct: 0,
    explanations: [
      "The 'throws' keyword in Java method declarations is used to indicate that the method may throw certain exceptions and it's the caller's responsibility to handle them.",
      "Incorrect: The 'throws' keyword does not imply that the method catches exceptions thrown within its body.",
      "Incorrect: The 'throws' keyword does not imply that the method is expected to rethrow any exceptions it catches.",
      "Incorrect: The 'throws' keyword does not imply that the method will throw an exception regardless of its execution path.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question: "Which of the following is NOT a standard Java exception?",
    code: "",
    answers: [
      "InvalidParameterException",
      "FileNotFoundException",
      "NumberFormatException",
      "NullPointerException",
    ],
    correct: 0,
    explanations: [
      "InvalidParameterException is not a standard Java exception.",
      "Incorrect: FileNotFoundException, NumberFormatException, and NullPointerException are all standard Java exceptions.",
      "Incorrect: FileNotFoundException is a standard Java exception.",
      "Incorrect: NumberFormatException is a standard Java exception.",
      "Incorrect: NullPointerException is a standard Java exception.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question: "What does the 'getMessage()' method in Java exceptions return?",
    code: "",
    answers: [
      "The error message associated with the exception.",
      "The name of the exception class.",
      "The stack trace of the exception.",
      "The error code associated with the exception.",
    ],
    correct: 0,
    explanations: [
      "The 'getMessage()' method in Java exceptions returns the error message associated with the exception.",
      "This method returns a String containing the error message that was passed when the exception was created.",
      "Incorrect: This method returns the name of the exception class.",
      "Incorrect: This method returns the stack trace of the exception.",
      "Incorrect: Java exceptions do not typically have an error code associated with them.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question: "What does the 'printStackTrace()' method in Java exceptions do?",
    code: "",
    answers: [
      "Prints the stack trace of the exception to the standard error stream.",
      "Prints the error message associated with the exception to the standard output stream.",
      "Prints the name of the exception class to the standard output stream.",
      "Prints the error code associated with the exception to the standard error stream.",
    ],
    correct: 0,
    explanations: [
      "The 'printStackTrace()' method in Java exceptions prints the stack trace of the exception to the standard error stream.",
      "This method is useful for debugging, as it provides information about the sequence of method calls leading up to the exception.",
      "Incorrect: This method prints the error message associated with the exception.",
      "Incorrect: There is no standard 'errorCode' associated with exceptions in Java.",
      "Incorrect: This method does not print the name of the exception class.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question: "What happens if you catch an exception but don't handle it?",
    code: "",
    answers: [
      "The program will compile but may crash at runtime if the exception is not handled.",
      "The program will not compile because all exceptions must be handled.",
      "The program will ignore the exception and continue executing.",
      "The program will prompt the user to handle the exception.",
    ],
    correct: 0,
    explanations: [
      "If you catch an exception but don't handle it, the program will compile but may crash at runtime if the exception is not handled.",
      "Incorrect: While it's good practice to handle exceptions, it's not mandatory for compilation.",
      "Incorrect: Ignoring exceptions can lead to unpredictable behavior and is generally not recommended.",
      "Incorrect: The program does not prompt the user to handle exceptions automatically.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "What is the purpose of the 'finally' block in exception handling?",
    code: "",
    answers: [
      "To execute code that should always run, regardless of whether an exception is thrown or not.",
      "To catch exceptions that are thrown within the 'try' block.",
      "To rethrow exceptions caught by the 'catch' block.",
      "To handle exceptions thrown by the 'try' block.",
    ],
    correct: 0,
    explanations: [
      "The purpose of the 'finally' block in exception handling is to execute code that should always run, regardless of whether an exception is thrown or not.",
      "Incorrect: 'finally' blocks do not catch exceptions but execute cleanup code.",
      "Incorrect: 'finally' blocks do not rethrow exceptions but execute cleanup code.",
      "Incorrect: 'finally' blocks do not handle exceptions but execute cleanup code.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question:
      "Which of the following statements about checked and unchecked exceptions in Java is true?",
    code: "",
    answers: [
      "Checked exceptions must be caught or declared in the method signature, while unchecked exceptions do not need to be caught or declared.",
      "Unchecked exceptions must be caught or declared in the method signature, while checked exceptions do not need to be caught or declared.",
      "Both checked and unchecked exceptions must be caught or declared in the method signature.",
      "Neither checked nor unchecked exceptions need to be caught or declared in the method signature.",
    ],
    correct: 0,
    explanations: [
      "The statement that checked exceptions must be caught or declared in the method signature, while unchecked exceptions do not need to be caught or declared, is true.",
      "Checked exceptions are subject to compile-time checking and must be either caught or declared in the method signature, while unchecked exceptions are not subject to this requirement.",
      "Incorrect: Unchecked exceptions do not need to be caught or declared.",
      "Incorrect: Both types of exceptions have different handling requirements.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question: "What is the difference between 'throw' and 'throws' in Java?",
    code: "",
    answers: [
      "'throw' is used to explicitly throw an exception, while 'throws' is used to declare that a method may throw certain exceptions.",
      "'throw' is used to declare that a method may throw certain exceptions, while 'throws' is used to explicitly throw an exception.",
      "'throw' is used to catch exceptions, while 'throws' is used to handle them.",
      "'throw' is used to rethrow exceptions, while 'throws' is used to catch them.",
    ],
    correct: 0,
    explanations: [
      "The difference between 'throw' and 'throws' in Java is that 'throw' is used to explicitly throw an exception, while 'throws' is used to declare that a method may throw certain exceptions.",
      "Incorrect: 'throws' is used to declare exceptions, not to explicitly throw them.",
      "Incorrect: Neither 'throw' nor 'throws' is used to catch exceptions.",
      "Incorrect: Neither 'throw' nor 'throws' is used to handle exceptions.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question:
      "What happens if an exception is thrown within a 'finally' block?",
    code: "",
    answers: [
      "The exception will be propagated to the caller of the method.",
      "The exception will be caught and handled by the 'finally' block.",
      "The exception will be ignored and the 'finally' block will execute normally.",
      "The exception will cause the program to terminate abruptly.",
    ],
    correct: 0,
    explanations: [
      "If an exception is thrown within a 'finally' block, the exception will be propagated to the caller of the method.",
      "Incorrect: 'finally' blocks do not catch exceptions but execute cleanup code.",
      "Incorrect: 'finally' blocks do not handle exceptions but execute cleanup code.",
      "Incorrect: While the exception will cause the program to terminate, it will be propagated to the caller rather than causing abrupt termination.",
    ],
    bloomTaxonomy: "Applying",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question:
      "What is the purpose of the 'getMessage()' method in Java exceptions?",
    code: "",
    answers: [
      "To retrieve the error message associated with the exception.",
      "To retrieve the name of the exception class.",
      "To retrieve the stack trace of the exception.",
      "To retrieve the error code associated with the exception.",
    ],
    correct: 0,
    explanations: [
      "The purpose of the 'getMessage()' method in Java exceptions is to retrieve the error message associated with the exception.",
      "Incorrect: The 'getMessage()' method returns the error message passed when the exception was created.",
      "Incorrect: The 'getMessage()' method does not retrieve the name of the exception class.",
      "Incorrect: The 'getMessage()' method does not retrieve the stack trace or error code associated with the exception.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "What is the difference between 'printStackTrace()' and 'getMessage()' methods in Java exceptions?",
    code: "",
    answers: [
      "'printStackTrace()' prints the stack trace of the exception, while 'getMessage()' retrieves the error message associated with the exception.",
      "'printStackTrace()' retrieves the error message associated with the exception, while 'getMessage()' prints the stack trace of the exception.",
      "'printStackTrace()' prints the error code associated with the exception, while 'getMessage()' prints the name of the exception class.",
      "'printStackTrace()' prints the name of the exception class, while 'getMessage()' prints the error code associated with the exception.",
    ],
    correct: 0,
    explanations: [
      "'printStackTrace()' prints the stack trace of the exception, while 'getMessage()' retrieves the error message associated with the exception.",
      "Incorrect: 'printStackTrace()' does not retrieve the error message associated with the exception.",
      "Incorrect: 'getMessage()' does not print the stack trace of the exception.",
      "Incorrect: Neither method prints or retrieves the error code or name of the exception class.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question:
      "Which of the following statements about try-catch blocks in Java is true?",
    code: "",
    answers: [
      "A try block must be followed by at least one catch or finally block.",
      "A try block must always be followed by a finally block.",
      "A try block can be used on its own without any catch or finally blocks.",
      "A try block can only be followed by a catch block and not a finally block.",
    ],
    correct: 0,
    explanations: [
      "A try block must be followed by at least one catch or finally block in Java.",
      "Incorrect: A finally block is optional and not always required.",
      "Incorrect: A try block cannot be used on its own without any catch or finally blocks.",
      "Incorrect: A try block can be followed by both catch and finally blocks.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question: "Which of the following is NOT a standard Java exception?",
    code: "",
    answers: [
      "InvalidParameterException",
      "FileNotFoundException",
      "NumberFormatException",
      "NullPointerException",
    ],
    correct: 0,
    explanations: [
      "InvalidParameterException is not a standard Java exception.",
      "Incorrect: FileNotFoundException, NumberFormatException, and NullPointerException are all standard Java exceptions.",
      "Incorrect: FileNotFoundException is a standard Java exception.",
      "Incorrect: NumberFormatException is a standard Java exception.",
      "Incorrect: NullPointerException is a standard Java exception.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "Which of the following is true about checked and unchecked exceptions in Java?",
    code: "",
    answers: [
      "Checked exceptions are subject to compile-time checking, while unchecked exceptions are not.",
      "Unchecked exceptions are subject to compile-time checking, while checked exceptions are not.",
      "Both checked and unchecked exceptions are subject to compile-time checking.",
      "Neither checked nor unchecked exceptions are subject to compile-time checking.",
    ],
    correct: 0,
    explanations: [
      "Checked exceptions are subject to compile-time checking, while unchecked exceptions are not.",
      "Incorrect: Unchecked exceptions are not subject to compile-time checking.",
      "Incorrect: Both types of exceptions have different checking requirements.",
      "Incorrect: Checked exceptions are subject to compile-time checking.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question:
      "Which of the following statements about try-with-resources in Java is true?",
    code: "",
    answers: [
      "Try-with-resources automatically closes resources declared within its parentheses after the try block finishes execution.",
      "Try-with-resources requires explicitly closing resources declared within its parentheses after the try block finishes execution.",
      "Try-with-resources is only applicable to checked exceptions.",
      "Try-with-resources is deprecated and should not be used.",
    ],
    correct: 0,
    explanations: [
      "Try-with-resources automatically closes resources declared within its parentheses after the try block finishes execution.",
      "Incorrect: Try-with-resources automatically closes resources, so explicit closing is not required.",
      "Incorrect: Try-with-resources is applicable to both checked and unchecked exceptions.",
      "Incorrect: Try-with-resources is not deprecated and is commonly used in Java for resource management.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question: "What is the purpose of the 'throws' keyword in Java?",
    code: "",
    answers: [
      "To declare that a method may throw certain exceptions.",
      "To explicitly throw an exception.",
      "To catch exceptions thrown within the method body.",
      "To handle exceptions thrown by other methods.",
    ],
    correct: 0,
    explanations: [
      "The purpose of the 'throws' keyword in Java is to declare that a method may throw certain exceptions.",
      "Incorrect: 'throws' is not used to explicitly throw exceptions but to declare which exceptions may be thrown.",
      "Incorrect: 'throws' does not catch exceptions but declares them.",
      "Incorrect: 'throws' does not handle exceptions thrown by other methods but declares which exceptions may be thrown by the method itself.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question: "Which of the following is NOT a standard Java exception?",
    code: "",
    answers: [
      "InvalidParameterException",
      "FileNotFoundException",
      "NumberFormatException",
      "NullPointerException",
    ],
    correct: 0,
    explanations: [
      "InvalidParameterException is not a standard Java exception.",
      "Incorrect: FileNotFoundException, NumberFormatException, and NullPointerException are all standard Java exceptions.",
      "Incorrect: FileNotFoundException is a standard Java exception.",
      "Incorrect: NumberFormatException is a standard Java exception.",
      "Incorrect: NullPointerException is a standard Java exception.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question: "What is the primary purpose of exception handling in Java?",
    code: "",
    answers: [
      "To gracefully handle unexpected runtime errors and prevent application crashes.",
      "To intentionally cause runtime errors for testing purposes.",
      "To optimize code performance by skipping error checking.",
      "To ignore runtime errors and continue program execution.",
    ],
    correct: 0,
    explanations: [
      "The primary purpose of exception handling in Java is to gracefully handle unexpected runtime errors and prevent application crashes.",
      "Incorrect: Exception handling is not intended to cause runtime errors, but to handle them.",
      "Incorrect: Exception handling does not optimize code performance but adds error checking.",
      "Incorrect: Exception handling is not intended to ignore runtime errors, but to handle them.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question: "What does the 'getMessage()' method in Java exceptions return?",
    code: "",
    answers: [
      "The error message associated with the exception.",
      "The name of the exception class.",
      "The stack trace of the exception.",
      "The error code associated with the exception.",
    ],
    correct: 0,
    explanations: [
      "The 'getMessage()' method in Java exceptions returns the error message associated with the exception.",
      "This method returns a String containing the error message that was passed when the exception was created.",
      "Incorrect: This method returns the name of the exception class.",
      "Incorrect: This method returns the stack trace of the exception.",
      "Incorrect: Java exceptions do not typically have an error code associated with them.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question: "What does the 'printStackTrace()' method in Java exceptions do?",
    code: "",
    answers: [
      "Prints the stack trace of the exception to the standard error stream.",
      "Prints the error message associated with the exception to the standard output stream.",
      "Prints the name of the exception class to the standard output stream.",
      "Prints the error code associated with the exception to the standard error stream.",
    ],
    correct: 0,
    explanations: [
      "The 'printStackTrace()' method in Java exceptions prints the stack trace of the exception to the standard error stream.",
      "This method is useful for debugging, as it provides information about the sequence of method calls leading up to the exception.",
      "Incorrect: This method prints the error message associated with the exception.",
      "Incorrect: There is no standard 'errorCode' associated with exceptions in Java.",
      "Incorrect: This method does not print the name of the exception class.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question: "What is the purpose of the 'throws' keyword in Java?",
    code: "",
    answers: [
      "To indicate that a method may throw certain exceptions and it's the caller's responsibility to handle them.",
      "To indicate that the method will catch all exceptions thrown within its body.",
      "To indicate that the method is expected to rethrow any exceptions it catches.",
      "To indicate that the method will throw an exception regardless of its execution path.",
    ],
    correct: 0,
    explanations: [
      "The 'throws' keyword in Java method declarations is used to indicate that the method may throw certain exceptions and it's the caller's responsibility to handle them.",
      "Incorrect: The 'throws' keyword does not imply that the method catches exceptions thrown within its body.",
      "Incorrect: The 'throws' keyword does not imply that the method is expected to rethrow any exceptions it catches.",
      "Incorrect: The 'throws' keyword does not imply that the method will throw an exception regardless of its execution path.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "What is the main purpose of the 'throws' keyword in Java method declarations?",
    code: "",
    answers: [
      "To indicate that the method may throw certain exceptions and it's the caller's responsibility to handle them.",
      "To indicate that the method will catch all exceptions thrown within its body.",
      "To indicate that the method is expected to rethrow any exceptions it catches.",
      "To indicate that the method will throw an exception regardless of its execution path.",
    ],
    correct: 0,
    explanations: [
      "The 'throws' keyword in Java method declarations is used to indicate that the method may throw certain exceptions and it's the caller's responsibility to handle them.",
      "Incorrect: The 'throws' keyword does not imply that the method catches exceptions thrown within its body.",
      "Incorrect: The 'throws' keyword does not imply that the method is expected to rethrow any exceptions it catches.",
      "Incorrect: The 'throws' keyword does not imply that the method will throw an exception regardless of its execution path.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
];
