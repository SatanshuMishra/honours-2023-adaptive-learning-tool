export const dummyData: {
  difficulty: number;
  question: string;
  code?: string;
  answers: string[];
  correct: number;
  explanations: string[];
  bloomTaxonomy: string;
  timeTakenSeconds: number;
  topic: string;
}[] = [
  {
    difficulty: 0.6,
    question: "Which class in Java is used for basic input from the keyboard?",
    answers: ["Scanner", "BufferedReader", "FileReader", "InputStream"],
    correct: 0,
    explanations: [
      "The Scanner class in Java is commonly used for basic input from the keyboard.",
      "BufferedReader is used for efficient reading of characters, not specifically for keyboard input.",
      "FileReader is used for reading characters from a file, not specifically for keyboard input.",
      "InputStream is an abstract class and not directly used for basic input from the keyboard.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 30,
    topic: "I/O",
  },
  {
    difficulty: 0.5,
    question:
      "Which method in Java is used to read a single character from the keyboard?",
    answers: ["nextChar()", "next()", "readChar()", "read()"],
    correct: 2,
    explanations: [
      "There's no direct method like nextChar() to read a single character from the keyboard using Scanner.",
      "next() method reads the next token as a String, not a single character.",
      "readChar() method doesn't exist in Java's standard libraries.",
      "The read() method is used to read a single character from the keyboard using BufferedReader.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 35,
    topic: "I/O",
  },
  {
    difficulty: 0.7,
    question:
      "Which of the following classes is used for writing text to a file in Java?",
    answers: [
      "FileWriter",
      "PrintWriter",
      "BufferedWriter",
      "OutputStreamWriter",
    ],
    correct: 1,
    explanations: [
      "PrintWriter is commonly used for writing text to a file in Java.",
      "FileWriter is used for writing characters to a file, not specifically for writing text.",
      "BufferedWriter is used for efficient writing of characters, not specifically for writing text to a file.",
      "OutputStreamWriter is used for writing raw bytes, not specifically for writing text to a file.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 40,
    topic: "I/O",
  },
  {
    difficulty: 0.6,
    question:
      "Which class in Java is used for reading binary data from streams?",
    answers: [
      "FileReader",
      "BufferedReader",
      "DataInputStream",
      "InputStreamReader",
    ],
    correct: 2,
    explanations: [
      "DataInputStream is used for reading binary data from streams in Java.",
      "FileReader is used for reading characters from a file.",
      "BufferedReader is used for reading text from a character-input stream.",
      "InputStreamReader is a bridge from byte streams to character streams.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 35,
    topic: "I/O",
  },
  {
    difficulty: 0.4,
    question: "Which method is used to close a file in Java?",
    answers: ["closeFile()", "fclose()", "close()", "shut()"],
    correct: 2,
    explanations: [
      "The close() method is used to close a file in Java.",
      "There's no direct method like closeFile() for closing a file in Java.",
      "fclose() is a C library function for closing a file.",
      "shut() is not a standard method for closing a file in Java.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 25,
    topic: "I/O",
  },
  {
    difficulty: 0.8,
    question: "Which class in Java is used to create a new directory?",
    answers: ["Folder", "File", "Directory", "Files"],
    correct: 3,
    explanations: [
      "The Files class in Java is commonly used to create a new directory.",
      "Folder is not a standard class in Java for creating directories.",
      "File represents a file, not a directory.",
      "Directory is not a standard class in Java for creating directories.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 30,
    topic: "I/O",
  },
  {
    difficulty: 0.7,
    question:
      "Which of the following is used to read bytes from an InputStream until the end of the stream is reached?",
    answers: [
      "InputStream.readAllBytes()",
      "InputStream.readBytes()",
      "InputStream.readToEnd()",
      "InputStream.readFully()",
    ],
    correct: 0,
    explanations: [
      "The readAllBytes() method is used to read bytes from an InputStream until the end of the stream is reached.",
      "There's no method named readBytes() in the InputStream class.",
      "There's no method named readToEnd() in the InputStream class.",
      "There's no method named readFully() in the InputStream class.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 40,
    topic: "I/O",
  },
  {
    difficulty: 0.5,
    question:
      "Which of the following is used to check whether a file exists or not in Java?",
    answers: [
      "File.exists()",
      "File.checkExistence()",
      "File.check()",
      "File.isExisting()",
    ],
    correct: 0,
    explanations: [
      "The exists() method is used to check whether a file exists or not in Java.",
      "There's no method named checkExistence() in the File class.",
      "There's no method named check() in the File class.",
      "There's no method named isExisting() in the File class.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 25,
    topic: "I/O",
  },
  {
    difficulty: 0.7,
    question: "Which method in Java is used to skip bytes from an InputStream?",
    answers: [
      "InputStream.skipBytes()",
      "InputStream.skip()",
      "InputStream.jump()",
      "InputStream.move()",
    ],
    correct: 1,
    explanations: [
      "The skip() method is used to skip bytes from an InputStream in Java.",
      "There's no method named skipBytes() in the InputStream class.",
      "There's no method named jump() in the InputStream class.",
      "There's no method named move() in the InputStream class.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 35,
    topic: "I/O",
  },
  {
    difficulty: 0.5,
    question: "Which class in Java is used for writing binary data to streams?",
    answers: [
      "OutputStream",
      "FileWriter",
      "DataOutputStream",
      "BufferedWriter",
    ],
    correct: 2,
    explanations: [
      "DataOutputStream is used for writing binary data to streams in Java.",
      "OutputStream is an abstract class and not directly used for writing binary data to streams.",
      "FileWriter is used for writing characters to a file.",
      "BufferedWriter is used for writing text to character-output streams, not specifically for writing binary data.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 30,
    topic: "I/O",
  },
  {
    difficulty: 0.3,
    question: "Which class in Java is used to read input from the console?",
    answers: ["Scanner", "BufferedReader", "InputStream", "FileReader"],
    correct: 0,
    explanations: [
      "The Scanner class in Java is commonly used to read input from the console.",
      "BufferedReader is used for efficient reading of characters from a character-input stream.",
      "InputStream is an abstract class and not directly used for reading input from the console.",
      "FileReader is used for reading characters from a file.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 25,
    topic: "I/O",
  },
  {
    difficulty: 0.4,
    question:
      "Which method in Java is used to read a line of text from the console?",
    answers: ["nextLine()", "readLine()", "readString()", "nextString()"],
    correct: 0,
    explanations: [
      "The nextLine() method is used to read a line of text from the console using Scanner in Java.",
      "There's no method named readLine() in Scanner class, it's used in BufferedReader.",
      "There's no method named readString() in Scanner class.",
      "There's no method named nextString() in Scanner class.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 30,
    topic: "I/O",
  },
  {
    difficulty: 0.3,
    question:
      "Which class in Java is used to write formatted output to the console?",
    answers: ["System", "PrintStream", "OutputStream", "FileWriter"],
    correct: 1,
    explanations: [
      "The PrintStream class in Java is used to write formatted output to the console.",
      "System is a final class in Java.",
      "OutputStream is an abstract class.",
      "FileWriter is used for writing characters to a file.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 25,
    topic: "I/O",
  },
  {
    difficulty: 0.3,
    question:
      "Which method in Java is used to print formatted data to the console?",
    answers: ["print()", "write()", "printf()", "println()"],
    correct: 2,
    explanations: [
      "The printf() method in Java is used to print formatted data to the console.",
      "print() is used to print data without formatting.",
      "write() is used for writing to character streams.",
      "println() is used to print data with a new line character.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 20,
    topic: "I/O",
  },
  {
    difficulty: 0.4,
    question:
      "Which method in Java is used to write a line of text to the console?",
    answers: ["printLine()", "writeLine()", "println()", "writeString()"],
    correct: 2,
    explanations: [
      "The println() method in Java is used to write a line of text to the console.",
      "There's no method named printLine() in Java.",
      "There's no method named writeLine() in Java.",
      "There's no method named writeString() in Java.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 25,
    topic: "I/O",
  },
  {
    difficulty: 0.3,
    question: "Which method in Java is used to flush the output stream?",
    answers: ["flush()", "clear()", "reset()", "close()"],
    correct: 0,
    explanations: [
      "The flush() method in Java is used to flush the output stream.",
      "clear() is used to clear the contents of a collection.",
      "reset() is used to reset the input stream.",
      "close() is used to close the stream.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 20,
    topic: "I/O",
  },
  {
    difficulty: 0.4,
    question:
      "Which class in Java is used for writing formatted text to a character-output stream?",
    answers: ["PrintWriter", "PrintStream", "OutputStream", "FileWriter"],
    correct: 0,
    explanations: [
      "The PrintWriter class in Java is used for writing formatted text to a character-output stream.",
      "PrintStream is used for writing to byte streams.",
      "OutputStream is an abstract class.",
      "FileWriter is used for writing characters to a file.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 25,
    topic: "I/O",
  },
  {
    difficulty: 0.3,
    question:
      "Which method in Java is used to write a formatted string to a PrintWriter?",
    answers: ["format()", "print()", "write()", "println()"],
    correct: 0,
    explanations: [
      "The format() method in Java is used to write a formatted string to a PrintWriter.",
      "print() is used to print data without formatting.",
      "write() is used for writing to character streams.",
      "println() is used to print data with a new line character.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 20,
    topic: "I/O",
  },
  {
    difficulty: 0.4,
    question:
      "Which class in Java is used to write formatted data to an OutputStream?",
    answers: ["PrintStream", "Formatter", "PrintWriter", "OutputStreamWriter"],
    correct: 0,
    explanations: [
      "The PrintStream class in Java is used to write formatted data to an OutputStream.",
      "Formatter is used for formatting strings, not specifically for writing data to an OutputStream.",
      "PrintWriter is used for writing formatted data, but PrintStream is preferred for better localization support.",
      "OutputStreamWriter is a bridge from byte streams to character streams.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 25,
    topic: "I/O",
  },
  {
    difficulty: 0.3,
    question: "Which method in Java is used to close a PrintWriter?",
    answers: ["close()", "flush()", "clear()", "reset()"],
    correct: 0,
    explanations: [
      "The close() method in Java is used to close a PrintWriter.",
      "flush() is used to flush the output stream.",
      "clear() is used to clear the contents of a collection.",
      "reset() is used to reset the input stream.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 20,
    topic: "I/O",
  },
  {
    difficulty: 0.3,
    question: "Which class in Java is used to read input from a file?",
    answers: ["Scanner", "FileReader", "BufferedReader", "InputStreamReader"],
    correct: 1,
    explanations: [
      "The FileReader class in Java is used to read input from a file.",
      "Scanner is commonly used for reading input from the console.",
      "BufferedReader is used for reading text from a character-input stream.",
      "InputStreamReader is a bridge from byte streams to character streams.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 30,
    topic: "I/O",
  },
  {
    difficulty: 0.2,
    question:
      "Which method in Java is used to read a line of text from a file?",
    answers: ["readLine()", "nextLine()", "readString()", "nextString()"],
    correct: 0,
    explanations: [
      "The readLine() method is used to read a line of text from a file using BufferedReader in Java.",
      "nextLine() is used in Scanner for reading a line of input from the console.",
      "There's no method named readString() in Java for reading lines of text.",
      "There's no method named nextString() in Java for reading lines of text.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 25,
    topic: "I/O",
  },
  {
    difficulty: 0.2,
    question: "Which class in Java is used to write output to a file?",
    answers: [
      "FileWriter",
      "PrintWriter",
      "BufferedWriter",
      "OutputStreamWriter",
    ],
    correct: 0,
    explanations: [
      "The FileWriter class in Java is used to write output to a file.",
      "PrintWriter is commonly used for writing formatted output to various destinations.",
      "BufferedWriter is used for efficient writing of characters to a character-output stream.",
      "OutputStreamWriter is a bridge from byte streams to character streams.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 30,
    topic: "I/O",
  },
  {
    difficulty: 0.2,
    question: "Which method in Java is used to write a line of text to a file?",
    answers: ["writeLine()", "write()", "println()", "writeString()"],
    correct: 2,
    explanations: [
      "The println() method in Java is used to write a line of text to a file using PrintWriter.",
      "write() is used to write text without appending a new line character.",
      "There's no method named writeLine() in Java.",
      "There's no method named writeString() in Java.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 25,
    topic: "I/O",
  },
  {
    difficulty: 0.3,
    question: "Which method in Java is used to append text to a file?",
    answers: ["append()", "write()", "appendTo()", "writeLine()"],
    correct: 0,
    explanations: [
      "The append() method in Java is used to append text to a file.",
      "write() is used to write text without appending a new line character.",
      "There's no method named appendTo() in Java.",
      "There's no method named writeLine() in Java.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 30,
    topic: "I/O",
  },
  {
    difficulty: 0.2,
    question: "Which method in Java is used to check if a file exists?",
    answers: ["exists()", "isFile()", "checkExistence()", "fileExists()"],
    correct: 0,
    explanations: [
      "The exists() method in Java is used to check if a file exists.",
      "isFile() is used to check if the specified path is a file.",
      "There's no method named checkExistence() in Java.",
      "There's no method named fileExists() in Java.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 25,
    topic: "I/O",
  },
  {
    difficulty: 0.3,
    question: "Which method in Java is used to delete a file?",
    answers: ["delete()", "remove()", "erase()", "destroy()"],
    correct: 0,
    explanations: [
      "The delete() method in Java is used to delete a file.",
      "remove() is not a method in Java for deleting a file.",
      "erase() is not a method in Java for deleting a file.",
      "destroy() is not a method in Java for deleting a file.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 30,
    topic: "I/O",
  },
  {
    difficulty: 0.2,
    question: "Which method in Java is used to rename a file?",
    answers: ["renameTo()", "rename()", "moveTo()", "changeName()"],
    correct: 0,
    explanations: [
      "The renameTo() method in Java is used to rename a file.",
      "rename() is not a method in Java for renaming a file.",
      "moveTo() is not a method in Java for renaming a file.",
      "changeName() is not a method in Java for renaming a file.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 25,
    topic: "I/O",
  },
  {
    difficulty: 0.3,
    question: "Which method in Java is used to get the size of a file?",
    answers: ["length()", "getSize()", "size()", "fileSize()"],
    correct: 0,
    explanations: [
      "The length() method in Java is used to get the size of a file.",
      "getSize() is not a method in Java for getting the size of a file.",
      "size() is not a method in Java for getting the size of a file.",
      "fileSize() is not a method in Java for getting the size of a file.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 30,
    topic: "I/O",
  },
  {
    difficulty: 0.2,
    question: "Which method in Java is used to check if a file is writable?",
    answers: ["canWrite()", "isWritable()", "isWritableFile()", "writable()"],
    correct: 0,
    explanations: [
      "The canWrite() method in Java is used to check if a file is writable.",
      "isWritable() is not a method in Java for checking if a file is writable.",
      "isWritableFile() is not a method in Java for checking if a file is writable.",
      "writable() is not a method in Java for checking if a file is writable.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 25,
    topic: "I/O",
  },
  {
    difficulty: 0.5,
    question: "What is the purpose of FileReader class in Java?",
    answers: [
      "To read characters from a file",
      "To write characters to a file",
      "To read binary data from a file",
      "To write binary data to a file",
    ],
    correct: 0,
    explanations: [
      "The FileReader class in Java is used to read characters from a file.",
      "FileWriter is used to write characters to a file.",
      "DataInputStream is used to read binary data from a file.",
      "DataOutputStream is used to write binary data to a file.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 40,
    topic: "I/O",
  },
  {
    difficulty: 0.6,
    question: "Explain the role of BufferedWriter class in Java.",
    answers: [
      "To efficiently write characters to a character-output stream",
      "To efficiently read characters from a character-input stream",
      "To write formatted output to a file",
      "To read formatted input from a file",
    ],
    correct: 0,
    explanations: [
      "The BufferedWriter class in Java is used to efficiently write characters to a character-output stream.",
      "BufferedReader is used to efficiently read characters from a character-input stream.",
      "PrintWriter is used to write formatted output to a file.",
      "Scanner is used to read formatted input from a file.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 45,
    topic: "I/O",
  },
  {
    difficulty: 0.4,
    question: "What does the close() method do in Java I/O?",
    answers: [
      "Closes the stream",
      "Opens the stream",
      "Clears the stream",
      "Resets the stream",
    ],
    correct: 0,
    explanations: [
      "The close() method in Java I/O is used to close the stream.",
      "Opening the stream is done using constructors or specific methods.",
      "Clearing the stream is not the purpose of the close() method.",
      "Resetting the stream is not the purpose of the close() method.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 35,
    topic: "I/O",
  },
  {
    difficulty: 0.5,
    question:
      "How does the PrintWriter class differ from the FileWriter class in Java?",
    answers: [
      "PrintWriter is used to write formatted text, whereas FileWriter is used to write raw bytes",
      "PrintWriter is used to write characters to a file, whereas FileWriter is used to write formatted output to a file",
      "PrintWriter provides methods to write formatted data to various destinations, whereas FileWriter is specifically for writing characters to a file",
      "PrintWriter is more efficient than FileWriter",
    ],
    correct: 2,
    explanations: [
      "PrintWriter provides methods to write formatted data to various destinations, whereas FileWriter is specifically for writing characters to a file.",
      "PrintWriter and FileWriter both deal with characters, not raw bytes.",
      "PrintWriter is more versatile in terms of formatting and destination options, whereas FileWriter is limited to writing to files.",
      "Efficiency comparison depends on various factors and cannot be generalized as PrintWriter being more efficient than FileWriter.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 40,
    topic: "I/O",
  },
  {
    difficulty: 0.4,
    question: "Explain the purpose of InputStream in Java I/O.",
    answers: [
      "To read binary data from a source",
      "To write binary data to a destination",
      "To read characters from a source",
      "To write characters to a destination",
    ],
    correct: 0,
    explanations: [
      "InputStream in Java I/O is used to read binary data from a source.",
      "OutputStream is used to write binary data to a destination.",
      "FileReader is used to read characters from a source.",
      "FileWriter is used to write characters to a destination.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 35,
    topic: "I/O",
  },
  {
    difficulty: 0.5,
    question: "What is the role of ByteArrayOutputStream in Java I/O?",
    answers: [
      "To write binary data to an array of bytes",
      "To read binary data from an array of bytes",
      "To write characters to a file",
      "To read characters from a file",
    ],
    correct: 0,
    explanations: [
      "The ByteArrayOutputStream class in Java I/O is used to write binary data to an array of bytes.",
      "ByteArrayInputStream is used to read binary data from an array of bytes.",
      "FileWriter is used to write characters to a file.",
      "FileReader is used to read characters from a file.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 40,
    topic: "I/O",
  },
  {
    difficulty: 0.4,
    question: "What does the flush() method do in Java I/O?",
    answers: [
      "Flushes the output stream",
      "Closes the output stream",
      "Clears the output stream",
      "Resets the output stream",
    ],
    correct: 0,
    explanations: [
      "The flush() method in Java I/O is used to flush the output stream.",
      "Closing the output stream is done using the close() method.",
      "Clearing the output stream is not the purpose of the flush() method.",
      "Resetting the output stream is not the purpose of the flush() method.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 35,
    topic: "I/O",
  },
  {
    difficulty: 0.5,
    question: "Explain the use of RandomAccessFile class in Java I/O.",
    answers: [
      "To read/write files randomly",
      "To read/write text files",
      "To append text to a file",
      "To read/write binary data to a file",
    ],
    correct: 0,
    explanations: [
      "The RandomAccessFile class in Java I/O is used to read and write files randomly.",
      "FileReader/FileWriter are used for reading/writing text files.",
      "Appending text to a file is usually done with FileWriter.",
      "Reading/writing binary data to a file is typically done with FileInputStream/FileOutputStream.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 40,
    topic: "I/O",
  },
  {
    difficulty: 0.6,
    question:
      "What is the significance of ByteArrayOutputStream class in Java?",
    answers: [
      "To read binary data from a stream",
      "To write binary data to a stream",
      "To read characters from a stream",
      "To write characters to a stream",
    ],
    correct: 1,
    explanations: [
      "The ByteArrayOutputStream class in Java is used to write binary data to a stream.",
      "It buffers the output, allowing you to write binary data to a byte array.",
      "ByteArrayInputStream is used to read binary data from a stream.",
      "FileWriter is used to write characters to a stream.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 45,
    topic: "I/O",
  },
  {
    difficulty: 0.5,
    question: "What is the purpose of FileInputStream class in Java?",
    answers: [
      "To read characters from a file",
      "To write characters to a file",
      "To read binary data from a file",
      "To write binary data to a file",
    ],
    correct: 2,
    explanations: [
      "The FileInputStream class in Java is used to read binary data from a file.",
      "FileWriter is used to write characters to a file.",
      "FileReader is used to read characters from a file.",
      "DataOutputStream is used to write binary data to a file.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 40,
    topic: "I/O",
  },
  {
    difficulty: 0.6,
    question: "Explain the role of FileWriter class in Java I/O.",
    answers: [
      "To efficiently write characters to a character-output stream",
      "To efficiently read characters from a character-input stream",
      "To write formatted output to a file",
      "To read formatted input from a file",
    ],
    correct: 0,
    explanations: [
      "The FileWriter class in Java is used to efficiently write characters to a character-output stream.",
      "BufferedReader is used to efficiently read characters from a character-input stream.",
      "PrintWriter is used to write formatted output to a file.",
      "Scanner is used to read formatted input from a file.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 45,
    topic: "I/O",
  },
  {
    difficulty: 0.4,
    question: "What does the close() method do in Java I/O?",
    answers: [
      "Closes the stream",
      "Opens the stream",
      "Clears the stream",
      "Resets the stream",
    ],
    correct: 0,
    explanations: [
      "The close() method in Java I/O is used to close the stream.",
      "Opening the stream is done using constructors or specific methods.",
      "Clearing the stream is not the purpose of the close() method.",
      "Resetting the stream is not the purpose of the close() method.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 35,
    topic: "I/O",
  },
  {
    difficulty: 0.5,
    question:
      "How does the PrintWriter class differ from the FileWriter class in Java?",
    answers: [
      "PrintWriter is used to write formatted text, whereas FileWriter is used to write raw bytes",
      "PrintWriter is used to write characters to a file, whereas FileWriter is used to write formatted output to a file",
      "PrintWriter provides methods to write formatted data to various destinations, whereas FileWriter is specifically for writing characters to a file",
      "PrintWriter is more efficient than FileWriter",
    ],
    correct: 2,
    explanations: [
      "PrintWriter provides methods to write formatted data to various destinations, whereas FileWriter is specifically for writing characters to a file.",
      "PrintWriter and FileWriter both deal with characters, not raw bytes.",
      "PrintWriter is more versatile in terms of formatting and destination options, whereas FileWriter is limited to writing to files.",
      "Efficiency comparison depends on various factors and cannot be generalized as PrintWriter being more efficient than FileWriter.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 40,
    topic: "I/O",
  },
  {
    difficulty: 0.4,
    question: "Explain the purpose of InputStream in Java I/O.",
    answers: [
      "To read binary data from a source",
      "To write binary data to a destination",
      "To read characters from a source",
      "To write characters to a destination",
    ],
    correct: 0,
    explanations: [
      "InputStream in Java I/O is used to read binary data from a source.",
      "OutputStream is used to write binary data to a destination.",
      "FileReader is used to read characters from a source.",
      "FileWriter is used to write characters to a destination.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 35,
    topic: "I/O",
  },
  {
    difficulty: 0.5,
    question: "What is the role of ByteArrayOutputStream in Java I/O?",
    answers: [
      "To write binary data to an array of bytes",
      "To read binary data from an array of bytes",
      "To write characters to a file",
      "To read characters from a file",
    ],
    correct: 0,
    explanations: [
      "The ByteArrayOutputStream class in Java I/O is used to write binary data to an array of bytes.",
      "ByteArrayInputStream is used to read binary data from an array of bytes.",
      "FileWriter is used to write characters to a file.",
      "FileReader is used to read characters from a file.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 40,
    topic: "I/O",
  },
  {
    difficulty: 0.6,
    question:
      "How does the DataOutputStream class differ from the BufferedOutputStream class in Java?",
    answers: [
      "DataOutputStream is used to write binary data to a file, whereas BufferedOutputStream is used to write text data to a file",
      "DataOutputStream provides methods to write primitive data types, whereas BufferedOutputStream is used to write binary data efficiently",
      "DataOutputStream is used for input streams, whereas BufferedOutputStream is used for output streams",
      "DataOutputStream is more efficient than BufferedOutputStream",
    ],
    correct: 1,
    explanations: [
      "DataOutputStream provides methods to write primitive data types, whereas BufferedOutputStream is used to write binary data efficiently.",
      "DataOutputStream can write primitive data types directly to the stream, while BufferedOutputStream provides a buffer for improving write performance.",
      "DataOutputStream and BufferedOutputStream are both used for output streams.",
      "Efficiency comparison depends on various factors and cannot be generalized as DataOutputStream being more efficient than BufferedOutputStream.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 45,
    topic: "I/O",
  },
  {
    difficulty: 0.4,
    question: "What does the flush() method do in Java I/O?",
    answers: [
      "Flushes the output stream",
      "Closes the output stream",
      "Clears the output stream",
      "Resets the output stream",
    ],
    correct: 0,
    explanations: [
      "The flush() method in Java I/O is used to flush the output stream.",
      "Closing the output stream is done using the close() method.",
      "Clearing the output stream is not the purpose of the flush() method.",
      "Resetting the output stream is not the purpose of the flush() method.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 35,
    topic: "I/O",
  },
  {
    difficulty: 0.5,
    question: "Explain the use of RandomAccessFile class in Java I/O.",
    answers: [
      "To read/write files randomly",
      "To read/write text files",
      "To append text to a file",
      "To read/write binary data to a file",
    ],
    correct: 0,
    explanations: [
      "The RandomAccessFile class in Java I/O is used to read and write files randomly.",
      "FileReader/FileWriter are used for reading/writing text files.",
      "Appending text to a file is usually done with FileWriter.",
      "Reading/writing binary data to a file is typically done with FileInputStream/FileOutputStream.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 40,
    topic: "I/O",
  },
  {
    difficulty: 0.6,
    question:
      "What is the significance of ByteArrayOutputStream class in Java?",
    answers: [
      "To read binary data from a stream",
      "To write binary data to a stream",
      "To read characters from a stream",
      "To write characters to a stream",
    ],
    correct: 1,
    explanations: [
      "The ByteArrayOutputStream class in Java is used to write binary data to a stream.",
      "It buffers the output, allowing you to write binary data to a byte array.",
      "ByteArrayInputStream is used to read binary data from a stream.",
      "FileWriter is used to write characters to a stream.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 45,
    topic: "I/O",
  },
  {
    difficulty: 0.6,
    question:
      "Write a Java code snippet to copy the contents of one file to another using FileInputStream and FileOutputStream.",
    code: 'import java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n\npublic class FileCopy {\n    public static void main(String[] args) {\n        try {\n            FileInputStream inStream = new FileInputStream("input.txt");\n            FileOutputStream outStream = new FileOutputStream("output.txt");\n            int data;\n            while ((data = inStream.read()) != -1) {\n                outStream.write(data);\n            }\n            inStream.close();\n            outStream.close();\n            System.out.println("File copied successfully.");\n        } catch (IOException e) {\n            System.out.println("Error: " + e.getMessage());\n        }\n    }\n}',
    answers: [
      "import java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\n",
      "import java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\n",
      "import java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.IOException;\n",
      "import java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n",
    ],
    correct: 0,
    explanations: [
      "The correct answer imports FileInputStream and FileOutputStream classes for reading and writing files, respectively, and handles IOException.",
      "FileReader and FileWriter are used for character-based file operations, not suitable for copying binary data.",
      "BufferedInputStream and BufferedOutputStream provide buffering, but they are not necessary for this specific task.",
      "BufferedReader and BufferedWriter are used for reading and writing text files, not suitable for copying binary data.",
    ],
    bloomTaxonomy: "Applying",
    timeTakenSeconds: 60,
    topic: "I/O",
  },
  {
    difficulty: 0.7,
    question:
      "Write a Java program to read data from a file and count the number of occurrences of each word.",
    code: 'import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class WordCounter {\n    public static void main(String[] args) {\n        Map<String, Integer> wordCount = new HashMap<>();\n        try (BufferedReader reader = new BufferedReader(new FileReader("input.txt"))) {\n            String line;\n            while ((line = reader.readLine()) != null) {\n                String[] words = line.split("\\\\s+");\n                for (String word : words) {\n                    wordCount.put(word, wordCount.getOrDefault(word, 0) + 1);\n                }\n            }\n        } catch (IOException e) {\n            System.out.println("Error reading file: " + e.getMessage());\n        }\n        for (Map.Entry<String, Integer> entry : wordCount.entrySet()) {\n            System.out.println(entry.getKey() + ": " + entry.getValue());\n        }\n    }\n}',
    answers: [
      "import java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n",
      "import java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n",
      "import java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n",
      "import java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\n",
    ],
    correct: 0,
    explanations: [
      "The correct answer imports BufferedReader and FileReader classes to read the file line by line and HashMap to store word counts.",
      "BufferedInputStream and BufferedOutputStream are used for binary data, not suitable for reading text files and counting words.",
      "FileInputStream and FileOutputStream are used for binary data, not suitable for reading text files and counting words.",
      "InputStreamReader and OutputStreamWriter are used for character-based file operations, not suitable for counting words.",
    ],
    bloomTaxonomy: "Applying",
    timeTakenSeconds: 90,
    topic: "I/O",
  },
  {
    difficulty: 0.6,
    question: "Write a Java program to append text to an existing file.",
    code: 'import java.io.FileWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class FileAppender {\n    public static void main(String[] args) {\n        try (BufferedWriter writer = new BufferedWriter(new FileWriter("output.txt", true))) {\n            writer.write("Appended text");\n            System.out.println("Text appended successfully.");\n        } catch (IOException e) {\n            System.out.println("Error appending text: " + e.getMessage());\n        }\n    }\n}',
    answers: [
      "import java.io.FileWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n",
      "import java.io.FileReader;\nimport java.io.BufferedReader;\nimport java.io.IOException;\n",
      "import java.io.FileOutputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.IOException;\n",
      "import java.io.FileInputStream;\nimport java.io.BufferedInputStream;\nimport java.io.IOException;\n",
    ],
    correct: 0,
    explanations: [
      "The correct answer imports FileWriter and BufferedWriter classes to append text to an existing file.",
      "FileReader and BufferedReader are used for reading files, not for appending text.",
      "FileOutputStream and BufferedOutputStream are used for binary data, not for appending text to files.",
      "FileInputStream and BufferedInputStream are used for reading binary data, not for appending text to files.",
    ],
    bloomTaxonomy: "Applying",
    timeTakenSeconds: 60,
    topic: "I/O",
  },
  {
    difficulty: 0.7,
    question:
      "Write a Java program to serialize and deserialize an object to/from a file using ObjectInputStream and ObjectOutputStream.",
    code: 'import java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.IOException;\n\npublic class ObjectSerialization {\n    public static void main(String[] args) {\n        try {\n            // Serialize object\n            ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("object.ser"));\n            MyClass obj = new MyClass();\n            out.writeObject(obj);\n            out.close();\n            // Deserialize object\n            ObjectInputStream in = new ObjectInputStream(new FileInputStream("object.ser"));\n            MyClass newObj = (MyClass) in.readObject();\n            in.close();\n            // Use newObj\n        } catch (IOException | ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\nclass MyClass implements Serializable {\n    // class definition\n}',
    answers: [
      "import java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\nimport java.io.IOException;\n",
      "import java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\n",
      "import java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\n",
      "import java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\nimport java.io.ObjectOutputStream;\n",
    ],
    correct: 0,
    explanations: [
      "The correct answer imports necessary classes for object serialization and deserialization.",
      "FileReader and FileWriter are used for character-based file operations, not for object serialization.",
      "BufferedInputStream and BufferedOutputStream are used for binary data, not for object serialization.",
      "BufferedReader and BufferedWriter are used for reading and writing text files, not for object serialization.",
    ],
    bloomTaxonomy: "Applying",
    timeTakenSeconds: 90,
    topic: "I/O",
  },
  {
    difficulty: 0.5,
    question:
      "Write a Java program to read a file and display its content in reverse order.",
    code: 'import java.io.FileReader;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.util.Stack;\n\npublic class ReverseFileContent {\n    public static void main(String[] args) {\n        try (BufferedReader reader = new BufferedReader(new FileReader("input.txt"))) {\n            Stack<String> lines = new Stack<>();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                lines.push(line);\n            }\n            while (!lines.isEmpty()) {\n                System.out.println(lines.pop());\n            }\n        } catch (IOException e) {\n            System.out.println("Error reading file: " + e.getMessage());\n        }\n    }\n}',
    answers: [
      "import java.io.FileReader;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.util.Stack;\n",
      "import java.io.FileInputStream;\nimport java.io.BufferedInputStream;\nimport java.io.IOException;\nimport java.util.Stack;\n",
      "import java.io.FileWriter;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\nimport java.util.Stack;\n",
      "import java.io.InputStreamReader;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.util.Stack;\n",
    ],
    correct: 0,
    explanations: [
      "The correct answer imports necessary classes for reading text files and Stack for reversing the content.",
      "FileInputStream and BufferedInputStream are used for binary data, not for reading text files.",
      "FileWriter and BufferedWriter are used for writing text files, not for reading and reversing content.",
      "InputStreamReader and BufferedReader are used for character-based file operations, not for reading and reversing content.",
    ],
    bloomTaxonomy: "Applying",
    timeTakenSeconds: 60,
    topic: "I/O",
  },
  {
    difficulty: 0.6,
    question:
      "Write a Java program to merge the contents of two files into a third file.",
    code: 'import java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n\npublic class FileMerger {\n    public static void main(String[] args) {\n        try (BufferedReader reader1 = new BufferedReader(new FileReader("input1.txt"));\n             BufferedReader reader2 = new BufferedReader(new FileReader("input2.txt"));\n             BufferedWriter writer = new BufferedWriter(new FileWriter("output.txt"))) {\n            String line;\n            while ((line = reader1.readLine()) != null) {\n                writer.write(line);\n                writer.newLine();\n            }\n            while ((line = reader2.readLine()) != null) {\n                writer.write(line);\n                writer.newLine();\n            }\n            System.out.println("Files merged successfully.");\n        } catch (IOException e) {\n            System.out.println("Error merging files: " + e.getMessage());\n        }\n    }\n}',
    answers: [
      "import java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n",
      "import java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.IOException;\n",
      "import java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.BufferedReader;\nimport java.io.BufferedWriter;\nimport java.io.IOException;\n",
      "import java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.IOException;\n",
    ],
    correct: 0,
    explanations: [
      "The correct answer imports necessary classes for reading and writing text files.",
      "FileInputStream and FileOutputStream are used for binary data, not for reading and writing text files.",
      "InputStreamReader and OutputStreamWriter are used for character-based file operations, not for reading and writing text files directly.",
      "FileReader and FileWriter are used for reading and writing text files, but BufferedInputStream and BufferedOutputStream are not necessary for this task.",
    ],
    bloomTaxonomy: "Applying",
    timeTakenSeconds: 70,
    topic: "I/O",
  },
  {
    difficulty: 0.7,
    question: "Write a Java program to compress a file using GZIP compression.",
    code: 'import java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.util.zip.GZIPOutputStream;\n\npublic class FileCompressor {\n    public static void main(String[] args) {\n        try (FileInputStream in = new FileInputStream("input.txt");\n             FileOutputStream out = new FileOutputStream("output.gz");\n             GZIPOutputStream gzipOut = new GZIPOutputStream(out)) {\n            byte[] buffer = new byte[1024];\n            int len;\n            while ((len = in.read(buffer)) > 0) {\n                gzipOut.write(buffer, 0, len);\n            }\n            System.out.println("File compressed successfully.");\n        } catch (IOException e) {\n            System.out.println("Error compressing file: " + e.getMessage());\n        }\n    }\n}',
    answers: [
      "import java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.util.zip.GZIPOutputStream;\n",
      "import java.io.BufferedInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.IOException;\nimport java.util.zip.GZIPOutputStream;\n",
      "import java.io.FileReader;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.util.zip.GZIPOutputStream;\n",
      "import java.io.InputStreamReader;\nimport java.io.OutputStreamWriter;\nimport java.io.IOException;\nimport java.util.zip.GZIPOutputStream;\n",
    ],
    correct: 0,
    explanations: [
      "The correct answer imports necessary classes for reading and writing files and GZIPOutputStream for GZIP compression.",
      "BufferedInputStream and BufferedOutputStream are used for binary data, not for GZIP compression.",
      "FileReader and FileWriter are used for character-based file operations, not for GZIP compression.",
      "InputStreamReader and OutputStreamWriter are used for character-based file operations, not for GZIP compression.",
    ],
    bloomTaxonomy: "Applying",
    timeTakenSeconds: 80,
    topic: "I/O",
  },
  {
    difficulty: 0.6,
    question:
      "Which Java class is used to read text from a character-input stream, buffering characters so as to provide for the efficient reading of characters, arrays, and lines?",
    answers: ["BufferedReader", "FileReader", "InputStreamReader", "Scanner"],
    correct: 0,
    explanations: [
      "The correct answer is BufferedReader, which efficiently reads text from a character-input stream by buffering characters for better performance.",
      "FileReader reads text files in a character-by-character manner but does not provide buffering for efficient reading.",
      "InputStreamReader is used to bridge from byte streams to character streams, but it does not provide buffering on its own.",
      "Scanner class is used for parsing tokens from the input stream, but it may not provide efficient buffering for reading text from character streams.",
    ],
    bloomTaxonomy: "Applying",
    timeTakenSeconds: 30,
    topic: "I/O",
  },
  {
    difficulty: 0.7,
    question:
      "Which Java class provides methods for reading and writing binary data in streams, allowing serialization and deserialization of Java objects?",
    answers: [
      "ObjectInputStream and ObjectOutputStream",
      "DataInputStream and DataOutputStream",
      "BufferedInputStream and BufferedOutputStream",
      "InputStreamReader and OutputStreamWriter",
    ],
    correct: 1,
    explanations: [
      "The correct answer is DataInputStream and DataOutputStream, which provide methods for reading and writing binary data and support serialization and deserialization of Java objects.",
      "ObjectInputStream and ObjectOutputStream are used for object serialization and deserialization but do not directly handle binary data.",
      "BufferedInputStream and BufferedOutputStream provide buffering for efficient reading and writing of bytes but do not support serialization and deserialization of Java objects.",
      "InputStreamReader and OutputStreamWriter are used for character-based input and output and do not directly handle binary data.",
    ],
    bloomTaxonomy: "Applying",
    timeTakenSeconds: 35,
    topic: "I/O",
  },
  {
    difficulty: 0.5,
    question:
      "Which Java class is used to write formatted data to an underlying output stream, ensuring efficient writing of characters, arrays, and strings?",
    answers: [
      "PrintWriter",
      "BufferedWriter",
      "FileWriter",
      "OutputStreamWriter",
    ],
    correct: 0,
    explanations: [
      "The correct answer is PrintWriter, which writes formatted representations of objects to an underlying output stream, providing efficient writing of characters, arrays, and strings.",
      "BufferedWriter provides buffering for efficient writing of characters, arrays, and strings but does not handle formatted writing.",
      "FileWriter is used for writing character-based data to a file but does not provide formatting capabilities.",
      "OutputStreamWriter is used to bridge from byte streams to character streams and does not provide formatting capabilities.",
    ],
    bloomTaxonomy: "Applying",
    timeTakenSeconds: 25,
    topic: "I/O",
  },
  {
    difficulty: 0.6,
    question:
      "Which Java class is used to create a new file or update the existing file's last modified time in the file system?",
    answers: ["File", "FileReader", "FileWriter", "FileSystem"],
    correct: 0,
    explanations: [
      "The correct answer is File, which is used to represent a file or directory pathname in the file system, and can create new files or update existing files' attributes including last modified time.",
      "FileReader is used for reading character files but does not create or modify files.",
      "FileWriter is used for writing character files but does not create or modify files.",
      "FileSystem is an abstract class representing a file system, not used directly for file creation or modification.",
    ],
    bloomTaxonomy: "Applying",
    timeTakenSeconds: 30,
    topic: "I/O",
  },
  {
    difficulty: 0.7,
    question:
      "Which Java class is used to read and write compressed data streams using the ZLIB compression library?",
    answers: [
      "GZIPInputStream and GZIPOutputStream",
      "ZipInputStream and ZipOutputStream",
      "DeflaterInputStream and DeflaterOutputStream",
      "InflaterInputStream and InflaterOutputStream",
    ],
    correct: 0,
    explanations: [
      "The correct answer is GZIPInputStream and GZIPOutputStream, which are used to read and write compressed data streams using the ZLIB compression library.",
      "ZipInputStream and ZipOutputStream are used to read and write ZIP archive entries, not specifically for ZLIB compression.",
      "DeflaterInputStream and DeflaterOutputStream are used to compress data using the DEFLATE algorithm, not specifically for ZLIB compression.",
      "InflaterInputStream and InflaterOutputStream are used to decompress data compressed using the DEFLATE algorithm, not specifically for ZLIB compression.",
    ],
    bloomTaxonomy: "Applying",
    timeTakenSeconds: 35,
    topic: "I/O",
  },
  {
    difficulty: 0.6,
    question:
      "Which Java class is used to read data from a file in a non-blocking asynchronous manner?",
    answers: [
      "AsynchronousFileChannel",
      "FileChannel",
      "BufferedReader",
      "Scanner",
    ],
    correct: 0,
    explanations: [
      "The correct answer is AsynchronousFileChannel, which provides support for reading data from a file in a non-blocking asynchronous manner.",
      "FileChannel is used for reading, writing, and manipulating files but does not specifically provide asynchronous operations.",
      "BufferedReader is used for reading text from a character-input stream but does not provide asynchronous capabilities.",
      "Scanner class is used for parsing tokens from the input stream and does not provide asynchronous file reading.",
    ],
    bloomTaxonomy: "Applying",
    timeTakenSeconds: 30,
    topic: "I/O",
  },
  {
    difficulty: 0.5,
    question:
      "Which Java class provides methods to read from and write to the system console?",
    answers: ["System.console()", "Scanner", "BufferedReader", "PrintWriter"],
    correct: 0,
    explanations: [
      "The correct answer is System.console(), which returns the unique Console object associated with the current Java virtual machine, allowing reading from and writing to the system console.",
      "Scanner class is used for parsing tokens from the input stream but is not specifically designed for system console input/output.",
      "BufferedReader is used for reading text from a character-input stream but does not provide direct access to the system console.",
      "PrintWriter is used for writing formatted representations of objects to an output stream but does not provide direct access to the system console.",
    ],
    bloomTaxonomy: "Applying",
    timeTakenSeconds: 25,
    topic: "I/O",
  },
  {
    difficulty: 0.6,
    question:
      "Which Java class is used to read and write objects to an Object stream for serialization and deserialization?",
    answers: [
      "ObjectInputStream and ObjectOutputStream",
      "DataInputStream and DataOutputStream",
      "BufferedInputStream and BufferedOutputStream",
      "InputStreamReader and OutputStreamWriter",
    ],
    correct: 0,
    explanations: [
      "The correct answer is ObjectInputStream and ObjectOutputStream, which are used for reading and writing objects to an Object stream for serialization and deserialization.",
      "DataInputStream and DataOutputStream are used for reading and writing binary data but do not directly handle object serialization and deserialization.",
      "BufferedInputStream and BufferedOutputStream provide buffering for efficient reading and writing of bytes but do not directly handle object serialization and deserialization.",
      "InputStreamReader and OutputStreamWriter are used for character-based input and output and do not directly handle object serialization and deserialization.",
    ],
    bloomTaxonomy: "Applying",
    timeTakenSeconds: 30,
    topic: "I/O",
  },
  {
    difficulty: 0.5,
    question:
      "Which Java class is used to read and write byte data from and to a file?",
    answers: [
      "FileInputStream and FileOutputStream",
      "FileReader and FileWriter",
      "BufferedReader and BufferedWriter",
      "DataInputStream and DataOutputStream",
    ],
    correct: 0,
    explanations: [
      "The correct answer is FileInputStream and FileOutputStream, which are used to read and write byte data from and to a file respectively.",
      "FileReader and FileWriter are used for reading and writing character data from and to a file respectively.",
      "BufferedReader and BufferedWriter are used for reading and writing text from and to a character stream respectively.",
      "DataInputStream and DataOutputStream are used for reading and writing binary data respectively but are not specifically designed for file operations.",
    ],
    bloomTaxonomy: "Applying",
    timeTakenSeconds: 25,
    topic: "I/O",
  },
  {
    difficulty: 0.6,
    question:
      "What are the differences between FileInputStream and FileReader classes in Java?",
    answers: [
      "FileInputStream reads bytes from a file whereas FileReader reads characters from a file using the default character encoding of the platform.",
      "FileInputStream reads characters from a file whereas FileReader reads bytes from a file using the default character encoding of the platform.",
      "FileInputStream is used for reading text files whereas FileReader is used for reading binary files.",
      "FileInputStream and FileReader are interchangeable and can be used interchangeably.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that FileInputStream reads bytes from a file while FileReader reads characters from a file using the default character encoding of the platform.",
      "FileInputStream does not read characters directly; it reads bytes. FileReader is specifically designed for reading characters.",
      "Both FileInputStream and FileReader can be used for reading text files or binary files depending on how they are used, but their primary difference lies in reading bytes vs. characters.",
      "FileInputStream and FileReader are not interchangeable as they serve different purposes and handle different types of data.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 45,
    topic: "I/O",
  },
  {
    difficulty: 0.7,
    question:
      "Explain the purpose and usage of the RandomAccessFile class in Java.",
    answers: [
      "RandomAccessFile class provides random access to the file. It allows reading from and writing to any position in the file.",
      "RandomAccessFile class is used for reading files sequentially.",
      "RandomAccessFile class is used for reading files in binary format only.",
      "RandomAccessFile class provides sequential access to the file.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that the RandomAccessFile class provides random access to the file, allowing reading from and writing to any position in the file.",
      "RandomAccessFile does not provide sequential access to the file; it provides random access.",
      "RandomAccessFile can be used for reading and writing files in both text and binary formats, not limited to binary format only.",
      "RandomAccessFile is not used for sequential access; it is specifically designed for random access to files.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 50,
    topic: "I/O",
  },
  {
    difficulty: 0.5,
    question:
      "Compare and contrast the usage of FileInputStream and BufferedInputStream in Java.",
    answers: [
      "FileInputStream reads bytes from a file directly whereas BufferedInputStream reads bytes from a file with buffering for improved performance.",
      "FileInputStream and BufferedInputStream are the same and can be used interchangeably.",
      "FileInputStream reads bytes from a file with buffering for improved performance whereas BufferedInputStream reads bytes from a file directly.",
      "BufferedInputStream is used for reading characters from a file.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that FileInputStream reads bytes from a file directly whereas BufferedInputStream reads bytes from a file with buffering for improved performance.",
      "FileInputStream and BufferedInputStream are not the same; they serve different purposes.",
      "FileInputStream does not use buffering by default, while BufferedInputStream does for improved performance.",
      "BufferedInputStream is not specifically designed for reading characters; it is used for buffering input streams for better performance.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 40,
    topic: "I/O",
  },
  {
    difficulty: 0.6,
    question:
      "Discuss the differences between FileOutputStream and FileWriter classes in Java.",
    answers: [
      "FileOutputStream writes bytes to a file whereas FileWriter writes characters to a file using the default character encoding of the platform.",
      "FileOutputStream writes characters to a file whereas FileWriter writes bytes to a file using the default character encoding of the platform.",
      "FileOutputStream is used for writing text files whereas FileWriter is used for writing binary files.",
      "FileOutputStream and FileWriter are interchangeable and can be used interchangeably.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that FileOutputStream writes bytes to a file whereas FileWriter writes characters to a file using the default character encoding of the platform.",
      "FileOutputStream does not directly write characters; it writes bytes. FileWriter is specifically designed for writing characters.",
      "Both FileOutputStream and FileWriter can be used for writing text files or binary files depending on how they are used, but their primary difference lies in writing bytes vs. characters.",
      "FileOutputStream and FileWriter are not interchangeable as they serve different purposes and handle different types of data.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 45,
    topic: "I/O",
  },
  {
    difficulty: 0.7,
    question:
      "Examine the usage of DataInputStream and DataOutputStream classes in Java for reading and writing binary data.",
    answers: [
      "DataInputStream and DataOutputStream provide methods for reading and writing binary data types in a machine-independent way.",
      "DataInputStream and DataOutputStream are used for reading and writing text files.",
      "DataInputStream and DataOutputStream are interchangeable with BufferedReader and BufferedWriter classes.",
      "DataInputStream and DataOutputStream are used for reading and writing characters from and to a file.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that DataInputStream and DataOutputStream provide methods for reading and writing binary data types in a machine-independent way.",
      "DataInputStream and DataOutputStream are not used for reading and writing text files; they are specifically designed for binary data.",
      "DataInputStream and DataOutputStream are not interchangeable with BufferedReader and BufferedWriter classes; they serve different purposes.",
      "DataInputStream and DataOutputStream are not used for reading and writing characters; they are used for reading and writing binary data.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 50,
    topic: "I/O",
  },
  {
    difficulty: 0.5,
    question:
      "Analyze the differences between BufferedInputStream and BufferedOutputStream classes in Java.",
    answers: [
      "BufferedInputStream provides buffering for input streams whereas BufferedOutputStream provides buffering for output streams.",
      "BufferedInputStream and BufferedOutputStream are the same and can be used interchangeably.",
      "BufferedInputStream provides buffering for output streams whereas BufferedOutputStream provides buffering for input streams.",
      "BufferedInputStream and BufferedOutputStream are used for reading and writing text files.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that BufferedInputStream provides buffering for input streams whereas BufferedOutputStream provides buffering for output streams.",
      "BufferedInputStream and BufferedOutputStream are not the same; they serve different purposes.",
      "BufferedInputStream does not provide buffering for output streams; it is specifically designed for input streams.",
      "BufferedInputStream and BufferedOutputStream are not used for reading and writing text files; they are used for buffering input and output streams respectively.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 40,
    topic: "I/O",
  },
  {
    difficulty: 0.6,
    question:
      "Critically evaluate the usage of InputStreamReader and OutputStreamWriter classes in Java for handling character streams.",
    answers: [
      "InputStreamReader and OutputStreamWriter classes bridge byte streams to character streams and provide character encoding conversion.",
      "InputStreamReader and OutputStreamWriter classes are used for handling binary data.",
      "InputStreamReader and OutputStreamWriter classes are interchangeable with FileInputStream and FileOutputStream classes.",
      "InputStreamReader and OutputStreamWriter classes are used for reading and writing binary data.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that InputStreamReader and OutputStreamWriter classes bridge byte streams to character streams and provide character encoding conversion.",
      "InputStreamReader and OutputStreamWriter are not used for handling binary data; they are specifically designed for character streams.",
      "InputStreamReader and OutputStreamWriter are not interchangeable with FileInputStream and FileOutputStream classes; they serve different purposes.",
      "InputStreamReader and OutputStreamWriter are not used for reading and writing binary data; they are used for handling character streams.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 45,
    topic: "I/O",
  },
  {
    difficulty: 0.7,
    question:
      "Evaluate the differences between FileReader and FileWriter classes in Java for handling character-based file operations.",
    answers: [
      "FileReader reads characters from a file using the default character encoding of the platform whereas FileWriter writes characters to a file using the default character encoding of the platform.",
      "FileReader and FileWriter are used for reading and writing binary data.",
      "FileReader reads binary data from a file whereas FileWriter writes binary data to a file.",
      "FileReader and FileWriter are interchangeable and can be used interchangeably.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that FileReader reads characters from a file using the default character encoding of the platform whereas FileWriter writes characters to a file using the default character encoding of the platform.",
      "FileReader and FileWriter are not used for reading and writing binary data; they are specifically designed for character-based file operations.",
      "FileReader does not read binary data; it reads characters. FileWriter does not write binary data; it writes characters.",
      "FileReader and FileWriter are not interchangeable as they serve different purposes and handle different types of data.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 50,
    topic: "I/O",
  },
  {
    difficulty: 0.6,
    question:
      "Analyze the purpose and usage of CharArrayReader and CharArrayWriter classes in Java for handling character array streams.",
    answers: [
      "CharArrayReader and CharArrayWriter classes are used for reading and writing character array streams in memory.",
      "CharArrayReader and CharArrayWriter classes are used for reading and writing text files.",
      "CharArrayReader and CharArrayWriter classes are interchangeable with FileReader and FileWriter classes.",
      "CharArrayReader and CharArrayWriter classes are used for reading and writing binary data.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that CharArrayReader and CharArrayWriter classes are used for reading and writing character array streams in memory.",
      "CharArrayReader and CharArrayWriter are not used for reading and writing text files; they are specifically designed for character array streams.",
      "CharArrayReader and CharArrayWriter are not interchangeable with FileReader and FileWriter classes; they serve different purposes.",
      "CharArrayReader and CharArrayWriter are not used for reading and writing binary data; they are used for handling character array streams.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 45,
    topic: "I/O",
  },
  {
    difficulty: 0.6,
    question:
      "Compare and contrast the usage of FileInputStream and FileReader classes in Java.",
    answers: [
      "FileInputStream reads bytes from a file directly whereas FileReader reads characters from a file using the default character encoding of the platform.",
      "FileInputStream reads characters from a file directly whereas FileReader reads bytes from a file using the default character encoding of the platform.",
      "FileInputStream is used for reading text files whereas FileReader is used for reading binary files.",
      "FileInputStream and FileReader are interchangeable and can be used interchangeably.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that FileInputStream reads bytes from a file directly whereas FileReader reads characters from a file using the default character encoding of the platform.",
      "FileInputStream does not read characters directly; it reads bytes. FileReader is specifically designed for reading characters.",
      "Both FileInputStream and FileReader can be used for reading text files or binary files depending on how they are used, but their primary difference lies in reading bytes vs. characters.",
      "FileInputStream and FileReader are not interchangeable as they serve different purposes and handle different types of data.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 45,
    topic: "I/O",
  },
  {
    difficulty: 0.7,
    question:
      "Explain the purpose and usage of the RandomAccessFile class in Java.",
    answers: [
      "RandomAccessFile class provides random access to the file. It allows reading from and writing to any position in the file.",
      "RandomAccessFile class is used for reading files sequentially.",
      "RandomAccessFile class is used for reading files in binary format only.",
      "RandomAccessFile class provides sequential access to the file.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that the RandomAccessFile class provides random access to the file, allowing reading from and writing to any position in the file.",
      "RandomAccessFile does not provide sequential access to the file; it provides random access.",
      "RandomAccessFile can be used for reading and writing files in both text and binary formats, not limited to binary format only.",
      "RandomAccessFile is not used for sequential access; it is specifically designed for random access to files.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 50,
    topic: "I/O",
  },
  {
    difficulty: 0.5,
    question:
      "Compare and contrast the usage of FileInputStream and BufferedInputStream in Java.",
    answers: [
      "FileInputStream reads bytes from a file directly whereas BufferedInputStream reads bytes from a file with buffering for improved performance.",
      "FileInputStream and BufferedInputStream are the same and can be used interchangeably.",
      "FileInputStream reads bytes from a file with buffering for improved performance whereas BufferedInputStream reads bytes from a file directly.",
      "BufferedInputStream is used for reading characters from a file.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that FileInputStream reads bytes from a file directly whereas BufferedInputStream reads bytes from a file with buffering for improved performance.",
      "FileInputStream and BufferedInputStream are not the same; they serve different purposes.",
      "FileInputStream does not use buffering by default, while BufferedInputStream does for improved performance.",
      "BufferedInputStream is not specifically designed for reading characters; it is used for buffering input streams for better performance.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 40,
    topic: "I/O",
  },
  {
    difficulty: 0.6,
    question:
      "Discuss the differences between FileOutputStream and FileWriter classes in Java.",
    answers: [
      "FileOutputStream writes bytes to a file whereas FileWriter writes characters to a file using the default character encoding of the platform.",
      "FileOutputStream writes characters to a file whereas FileWriter writes bytes to a file using the default character encoding of the platform.",
      "FileOutputStream is used for writing text files whereas FileWriter is used for writing binary files.",
      "FileOutputStream and FileWriter are interchangeable and can be used interchangeably.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that FileOutputStream writes bytes to a file whereas FileWriter writes characters to a file using the default character encoding of the platform.",
      "FileOutputStream does not directly write characters; it writes bytes. FileWriter is specifically designed for writing characters.",
      "Both FileOutputStream and FileWriter can be used for writing text files or binary files depending on how they are used, but their primary difference lies in writing bytes vs. characters.",
      "FileOutputStream and FileWriter are not interchangeable as they serve different purposes and handle different types of data.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 45,
    topic: "I/O",
  },
  {
    difficulty: 0.7,
    question:
      "Examine the usage of DataInputStream and DataOutputStream classes in Java for reading and writing binary data.",
    answers: [
      "DataInputStream and DataOutputStream provide methods for reading and writing binary data types in a machine-independent way.",
      "DataInputStream and DataOutputStream are used for reading and writing text files.",
      "DataInputStream and DataOutputStream are interchangeable with BufferedReader and BufferedWriter classes.",
      "DataInputStream and DataOutputStream are used for reading and writing characters from and to a file.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that DataInputStream and DataOutputStream provide methods for reading and writing binary data types in a machine-independent way.",
      "DataInputStream and DataOutputStream are not used for reading and writing text files; they are specifically designed for binary data.",
      "DataInputStream and DataOutputStream are not interchangeable with BufferedReader and BufferedWriter classes; they serve different purposes.",
      "DataInputStream and DataOutputStream are not used for reading and writing characters; they are used for reading and writing binary data.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 50,
    topic: "I/O",
  },
  {
    difficulty: 0.5,
    question:
      "Analyze the differences between BufferedInputStream and BufferedOutputStream classes in Java.",
    answers: [
      "BufferedInputStream provides buffering for input streams whereas BufferedOutputStream provides buffering for output streams.",
      "BufferedInputStream and BufferedOutputStream are the same and can be used interchangeably.",
      "BufferedInputStream provides buffering for output streams whereas BufferedOutputStream provides buffering for input streams.",
      "BufferedInputStream and BufferedOutputStream are used for reading and writing text files.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that BufferedInputStream provides buffering for input streams whereas BufferedOutputStream provides buffering for output streams.",
      "BufferedInputStream and BufferedOutputStream are not the same; they serve different purposes.",
      "BufferedInputStream does not provide buffering for output streams; it is specifically designed for input streams.",
      "BufferedInputStream and BufferedOutputStream are not used for reading and writing text files; they are used for buffering input and output streams respectively.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 40,
    topic: "I/O",
  },
  {
    difficulty: 0.6,
    question:
      "Critically evaluate the usage of InputStreamReader and OutputStreamWriter classes in Java for handling character streams.",
    answers: [
      "InputStreamReader and OutputStreamWriter classes bridge byte streams to character streams and provide character encoding conversion.",
      "InputStreamReader and OutputStreamWriter classes are used for handling binary data.",
      "InputStreamReader and OutputStreamWriter classes are interchangeable with FileInputStream and FileOutputStream classes.",
      "InputStreamReader and OutputStreamWriter classes are used for reading and writing binary data.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that InputStreamReader and OutputStreamWriter classes bridge byte streams to character streams and provide character encoding conversion.",
      "InputStreamReader and OutputStreamWriter are not used for handling binary data; they are specifically designed for character streams.",
      "InputStreamReader and OutputStreamWriter are not interchangeable with FileInputStream and FileOutputStream classes; they serve different purposes.",
      "InputStreamReader and OutputStreamWriter are not used for reading and writing binary data; they are used for handling character streams.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 45,
    topic: "I/O",
  },
  {
    difficulty: 0.7,
    question:
      "Evaluate the differences between FileReader and FileWriter classes in Java for handling character-based file operations.",
    answers: [
      "FileReader reads characters from a file using the default character encoding of the platform whereas FileWriter writes characters to a file using the default character encoding of the platform.",
      "FileReader and FileWriter are used for reading and writing binary data.",
      "FileReader reads binary data from a file whereas FileWriter writes binary data to a file.",
      "FileReader and FileWriter are interchangeable and can be used interchangeably.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that FileReader reads characters from a file using the default character encoding of the platform whereas FileWriter writes characters to a file using the default character encoding of the platform.",
      "FileReader and FileWriter are not used for reading and writing binary data; they are specifically designed for character-based file operations.",
      "FileReader does not read binary data; it reads characters. FileWriter does not write binary data; it writes characters.",
      "FileReader and FileWriter are not interchangeable as they serve different purposes and handle different types of data.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 50,
    topic: "I/O",
  },
  {
    difficulty: 0.5,
    question:
      "Assess the usage of ByteArrayInputStream and ByteArrayOutputStream classes in Java for handling byte array streams.",
    answers: [
      "ByteArrayInputStream and ByteArrayOutputStream classes are used for reading and writing byte array streams in memory.",
      "ByteArrayInputStream and ByteArrayOutputStream classes are used for reading and writing text files.",
      "ByteArrayInputStream and ByteArrayOutputStream classes are interchangeable with FileInputStream and FileOutputStream classes.",
      "ByteArrayInputStream and ByteArrayOutputStream classes are used for reading and writing characters from and to a file.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that ByteArrayInputStream and ByteArrayOutputStream classes are used for reading and writing byte array streams in memory.",
      "ByteArrayInputStream and ByteArrayOutputStream are not used for reading and writing text files; they are specifically designed for byte array streams.",
      "ByteArrayInputStream and ByteArrayOutputStream are not interchangeable with FileInputStream and FileOutputStream classes; they serve different purposes.",
      "ByteArrayInputStream and ByteArrayOutputStream are not used for reading and writing characters; they are used for handling byte array streams.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 40,
    topic: "I/O",
  },
  {
    difficulty: 0.6,
    question:
      "Analyze the purpose and usage of CharArrayReader and CharArrayWriter classes in Java for handling character array streams.",
    answers: [
      "CharArrayReader and CharArrayWriter classes are used for reading and writing character array streams in memory.",
      "CharArrayReader and CharArrayWriter classes are used for reading and writing text files.",
      "CharArrayReader and CharArrayWriter classes are interchangeable with FileReader and FileWriter classes.",
      "CharArrayReader and CharArrayWriter classes are used for reading and writing binary data.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that CharArrayReader and CharArrayWriter classes are used for reading and writing character array streams in memory.",
      "CharArrayReader and CharArrayWriter are not used for reading and writing text files; they are specifically designed for character array streams.",
      "CharArrayReader and CharArrayWriter are not interchangeable with FileReader and FileWriter classes; they serve different purposes.",
      "CharArrayReader and CharArrayWriter are not used for reading and writing binary data; they are used for handling character array streams.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 45,
    topic: "I/O",
  },
  {
    difficulty: 0.6,
    question:
      "Evaluate the advantages of using BufferedWriter over FileWriter in Java for writing text files.",
    answers: [
      "BufferedWriter provides buffering for improved performance while writing to text files.",
      "BufferedWriter does not provide any advantages over FileWriter for writing text files.",
      "BufferedWriter is slower than FileWriter for writing text files.",
      "BufferedWriter is used for reading text files.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that BufferedWriter provides buffering for improved performance while writing to text files. This buffering reduces the number of disk accesses, making BufferedWriter more efficient compared to FileWriter for writing large amounts of data.",
      "BufferedWriter does provide advantages over FileWriter for writing text files, particularly in terms of performance.",
      "BufferedWriter is not slower than FileWriter for writing text files; it is typically faster due to buffering.",
      "BufferedWriter is not used for reading text files; it is specifically designed for writing.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 45,
    topic: "I/O",
  },
  {
    difficulty: 0.7,
    question:
      "Evaluate the usage of ObjectInputStream and ObjectOutputStream classes in Java for object serialization and deserialization.",
    answers: [
      "ObjectInputStream and ObjectOutputStream provide functionality for reading and writing objects to and from streams respectively, facilitating object serialization and deserialization.",
      "ObjectInputStream and ObjectOutputStream are used for reading and writing text files.",
      "ObjectInputStream and ObjectOutputStream are interchangeable with BufferedReader and BufferedWriter classes.",
      "ObjectInputStream and ObjectOutputStream are used for reading and writing characters from and to a file.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that ObjectInputStream and ObjectOutputStream provide functionality for reading and writing objects to and from streams respectively, facilitating object serialization and deserialization.",
      "ObjectInputStream and ObjectOutputStream are not used for reading and writing text files; they are specifically designed for object serialization and deserialization.",
      "ObjectInputStream and ObjectOutputStream are not interchangeable with BufferedReader and BufferedWriter classes; they serve different purposes.",
      "ObjectInputStream and ObjectOutputStream are not used for reading and writing characters; they are used for handling object streams.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 50,
    topic: "I/O",
  },
  {
    difficulty: 0.5,
    question:
      "Evaluate the differences between InputStreamReader and FileReader classes in Java for reading character-based data.",
    answers: [
      "InputStreamReader is a bridge from byte streams to character streams whereas FileReader reads characters directly from a file.",
      "InputStreamReader and FileReader are the same and can be used interchangeably.",
      "InputStreamReader reads characters directly from a file whereas FileReader is a bridge from byte streams to character streams.",
      "FileReader is used for reading binary data.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that InputStreamReader is a bridge from byte streams to character streams whereas FileReader reads characters directly from a file.",
      "InputStreamReader and FileReader are not the same; they serve different purposes.",
      "FileReader does not read binary data; it reads characters. InputStreamReader is specifically designed for bridging byte streams to character streams.",
      "FileReader is not used for reading binary data; it is used for reading characters from a file.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 40,
    topic: "I/O",
  },
  {
    difficulty: 0.7,
    question:
      "Evaluate the usage of FileInputStream and FileOutputStream for handling large files in Java.",
    answers: [
      "FileInputStream and FileOutputStream are suitable for handling large files due to their ability to read and write data in chunks, minimizing memory usage.",
      "FileInputStream and FileOutputStream are not suitable for handling large files as they load the entire file into memory.",
      "FileInputStream and FileOutputStream are slower than ObjectInputStream and ObjectOutputStream for handling large files.",
      "FileInputStream and FileOutputStream are used for reading and writing text files.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that FileInputStream and FileOutputStream are suitable for handling large files due to their ability to read and write data in chunks, minimizing memory usage. They do not load the entire file into memory at once, making them efficient for large files.",
      "FileInputStream and FileOutputStream do not load the entire file into memory at once; they read and write data in chunks, making them suitable for large files.",
      "FileInputStream and FileOutputStream are not necessarily slower than ObjectInputStream and ObjectOutputStream for handling large files; their performance depends on various factors including buffering.",
      "FileInputStream and FileOutputStream are not used exclusively for reading and writing text files; they can handle any type of file.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 50,
    topic: "I/O",
  },
  {
    difficulty: 0.5,
    question:
      "Evaluate the usage of BufferedReader and BufferedWriter classes in Java for reading and writing text files efficiently.",
    answers: [
      "BufferedReader and BufferedWriter provide buffering for improved performance while reading and writing text files.",
      "BufferedReader and BufferedWriter are slower than FileReader and FileWriter for reading and writing text files.",
      "BufferedReader and BufferedWriter are used for reading and writing binary files.",
      "BufferedReader and BufferedWriter are used for reading and writing characters from and to a file.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that BufferedReader and BufferedWriter provide buffering for improved performance while reading and writing text files. This buffering reduces the number of disk accesses, making them more efficient compared to FileReader and FileWriter for reading and writing large amounts of data.",
      "BufferedReader and BufferedWriter are not necessarily slower than FileReader and FileWriter for reading and writing text files; their performance depends on various factors including buffering.",
      "BufferedReader and BufferedWriter are not used for reading and writing binary files; they are specifically designed for text files.",
      "BufferedReader and BufferedWriter are not used for reading and writing characters; they are used for handling text files.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 40,
    topic: "I/O",
  },
  {
    difficulty: 0.6,
    question:
      "Evaluate the differences between FileInputStream and FileReader classes in Java for reading files.",
    answers: [
      "FileInputStream reads bytes from a file directly whereas FileReader reads characters from a file using the default character encoding of the platform.",
      "FileInputStream and FileReader are the same and can be used interchangeably.",
      "FileInputStream reads characters from a file directly whereas FileReader reads bytes from a file using the default character encoding of the platform.",
      "FileReader is used for reading binary data.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that FileInputStream reads bytes from a file directly whereas FileReader reads characters from a file using the default character encoding of the platform.",
      "FileInputStream and FileReader are not the same; they serve different purposes.",
      "FileReader does not read bytes from a file directly; it reads characters. FileInputStream is specifically designed for reading bytes.",
      "FileReader is not used for reading binary data; it is used for reading characters from a file.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 45,
    topic: "I/O",
  },
  {
    difficulty: 0.7,
    question:
      "Evaluate the advantages and disadvantages of using FileWriter over BufferedWriter in Java for writing text files.",
    answers: [
      "FileWriter provides convenience methods for writing characters to a file directly, but it lacks buffering for improved performance.",
      "FileWriter provides buffering for improved performance while writing to text files.",
      "FileWriter is slower than BufferedWriter for writing text files.",
      "FileWriter is used for reading text files.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that FileWriter provides convenience methods for writing characters to a file directly, but it lacks buffering for improved performance. This can lead to decreased performance when writing large amounts of data compared to BufferedWriter.",
      "FileWriter does not provide buffering by default, unlike BufferedWriter, which offers improved performance for writing large amounts of data.",
      "FileWriter is not necessarily slower than BufferedWriter for writing text files; its performance depends on various factors including buffering.",
      "FileWriter is not used for reading text files; it is specifically designed for writing.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 50,
    topic: "I/O",
  },
  {
    difficulty: 0.5,
    question:
      "Evaluate the usage of FileInputStream and BufferedInputStream classes in Java for reading files efficiently.",
    answers: [
      "BufferedInputStream provides buffering for improved performance while reading files by reducing the number of disk accesses.",
      "BufferedInputStream is slower than FileInputStream for reading files.",
      "BufferedInputStream is used for reading and writing text files.",
      "BufferedInputStream is used for reading binary data.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that BufferedInputStream provides buffering for improved performance while reading files by reducing the number of disk accesses. This buffering makes it more efficient compared to FileInputStream, especially when reading large files.",
      "BufferedInputStream is not necessarily slower than FileInputStream for reading files; its performance depends on various factors including buffering.",
      "BufferedInputStream is not used exclusively for reading and writing text files; it can handle any type of file.",
      "BufferedInputStream is typically used for buffering input streams, not specifically for reading binary data.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 40,
    topic: "I/O",
  },
  {
    difficulty: 0.6,
    question:
      "Evaluate the differences between DataInputStream and ObjectInputStream classes in Java for reading binary data.",
    answers: [
      "DataInputStream provides methods for reading primitive data types and strings from an input stream whereas ObjectInputStream reads objects from an input stream.",
      "DataInputStream and ObjectInputStream are the same and can be used interchangeably.",
      "DataInputStream reads objects from an input stream whereas ObjectInputStream provides methods for reading primitive data types and strings from an input stream.",
      "DataInputStream is used for reading and writing text files.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that DataInputStream provides methods for reading primitive data types and strings from an input stream whereas ObjectInputStream reads objects from an input stream.",
      "DataInputStream and ObjectInputStream are not the same; they serve different purposes.",
      "DataInputStream does not read objects from an input stream; it reads primitive data types and strings. ObjectInputStream is specifically designed for reading objects.",
      "DataInputStream is not used for reading and writing text files; it is used for handling binary data.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 45,
    topic: "I/O",
  },
  {
    difficulty: 0.7,
    question:
      "Evaluate the advantages and disadvantages of using BufferedReader and Scanner classes in Java for reading user input from the console.",
    answers: [
      "BufferedReader provides more efficient reading of text input from the console whereas Scanner offers convenient methods for parsing different data types but may be slower.",
      "BufferedReader and Scanner are the same and can be used interchangeably for reading user input from the console.",
      "BufferedReader is slower than Scanner for reading user input from the console.",
      "BufferedReader and Scanner are used for reading and writing binary files.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that BufferedReader provides more efficient reading of text input from the console whereas Scanner offers convenient methods for parsing different data types but may be slower overall due to its additional functionalities.",
      "BufferedReader and Scanner are not the same; they serve different purposes.",
      "BufferedReader is typically faster than Scanner for reading text input from the console.",
      "BufferedReader and Scanner are not used for reading and writing binary files; they are specifically designed for reading text input from the console.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 50,
    topic: "I/O",
  },
  {
    difficulty: 0.5,
    question:
      "Evaluate the differences between InputStreamReader and BufferedReader classes in Java for reading character-based input streams.",
    answers: [
      "InputStreamReader is used to bridge byte streams to character streams whereas BufferedReader provides buffering for improved performance while reading character-based input streams.",
      "InputStreamReader and BufferedReader are the same and can be used interchangeably for reading character-based input streams.",
      "InputStreamReader provides buffering for improved performance while reading character-based input streams whereas BufferedReader is used to bridge byte streams to character streams.",
      "BufferedReader is used for reading binary data.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that InputStreamReader is used to bridge byte streams to character streams whereas BufferedReader provides buffering for improved performance while reading character-based input streams. InputStreamReader is mainly used for converting bytes to characters, while BufferedReader enhances performance by buffering the input, reducing the number of system calls.",
      "InputStreamReader and BufferedReader are not the same; they serve different purposes.",
      "InputStreamReader does not provide buffering; it simply bridges byte streams to character streams. BufferedReader is specifically designed for buffering character-based input streams.",
      "BufferedReader is not used for reading binary data; it is used for reading character-based input streams.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 40,
    topic: "I/O",
  },
  {
    difficulty: 0.6,
    question:
      "Evaluate the usage of FileWriter and FileOutputStream classes in Java for writing files.",
    answers: [
      "FileWriter is used for writing characters to a file whereas FileOutputStream is used for writing binary data to a file.",
      "FileWriter and FileOutputStream are the same and can be used interchangeably for writing files.",
      "FileWriter provides methods for writing formatted text to a file whereas FileOutputStream provides buffering for improved performance.",
      "FileWriter and FileOutputStream are used for reading text files.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that FileWriter is used for writing characters to a file whereas FileOutputStream is used for writing binary data to a file. FileWriter is specifically designed for writing text data, while FileOutputStream is more general-purpose and can handle any binary data.",
      "FileWriter and FileOutputStream are not the same; they serve different purposes.",
      "FileWriter does not provide buffering; it is mainly used for writing characters. FileOutputStream is specifically designed for handling binary data.",
      "FileWriter and FileOutputStream are not used for reading text files; they are specifically designed for writing.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 45,
    topic: "I/O",
  },
  {
    difficulty: 0.7,
    question:
      "Evaluate the advantages and disadvantages of using FileReader and FileInputStream classes in Java for reading files.",
    answers: [
      "FileReader is used for reading characters from a file whereas FileInputStream is used for reading binary data from a file.",
      "FileReader and FileInputStream are the same and can be used interchangeably for reading files.",
      "FileReader provides buffering for improved performance while reading files whereas FileInputStream is used to read bytes from a file directly.",
      "FileReader and FileInputStream are used for writing text files.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that FileReader is used for reading characters from a file whereas FileInputStream is used for reading binary data from a file. FileReader is specifically designed for reading character data, while FileInputStream is more general-purpose and can handle any binary data.",
      "FileReader and FileInputStream are not the same; they serve different purposes.",
      "FileReader does not provide buffering; it is mainly used for reading characters. FileInputStream is specifically designed for reading bytes from a file directly.",
      "FileReader and FileInputStream are not used for writing text files; they are specifically designed for reading.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 50,
    topic: "I/O",
  },
  {
    difficulty: 0.5,
    question:
      "Evaluate the differences between BufferedWriter and PrintWriter classes in Java for writing text files.",
    answers: [
      "BufferedWriter provides buffering for improved performance while writing to text files whereas PrintWriter offers more convenient methods for writing formatted text.",
      "BufferedWriter and PrintWriter are the same and can be used interchangeably for writing text files.",
      "BufferedWriter provides methods for writing formatted text to a file whereas PrintWriter provides buffering for improved performance.",
      "BufferedWriter and PrintWriter are used for reading text files.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that BufferedWriter provides buffering for improved performance while writing to text files whereas PrintWriter offers more convenient methods for writing formatted text. BufferedWriter is mainly used for buffering output, while PrintWriter enhances the formatting capabilities for text-based output.",
      "BufferedWriter and PrintWriter are not the same; they serve different purposes.",
      "BufferedWriter does not provide methods for writing formatted text; it is mainly used for buffering. PrintWriter is specifically designed for writing formatted text.",
      "BufferedWriter and PrintWriter are not used for reading text files; they are specifically designed for writing.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 40,
    topic: "I/O",
  },
  {
    difficulty: 0.6,
    question:
      "Evaluate the usage of ByteArrayInputStream and DataInputStream classes in Java for handling input streams.",
    answers: [
      "ByteArrayInputStream is used to read bytes from a byte array whereas DataInputStream provides methods for reading primitive data types and strings from an input stream.",
      "ByteArrayInputStream and DataInputStream are the same and can be used interchangeably for handling input streams.",
      "ByteArrayInputStream provides methods for reading primitive data types and strings from an input stream whereas DataInputStream is used to read bytes from a byte array.",
      "ByteArrayInputStream and DataInputStream are used for reading and writing text files.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that ByteArrayInputStream is used to read bytes from a byte array whereas DataInputStream provides methods for reading primitive data types and strings from an input stream. ByteArrayInputStream reads from a byte array, while DataInputStream reads from any input stream and provides methods for interpreting the binary data.",
      "ByteArrayInputStream and DataInputStream are not the same; they serve different purposes.",
      "ByteArrayInputStream does not provide methods for reading primitive data types and strings from an input stream; it is used specifically for reading from a byte array. DataInputStream is used for reading from any input stream.",
      "ByteArrayInputStream and DataInputStream are not used for reading and writing text files; they are specifically designed for handling input streams.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 45,
    topic: "I/O",
  },
  {
    difficulty: 0.7,
    question:
      "Evaluate the advantages and disadvantages of using ByteArrayOutputStream and DataOutputStream classes in Java for handling output streams.",
    answers: [
      "ByteArrayOutputStream provides methods for writing bytes to a byte array whereas DataOutputStream offers methods for writing primitive data types and strings to an output stream.",
      "ByteArrayOutputStream and DataOutputStream are the same and can be used interchangeably for handling output streams.",
      "ByteArrayOutputStream provides methods for writing primitive data types and strings to an output stream whereas DataOutputStream is used to write bytes to a byte array.",
      "ByteArrayOutputStream and DataOutputStream are used for reading and writing text files.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that ByteArrayOutputStream provides methods for writing bytes to a byte array whereas DataOutputStream offers methods for writing primitive data types and strings to an output stream. ByteArrayOutputStream is specifically designed for writing to a byte array, while DataOutputStream can write to any output stream and provides methods for formatting and interpreting the data.",
      "ByteArrayOutputStream and DataOutputStream are not the same; they serve different purposes.",
      "ByteArrayOutputStream does not provide methods for writing primitive data types and strings to an output stream; it is used specifically for writing to a byte array. DataOutputStream is used for writing to any output stream.",
      "ByteArrayOutputStream and DataOutputStream are not used for reading and writing text files; they are specifically designed for handling output streams.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 50,
    topic: "I/O",
  },
  {
    difficulty: 0.5,
    question:
      "Evaluate the differences between FileWriter and PrintWriter classes in Java for writing text files.",
    answers: [
      "FileWriter is used to write characters to a file whereas PrintWriter provides more convenient methods for writing formatted text to a file.",
      "FileWriter and PrintWriter are the same and can be used interchangeably for writing text files.",
      "FileWriter provides more convenient methods for writing formatted text to a file whereas PrintWriter is used to write characters to a file.",
      "FileWriter and PrintWriter are used for reading text files.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that FileWriter is used to write characters to a file whereas PrintWriter provides more convenient methods for writing formatted text to a file. PrintWriter offers additional methods for printing various data types and formatted text, making it more versatile for text file output.",
      "FileWriter and PrintWriter are not the same; they serve different purposes.",
      "FileWriter does not provide methods for writing formatted text; it is mainly used for writing characters. PrintWriter is specifically designed for writing formatted text.",
      "FileWriter and PrintWriter are not used for reading text files; they are specifically designed for writing.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 40,
    topic: "I/O",
  },
  {
    difficulty: 0.6,
    question:
      "Evaluate the usage of BufferedWriter and DataOutputStream classes in Java for handling output streams.",
    answers: [
      "BufferedWriter provides buffering for improved performance while writing to text files whereas DataOutputStream offers methods for writing primitive data types and strings to an output stream.",
      "BufferedWriter and DataOutputStream are the same and can be used interchangeably for handling output streams.",
      "BufferedWriter provides methods for writing primitive data types and strings to an output stream whereas DataOutputStream is used to write bytes to a byte array.",
      "BufferedWriter and DataOutputStream are used for reading and writing text files.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is that BufferedWriter provides buffering for improved performance while writing to text files whereas DataOutputStream offers methods for writing primitive data types and strings to an output stream. BufferedWriter is mainly used for buffering output, while DataOutputStream is more general-purpose and can handle any binary data.",
      "BufferedWriter and DataOutputStream are not the same; they serve different purposes.",
      "BufferedWriter does not provide methods for writing primitive data types and strings to an output stream; it is mainly used for buffering. DataOutputStream is specifically designed for writing binary data to an output stream.",
      "BufferedWriter and DataOutputStream are not used for reading and writing text files; they are specifically designed for handling output streams.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 45,
    topic: "I/O",
  },
  {
    difficulty: 0.6,
    question:
      "Create a Java program that reads data from a text file, splits it into multiple files based on a condition, and writes each subset of data to separate files using BufferedReader and BufferedWriter.",
    answers: [
      "Develop a Java program that reads data from a text file, splits it into multiple files based on a condition, and writes each subset of data to separate files using BufferedReader and BufferedWriter.",
      "Write a Java program that reads data from a text file and writes the content to another text file using FileReader and FileWriter.",
      "Create a Java program that reads data from a text file and writes the content to another text file using FileInputStream and FileOutputStream.",
      "Develop a Java program that reads data from a text file and writes the content to another text file using Scanner and PrintWriter.",
    ],
    correct: 0,
    explanations: [
      "The correct answer is to develop a Java program that reads data from a text file, splits it into multiple files based on a condition, and writes each subset of data to separate files using BufferedReader and BufferedWriter. This approach allows for efficient handling of large datasets by dividing them into manageable chunks.",
      "Using FileReader and FileWriter is not sufficient for splitting data into multiple files based on a condition; BufferedReader and BufferedWriter provide better control and performance.",
      "Using FileInputStream and FileOutputStream is not suitable for reading and writing text-based files; they are primarily used for handling binary data.",
      "Using Scanner and PrintWriter is not the most efficient approach for splitting data into multiple files based on a condition; BufferedReader and BufferedWriter provide better control and performance.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 70,
    topic: "I/O",
  },
];
