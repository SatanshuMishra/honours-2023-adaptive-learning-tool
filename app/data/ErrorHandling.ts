export const dummyData: {
  difficulty: number;
  question: string;
  code?: string;
  answers: string[];
  correct: number;
  explanations: string[];
  bloomTaxonomy: string;
  timeTakenSeconds: number;
  topic: string;
}[] = [
  {
    difficulty: 0.3,
    question: "Which keyword is used to handle exceptions in Java?",
    answers: ["try", "catch", "finally", "throw"],
    correct: 1,
    explanations: [
      "The 'catch' keyword is used to handle exceptions in Java.",
      "'try' is the keyword used to start a block of code to be tested for exceptions.",
      "'finally' is used to execute important code such as closing database connections, whether an exception is thrown or not.",
      "'throw' is used to explicitly throw an exception within a method.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 20,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question: "What is the purpose of the 'throws' keyword in Java?",
    answers: [
      "To declare that a method may raise a particular type of exception.",
      "To catch exceptions.",
      "To handle runtime errors.",
      "To specify the return type of a method.",
    ],
    correct: 0,
    explanations: [
      "The 'throws' keyword is used to declare that a method may raise a particular type of exception.",
      "'catch' is used to handle exceptions.",
      "'throw' is used to explicitly throw an exception within a method.",
      "'throws' does not specify the return type of a method.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 25,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question: "Which method is called when an exception is not caught?",
    answers: ["finalize()", "main()", "catch()", "run()"],
    correct: 0,
    explanations: [
      "'finalize()' method is called by the garbage collector before an object is destroyed.",
      "'main()' method is the entry point for a Java application.",
      "'catch()' is used within try-catch blocks to handle exceptions.",
      "'run()' is the entry point for a thread.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 30,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question: "Which keyword is used to re-throw an exception in Java?",
    answers: ["throw", "finally", "rethrow", "throws"],
    correct: 0,
    explanations: [
      "The 'throw' keyword is used to re-throw an exception in Java.",
      "'finally' is used to execute important code such as closing database connections, whether an exception is thrown or not.",
      "'rethrow' is not a valid keyword in Java.",
      "'throws' is used to declare that a method may raise a particular type of exception.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 20,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question:
      "Which keyword is used to create a custom exception class in Java?",
    answers: ["exception", "error", "custom", "throw"],
    correct: 2,
    explanations: [
      "To create a custom exception class in Java, the 'class' keyword is used.",
      "'error' represents runtime errors that cannot be handled.",
      "'custom' is not a keyword for creating custom exception classes.",
      "'throw' is used to explicitly throw an exception within a method.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 25,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question:
      "What does the 'finally' block contain in a try-catch-finally statement?",
    answers: [
      "Code that is executed regardless of whether an exception occurs or not.",
      "Code that is executed if an exception occurs.",
      "Code that is executed if no exception occurs.",
      "Code that is executed before the try block.",
    ],
    correct: 0,
    explanations: [
      "The 'finally' block contains code that is executed regardless of whether an exception occurs or not.",
      "'catch' block contains code that is executed if an exception occurs.",
      "'try' block contains the main code that may cause exceptions.",
      "The 'finally' block is executed after the try and catch blocks.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 30,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "Which exception is thrown when an array is accessed with an invalid index?",
    answers: [
      "ArrayOutOfBoundsException",
      "IndexOutOfRangeException",
      "ArrayIndexException",
      "IndexOutOfBoundsException",
    ],
    correct: 3,
    explanations: [
      "The 'IndexOutOfBoundsException' is thrown when an array is accessed with an invalid index.",
      "'ArrayOutOfBoundsException' is not a valid exception in Java.",
      "'IndexOutOfRangeException' is not a valid exception in Java.",
      "'ArrayIndexException' is not a valid exception in Java.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 35,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question: "What happens if an exception occurs within the 'finally' block?",
    answers: [
      "The exception is caught by the enclosing 'try-catch' block.",
      "The program terminates.",
      "The exception is ignored.",
      "The 'finally' block is not executed.",
    ],
    correct: 0,
    explanations: [
      "If an exception occurs within the 'finally' block, it is caught by the enclosing 'try-catch' block.",
      "The program does not terminate immediately; it handles the exception.",
      "The exception within the 'finally' block is not ignored.",
      "The 'finally' block is always executed unless the program is terminated abruptly.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 40,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question: "Which keyword is used to define an exception handler in Java?",
    answers: ["handle", "catch", "try", "exception"],
    correct: 1,
    explanations: [
      "The 'catch' keyword is used to define an exception handler in Java.",
      "'handle' is not a keyword for defining exception handlers.",
      "'try' is used to start a block of code to be tested for exceptions.",
      "'exception' is not a keyword for defining exception handlers.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 45,
    topic: "Error Handling",
  },
  {
    difficulty: 0.9,
    question:
      "Which of the following statements is true regarding checked and unchecked exceptions in Java?",
    answers: [
      "Checked exceptions are checked at compile-time, whereas unchecked exceptions are checked at runtime.",
      "Unchecked exceptions are checked at compile-time, whereas checked exceptions are checked at runtime.",
      "Both checked and unchecked exceptions are checked at compile-time.",
      "Both checked and unchecked exceptions are checked at runtime.",
    ],
    correct: 0,
    explanations: [
      "Checked exceptions are checked at compile-time, whereas unchecked exceptions are checked at runtime.",
      "Unchecked exceptions are not checked at compile-time.",
      "Both checked and unchecked exceptions are not checked at compile-time.",
      "Both checked and unchecked exceptions are not checked at runtime.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 50,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question:
      "Which keyword is used to propagate an exception up the call stack in Java?",
    answers: ["try", "catch", "finally", "throw"],
    correct: 3,
    explanations: [
      "The 'throw' keyword is used to propagate an exception up the call stack in Java.",
      "'try' is used to start a block of code to be tested for exceptions.",
      "'catch' is used to handle exceptions.",
      "'finally' is used to execute important code such as closing database connections, whether an exception is thrown or not.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 25,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "Which keyword is used to catch multiple exceptions in a single catch block in Java?",
    answers: ["multiple", "all", "union", "multi-catch"],
    correct: 3,
    explanations: [
      "The 'multi-catch' keyword is used to catch multiple exceptions in a single catch block in Java.",
      "There's no keyword 'multiple' for catching multiple exceptions.",
      "There's no keyword 'all' for catching multiple exceptions.",
      "There's no keyword 'union' for catching multiple exceptions.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 35,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question: "Which of the following is not a type of exception in Java?",
    answers: [
      "Checked Exceptions",
      "Runtime Exceptions",
      "Unresolved Exceptions",
      "Error Exceptions",
    ],
    correct: 2,
    explanations: [
      "'Unresolved Exceptions' is not a type of exception in Java.",
      "'Checked Exceptions' are checked at compile-time, 'Runtime Exceptions' are unchecked, and 'Error Exceptions' represent serious problems that a reasonable application should not try to catch.",
      "'Checked Exceptions', 'Runtime Exceptions', and 'Error Exceptions' are valid types of exceptions in Java.",
      "'Error Exceptions' represent errors that are not expected to be caught by the application.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 40,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question:
      "What happens if an exception occurs in the 'try' block and is not caught by any 'catch' block in Java?",
    answers: [
      "The program terminates with an uncaught exception error.",
      "The exception is caught by the 'finally' block.",
      "The program continues execution without any impact.",
      "The exception is logged to a file.",
    ],
    correct: 0,
    explanations: [
      "If an exception occurs in the 'try' block and is not caught by any 'catch' block in Java, the program terminates with an uncaught exception error.",
      "The 'finally' block executes regardless of whether an exception is caught or not.",
      "The program does not continue execution if an uncaught exception occurs.",
      "Exceptions are not automatically logged to a file in Java.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 30,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question: "Which keyword is used to suppress exceptions in Java?",
    answers: ["suppress", "ignore", "silence", "SuppressWarnings"],
    correct: 3,
    explanations: [
      "The 'SuppressWarnings' keyword is used to suppress exceptions in Java.",
      "There's no keyword 'suppress' for suppressing exceptions.",
      "There's no keyword 'ignore' for suppressing exceptions.",
      "There's no keyword 'silence' for suppressing exceptions.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 35,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question: "Which of the following is not a type of error in Java?",
    answers: [
      "Syntax Error",
      "Runtime Error",
      "Logic Error",
      "Exception Error",
    ],
    correct: 3,
    explanations: [
      "'Exception Error' is not a type of error in Java.",
      "'Syntax Error' occurs due to incorrect syntax in the code, 'Runtime Error' occurs during program execution, and 'Logic Error' occurs due to incorrect program logic.",
      "'Syntax Error', 'Runtime Error', and 'Logic Error' are valid types of errors in Java.",
      "'Exception Error' is not a recognized term in Java.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 40,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question:
      "Which method is used to specify code that may throw multiple exceptions in Java?",
    answers: ["catch", "throws", "try", "multi-catch"],
    correct: 1,
    explanations: [
      "The 'throws' keyword is used to specify code that may throw multiple exceptions in Java.",
      "'catch' is used to handle exceptions.",
      "'try' is used to start a block of code to be tested for exceptions.",
      "'multi-catch' is used to catch multiple exceptions in a single catch block.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 45,
    topic: "Error Handling",
  },
  {
    difficulty: 0.2,
    question: "Which keyword is used to catch exceptions in Java?",
    answers: ["try", "catch", "finally", "throw"],
    correct: 1,
    explanations: [
      "The 'catch' keyword is used to catch exceptions in Java.",
      "'try' is used to start a block of code to be tested for exceptions.",
      "'finally' is used to execute important code such as closing database connections, whether an exception is thrown or not.",
      "'throw' is used to explicitly throw an exception within a method.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 15,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question:
      "What is the purpose of the 'finally' block in Java exception handling?",
    answers: [
      "To execute code regardless of whether an exception occurs or not.",
      "To catch exceptions.",
      "To specify the return type of a method.",
      "To propagate an exception up the call stack.",
    ],
    correct: 0,
    explanations: [
      "The 'finally' block in Java exception handling is used to execute code regardless of whether an exception occurs or not.",
      "'catch' is used to handle exceptions.",
      "'try' is used to start a block of code to be tested for exceptions.",
      "'throw' is used to explicitly throw an exception within a method.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 20,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question:
      "Which keyword is used to explicitly throw an exception within a method in Java?",
    answers: ["raise", "throws", "throw", "exception"],
    correct: 2,
    explanations: [
      "The 'throw' keyword is used to explicitly throw an exception within a method in Java.",
      "'raise' is not a keyword for throwing exceptions.",
      "'throws' is used to declare that a method may raise a particular type of exception.",
      "'exception' is not a keyword for throwing exceptions.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 20,
    topic: "Error Handling",
  },
  {
    difficulty: 0.2,
    question: "What is the superclass of all exception types in Java?",
    answers: ["Exception", "Throwable", "RuntimeException", "Error"],
    correct: 1,
    explanations: [
      "The superclass of all exception types in Java is 'Throwable'.",
      "'Exception' is a subclass of 'Throwable' representing exceptional conditions that programs should catch.",
      "'RuntimeException' is a subclass of 'Exception' representing exceptions that occur due to programming errors.",
      "'Error' is a subclass of 'Throwable' representing serious problems that are typically beyond the control of the application.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 15,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question:
      "Which of the following is not a standard exception class in Java?",
    answers: [
      "IOException",
      "NullPointerException",
      "DatabaseException",
      "ArrayIndexOutOfBoundsException",
    ],
    correct: 2,
    explanations: [
      "'DatabaseException' is not a standard exception class in Java.",
      "'IOException', 'NullPointerException', and 'ArrayIndexOutOfBoundsException' are standard exception classes.",
      "'DatabaseException' might be a custom exception class but is not part of the standard Java exceptions.",
      "'NullPointerException' is thrown when trying to access a member of an object that is null.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 20,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question:
      "Which of the following is true regarding checked and unchecked exceptions in Java?",
    answers: [
      "Checked exceptions are checked at compile-time, whereas unchecked exceptions are checked at runtime.",
      "Unchecked exceptions are checked at compile-time, whereas checked exceptions are checked at runtime.",
      "Both checked and unchecked exceptions are checked at compile-time.",
      "Both checked and unchecked exceptions are checked at runtime.",
    ],
    correct: 0,
    explanations: [
      "Checked exceptions are checked at compile-time, whereas unchecked exceptions are checked at runtime.",
      "Unchecked exceptions are not checked at compile-time.",
      "Both checked and unchecked exceptions are not checked at compile-time.",
      "Both checked and unchecked exceptions are not checked at runtime.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 20,
    topic: "Error Handling",
  },
  {
    difficulty: 0.2,
    question:
      "What happens if an exception occurs within the 'finally' block in Java?",
    answers: [
      "The exception is caught by the enclosing 'try-catch' block.",
      "The program terminates.",
      "The exception is ignored.",
      "The 'finally' block is not executed.",
    ],
    correct: 0,
    explanations: [
      "If an exception occurs within the 'finally' block in Java, it is caught by the enclosing 'try-catch' block.",
      "The program does not terminate immediately; it handles the exception.",
      "The exception within the 'finally' block is not ignored.",
      "The 'finally' block is always executed, even if an exception occurs within it.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 15,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question:
      "Which keyword is used to propagate an exception up the call stack in Java?",
    answers: ["try", "catch", "finally", "throw"],
    correct: 3,
    explanations: [
      "The 'throw' keyword is used to propagate an exception up the call stack in Java.",
      "'try' is used to start a block of code to be tested for exceptions.",
      "'catch' is used to handle exceptions.",
      "'finally' is used to execute important code such as closing database connections, whether an exception is thrown or not.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 20,
    topic: "Error Handling",
  },
  {
    difficulty: 0.2,
    question: "Which keyword is used to suppress exceptions in Java?",
    answers: ["suppress", "ignore", "silence", "SuppressWarnings"],
    correct: 3,
    explanations: [
      "The 'SuppressWarnings' keyword is used to suppress exceptions in Java.",
      "There's no keyword 'suppress' for suppressing exceptions.",
      "There's no keyword 'ignore' for suppressing exceptions.",
      "There's no keyword 'silence' for suppressing exceptions.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 15,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question:
      "What is the purpose of the 'try' block in Java exception handling?",
    answers: [
      "To define a block of code to be tested for exceptions.",
      "To catch exceptions.",
      "To specify the return type of a method.",
      "To explicitly throw an exception within a method.",
    ],
    correct: 0,
    explanations: [
      "The 'try' block in Java exception handling is used to define a block of code to be tested for exceptions.",
      "It does not catch exceptions; it defines the code that may throw exceptions.",
      "It does not specify the return type of a method; it defines a block of code.",
      "It does not throw exceptions; it defines a block of code.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 30,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question: "Which keyword is used to catch exceptions in Java?",
    answers: ["try", "catch", "finally", "throw"],
    correct: 1,
    explanations: [
      "The 'catch' keyword is used to catch exceptions in Java.",
      "'try' is used to define a block of code to be tested for exceptions.",
      "'finally' is used to execute important code regardless of whether an exception occurs or not.",
      "'throw' is used to explicitly throw an exception within a method.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 35,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question:
      "What is the difference between 'catch' and 'finally' blocks in Java exception handling?",
    answers: [
      "'catch' block is always executed, whereas 'finally' block is executed only if an exception occurs.",
      "'finally' block is always executed, whereas 'catch' block is executed only if an exception occurs.",
      "'catch' block must be followed by a 'finally' block, whereas 'finally' block can be used alone.",
      "'finally' block is used to define a block of code to be tested for exceptions, whereas 'catch' block is used to catch exceptions.",
    ],
    correct: 1,
    explanations: [
      "'finally' block is always executed, whereas 'catch' block is executed only if an exception occurs.",
      "The 'finally' block is used for cleanup code that should be executed regardless of whether an exception occurs or not.",
      "'catch' block is not always executed; it depends on whether an exception occurs in the try block.",
      "'finally' block can be used alone without a preceding 'catch' block.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 30,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question:
      "Which of the following statements is true regarding checked and unchecked exceptions in Java?",
    answers: [
      "Checked exceptions are checked at runtime, whereas unchecked exceptions are checked at compile-time.",
      "Unchecked exceptions are checked at compile-time, whereas checked exceptions are checked at runtime.",
      "Both checked and unchecked exceptions are checked at compile-time.",
      "Both checked and unchecked exceptions are checked at runtime.",
    ],
    correct: 1,
    explanations: [
      "Unchecked exceptions are checked at compile-time, whereas checked exceptions are checked at runtime.",
      "Checked exceptions must be caught or declared to be thrown at compile-time, while unchecked exceptions do not require this.",
      "Checked exceptions are not checked at runtime.",
      "Unchecked exceptions are not checked at runtime.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 35,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question:
      "Which keyword is used to define a block of code to be tested for exceptions in Java?",
    answers: ["try", "catch", "finally", "throw"],
    correct: 0,
    explanations: [
      "The 'try' keyword is used to define a block of code to be tested for exceptions in Java.",
      "'catch' is used to catch exceptions.",
      "'finally' is used to execute important code regardless of whether an exception occurs or not.",
      "'throw' is used to explicitly throw an exception within a method.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 30,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question:
      "What is the purpose of the 'finally' block in Java exception handling?",
    answers: [
      "To execute code only if an exception occurs.",
      "To catch exceptions.",
      "To specify the return type of a method.",
      "To execute code regardless of whether an exception occurs or not.",
    ],
    correct: 3,
    explanations: [
      "The 'finally' block in Java exception handling is used to execute code regardless of whether an exception occurs or not.",
      "It does not catch exceptions; it is used for cleanup or finalization code.",
      "It does not specify the return type of a method; it defines a block of code.",
      "It ensures certain code is always executed, even if an exception occurs or not.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 35,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question: "What is the purpose of the 'throws' keyword in Java?",
    answers: [
      "To catch exceptions.",
      "To specify the return type of a method.",
      "To declare that a method may raise a particular type of exception.",
      "To re-throw an exception within a method.",
    ],
    correct: 2,
    explanations: [
      "The 'throws' keyword in Java is used to declare that a method may raise a particular type of exception.",
      "It does not catch exceptions; it declares the exceptions that a method may throw.",
      "It does not specify the return type of a method; it declares the exceptions that the method may throw.",
      "It does not re-throw exceptions within a method; it declares the exceptions that may be thrown by the method.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 30,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question:
      "What happens if an exception occurs within the 'finally' block in Java?",
    answers: [
      "The program terminates.",
      "The exception is caught by the enclosing 'try-catch' block.",
      "The 'finally' block is not executed.",
      "The exception is ignored.",
    ],
    correct: 1,
    explanations: [
      "If an exception occurs within the 'finally' block in Java, it is caught by the enclosing 'try-catch' block.",
      "The program does not terminate immediately; it handles the exception.",
      "The 'finally' block is always executed, even if an exception occurs within it.",
      "The exception within the 'finally' block is not ignored.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 35,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question:
      "Which keyword is used to propagate an exception up the call stack in Java?",
    answers: ["try", "catch", "finally", "throw"],
    correct: 3,
    explanations: [
      "The 'throw' keyword is used to propagate an exception up the call stack in Java.",
      "'try' is used to start a block of code to be tested for exceptions.",
      "'catch' is used to handle exceptions.",
      "'finally' is used to execute important code such as closing database connections, whether an exception is thrown or not.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 30,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question: "What is the superclass of all exception types in Java?",
    answers: ["Exception", "Throwable", "RuntimeException", "Error"],
    correct: 1,
    explanations: [
      "The superclass of all exception types in Java is 'Throwable'.",
      "'Exception' is a subclass of 'Throwable' representing exceptional conditions that programs should catch.",
      "'RuntimeException' is a subclass of 'Exception' representing exceptions that occur due to programming errors.",
      "'Error' is a subclass of 'Throwable' representing serious problems that are typically beyond the control of the application.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 35,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question:
      "Write a Java code snippet to demonstrate the use of try-catch-finally blocks for error handling.",
    code: 'public class ErrorHandlingExample {\n    public static void main(String[] args) {\n        try {\n            // Code that may throw an exception\n            int result = 10 / 0; // Division by zero\n            System.out.println(result);\n        } catch (ArithmeticException e) {\n            // Handling arithmetic exception\n            System.out.println("Error: Division by zero");\n        } finally {\n            // Cleanup or finalization code\n            System.out.println("Finally block executed");\n        }\n    }\n}',
    answers: [
      'public class ErrorHandlingExample {\n    public static void main(String[] args) {\n        try {\n            // Code that may throw an exception\n            int result = 10 / 0; // Division by zero\n            System.out.println(result);\n        } catch (ArithmeticException e) {\n            // Handling arithmetic exception\n            System.out.println("Error: Division by zero");\n        } finally {\n            // Cleanup or finalization code\n            System.out.println("Finally block executed");\n        }\n    }\n}',
      'public class ErrorHandlingExample {\n    public static void main(String[] args) {\n        try {\n            // Code that may throw an exception\n            int result = 10 / 0; // Division by zero\n            System.out.println(result);\n        } catch (Exception e) {\n            // Handling all exceptions\n            System.out.println("Error occurred: " + e.getMessage());\n        }\n    }\n}',
      'public class ErrorHandlingExample {\n    public static void main(String[] args) {\n        try {\n            // Code that may throw an exception\n            int result = 10 / 0; // Division by zero\n            System.out.println(result);\n        } finally {\n            // Cleanup or finalization code\n            System.out.println("Finally block executed");\n        }\n    }\n}',
      "public class ErrorHandlingExample {\n    public static void main(String[] args) {\n        try {\n            // Code that may throw an exception\n            int result = 10 / 0; // Division by zero\n            System.out.println(result);\n        }\n    }\n}",
    ],
    correct: 0,
    explanations: [
      "The correct code snippet demonstrates the use of try-catch-finally blocks for error handling. It tries to perform a division operation that may throw an ArithmeticException due to division by zero. The exception is caught in the catch block, and the finally block is used for cleanup or finalization code.",
      "This code snippet catches all exceptions using a generic Exception class, which is not recommended for precise exception handling.",
      "This code snippet lacks a catch block to handle exceptions; it only has a finally block.",
      "This code snippet lacks both catch and finally blocks, making it incomplete for proper error handling.",
    ],
    bloomTaxonomy: "Applying",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "Explain with a Java code example how to create a custom exception class and throw it.",
    code: 'public class CustomException extends Exception {\n    public CustomException(String message) {\n        super(message);\n    }\n}\n\npublic class CustomExceptionExample {\n    public static void main(String[] args) {\n        try {\n            throw new CustomException("Custom exception thrown");\n        } catch (CustomException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}',
    answers: [
      'public class CustomException extends Exception {\n    public CustomException(String message) {\n        super(message);\n    }\n}\n\npublic class CustomExceptionExample {\n    public static void main(String[] args) {\n        try {\n            throw new CustomException("Custom exception thrown");\n        } catch (CustomException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}',
      'public class CustomException extends RuntimeException {\n    public CustomException(String message) {\n        super(message);\n    }\n}\n\npublic class CustomExceptionExample {\n    public static void main(String[] args) {\n        throw new CustomException("Custom exception thrown");\n    }\n}',
      'public class CustomException extends Exception {\n    public CustomException(String message) {\n        super(message);\n    }\n}\n\npublic class CustomExceptionExample {\n    public static void main(String[] args) {\n        try {\n            throw new CustomException("Custom exception thrown");\n        }\n    }\n}',
      'public class CustomException extends Exception {\n    public CustomException(String message) {\n        super(message);\n    }\n}\n\npublic class CustomExceptionExample {\n    public static void main(String[] args) {\n        throw new CustomException("Custom exception thrown");\n    }\n}',
    ],
    correct: 0,
    explanations: [
      "The correct code snippet demonstrates the creation of a custom exception class 'CustomException' that extends the Exception class. It is then thrown and caught in the main method of 'CustomExceptionExample' class.",
      "This code snippet creates a custom exception class but throws it without handling it, which is not recommended.",
      "This code snippet creates a custom exception class and tries to throw it but lacks a catch block to handle the exception.",
      "This code snippet lacks both the try and catch blocks, making it incomplete for proper error handling.",
    ],
    bloomTaxonomy: "Applying",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "Write a Java program that demonstrates the use of nested try-catch blocks for error handling.",
    code: 'public class NestedTryCatchExample {\n    public static void main(String[] args) {\n        try {\n            try {\n                int[] arr = new int[3];\n                arr[5] = 10; // ArrayIndexOutOfBoundsException\n            } catch (ArrayIndexOutOfBoundsException e) {\n                System.out.println("Inner catch block: " + e.getMessage());\n            }\n        } catch (Exception e) {\n            System.out.println("Outer catch block: " + e.getMessage());\n        }\n    }\n}',
    answers: [
      'public class NestedTryCatchExample {\n    public static void main(String[] args) {\n        try {\n            try {\n                int[] arr = new int[3];\n                arr[5] = 10; // ArrayIndexOutOfBoundsException\n            } catch (ArrayIndexOutOfBoundsException e) {\n                System.out.println("Inner catch block: " + e.getMessage());\n            }\n        } catch (Exception e) {\n            System.out.println("Outer catch block: " + e.getMessage());\n        }\n    }\n}',
      'public class NestedTryCatchExample {\n    public static void main(String[] args) {\n        try {\n            int[] arr = new int[3];\n            arr[5] = 10; // ArrayIndexOutOfBoundsException\n        } catch (ArrayIndexOutOfBoundsException e) {\n            System.out.println("Catch block: " + e.getMessage());\n        }\n    }\n}',
      'public class NestedTryCatchExample {\n    public static void main(String[] args) {\n        try {\n            try {\n                int[] arr = new int[3];\n                arr[5] = 10; // ArrayIndexOutOfBoundsException\n            }\n        } catch (ArrayIndexOutOfBoundsException e) {\n            System.out.println("Catch block: " + e.getMessage());\n        }\n    }\n}',
      'public class NestedTryCatchExample {\n    public static void main(String[] args) {\n        try {\n            try {\n                int[] arr = new int[3];\n                arr[5] = 10; // ArrayIndexOutOfBoundsException\n            }\n        } catch (Exception e) {\n            System.out.println("Catch block: " + e.getMessage());\n        }\n    }\n}',
    ],
    correct: 0,
    explanations: [
      "The correct code snippet demonstrates the use of nested try-catch blocks for error handling. It includes an inner try-catch block to handle an ArrayIndexOutOfBoundsException and an outer try-catch block to catch any other exceptions.",
      "This code snippet lacks nested try-catch blocks, making it incomplete for demonstrating the topic.",
      "This code snippet has incomplete try-catch blocks; it lacks necessary code.",
      "This code snippet has incomplete try-catch blocks; it lacks necessary code.",
    ],
    bloomTaxonomy: "Applying",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "Analyzing Java code, identify the potential error and suggest a correction:",
    code: 'public class ErrorAnalysis {\n    public static void main(String[] args) {\n        try {\n            int[] arr = new int[5];\n            arr[5] = 10; // ArrayIndexOutOfBoundsException\n        } catch (Exception e) {\n            System.out.println("Exception occurred: " + e.getMessage());\n        }\n    }\n}',
    answers: [
      "The potential error is the attempt to access an index outside the bounds of the array (ArrayIndexOutOfBoundsException). To correct it, adjust the index to a valid value within the array's bounds.",
      "The code has no errors.",
      "The potential error is the missing 'throws' declaration in the method signature. To correct it, add 'throws Exception' to the main method signature.",
      "The potential error is the missing 'try-catch' block around the array access. To correct it, enclose the array access with a try-catch block.",
    ],
    correct: 0,
    explanations: [
      "The correct answer identifies the potential error in the code, which is the attempt to access an index outside the bounds of the array, leading to an ArrayIndexOutOfBoundsException. The suggested correction is to adjust the index to a valid value within the array's bounds.",
      "This answer incorrectly states that the code has no errors, ignoring the ArrayIndexOutOfBoundsException.",
      "This answer incorrectly suggests that the potential error is the missing 'throws' declaration, which is unrelated to the ArrayIndexOutOfBoundsException.",
      "This answer incorrectly suggests adding a try-catch block, which is already present in the code.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "Analyze the following Java code and identify the potential issue:",
    code: 'public class ErrorAnalysis {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}',
    answers: [
      "The potential issue is division by zero in the 'divide' method, which can cause an ArithmeticException. To address this, add a check to ensure the divisor is not zero before performing the division.",
      "The code has no issues.",
      "The potential issue is the missing 'throws ArithmeticException' declaration in the 'divide' method signature. To address this, add 'throws ArithmeticException' to the method signature.",
      "The potential issue is the missing 'try-catch' block around the division operation in the 'divide' method. To address this, enclose the division operation with a try-catch block.",
    ],
    correct: 0,
    explanations: [
      "The correct answer identifies the potential issue in the code, which is division by zero in the 'divide' method, leading to an ArithmeticException. The suggested correction is to add a check to ensure the divisor is not zero before performing the division.",
      "This answer incorrectly states that the code has no issues, ignoring the potential division by zero.",
      "This answer incorrectly suggests that the potential issue is the missing 'throws ArithmeticException' declaration, which is unrelated to the division by zero.",
      "This answer incorrectly suggests adding a try-catch block, which is not necessary for handling division by zero.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "Analyzing the following Java code snippet, identify the potential error and suggest a correction:",
    code: 'public class ErrorAnalysis {\n    public static void main(String[] args) {\n        try {\n            int[] arr = new int[5];\n            arr[6] = 10; // ArrayIndexOutOfBoundsException\n        } catch (ArrayIndexOutOfBoundsException e) {\n            System.out.println("Array index out of bounds");\n        } catch (Exception e) {\n            System.out.println("Exception occurred: " + e.getMessage());\n        }\n    }\n}',
    answers: [
      "The potential error is the attempt to access an index outside the bounds of the array (ArrayIndexOutOfBoundsException). To correct it, adjust the index to a valid value within the array's bounds.",
      "The code has no errors.",
      "The potential error is the missing 'throws' declaration in the method signature. To correct it, add 'throws Exception' to the main method signature.",
      "The potential error is the missing 'try-catch' block around the array access. To correct it, enclose the array access with a try-catch block.",
    ],
    correct: 0,
    explanations: [
      "The correct answer identifies the potential error in the code, which is the attempt to access an index outside the bounds of the array, leading to an ArrayIndexOutOfBoundsException. The suggested correction is to adjust the index to a valid value within the array's bounds.",
      "This answer incorrectly states that the code has no errors, ignoring the ArrayIndexOutOfBoundsException.",
      "This answer incorrectly suggests that the potential error is the missing 'throws' declaration, which is unrelated to the ArrayIndexOutOfBoundsException.",
      "This answer incorrectly suggests adding a try-catch block, which is already present in the code.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question: "Analyze the given Java code and identify the potential error:",
    code: 'public class ErrorAnalysis {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (Exception e) {\n            System.out.println("Exception occurred: " + e.getMessage());\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        try {\n            return dividend / divisor;\n        } finally {\n            System.out.println("Finally block executed");\n        }\n    }\n}',
    answers: [
      "The potential error is division by zero in the 'divide' method, which can cause an ArithmeticException. However, the finally block will still be executed even if an exception occurs. To address this, consider handling the division by zero separately to prevent the finally block from executing in such cases.",
      "The code has no errors.",
      "The potential error is the missing 'throws ArithmeticException' declaration in the 'divide' method signature. To address this, add 'throws ArithmeticException' to the method signature.",
      "The potential error is the missing 'try-catch' block around the division operation in the 'divide' method. To address this, enclose the division operation with a try-catch block.",
    ],
    correct: 0,
    explanations: [
      "The correct answer identifies the potential error in the code, which is division by zero in the 'divide' method, leading to an ArithmeticException. However, the finally block will still be executed even if an exception occurs. The suggested correction is to consider handling the division by zero separately to prevent the finally block from executing in such cases.",
      "This answer incorrectly states that the code has no errors, ignoring the potential division by zero.",
      "This answer incorrectly suggests that the potential issue is the missing 'throws ArithmeticException' declaration, which is unrelated to the division by zero.",
      "This answer incorrectly suggests adding a try-catch block, which is not necessary for handling division by zero.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "Analyze the following Java code snippet and identify the potential error:",
    code: 'public class ErrorAnalysis {\n    public static void main(String[] args) {\n        try {\n            int[] arr = new int[5];\n            System.out.println(arr[6]); // ArrayIndexOutOfBoundsException\n        } catch (ArrayIndexOutOfBoundsException e) {\n            System.out.println("Array index out of bounds");\n        } catch (Exception e) {\n            System.out.println("Exception occurred: " + e.getMessage());\n        }\n    }\n}',
    answers: [
      "The potential error is the attempt to access an index outside the bounds of the array (ArrayIndexOutOfBoundsException). To correct it, adjust the index to a valid value within the array's bounds.",
      "The code has no errors.",
      "The potential error is the missing 'throws' declaration in the method signature. To correct it, add 'throws Exception' to the main method signature.",
      "The potential error is the missing 'try-catch' block around the array access. To correct it, enclose the array access with a try-catch block.",
    ],
    correct: 0,
    explanations: [
      "The correct answer identifies the potential error in the code, which is the attempt to access an index outside the bounds of the array, leading to an ArrayIndexOutOfBoundsException. The suggested correction is to adjust the index to a valid value within the array's bounds.",
      "This answer incorrectly states that the code has no errors, ignoring the ArrayIndexOutOfBoundsException.",
      "This answer incorrectly suggests that the potential error is the missing 'throws' declaration, which is unrelated to the ArrayIndexOutOfBoundsException.",
      "This answer incorrectly suggests adding a try-catch block, which is already present in the code.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question: "Analyze the given Java code and identify the potential error:",
    code: 'public class ErrorAnalysis {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        try {\n            return dividend / divisor;\n        } finally {\n            System.out.println("Finally block executed");\n        }\n    }\n}',
    answers: [
      "The potential error is division by zero in the 'divide' method, which can cause an ArithmeticException. However, the finally block will still be executed even if an exception occurs. To address this, consider handling the division by zero separately to prevent the finally block from executing in such cases.",
      "The code has no errors.",
      "The potential error is the missing 'throws ArithmeticException' declaration in the 'divide' method signature. To address this, add 'throws ArithmeticException' to the method signature.",
      "The potential error is the missing 'try-catch' block around the division operation in the 'divide' method. To address this, enclose the division operation with a try-catch block.",
    ],
    correct: 0,
    explanations: [
      "The correct answer identifies the potential error in the code, which is division by zero in the 'divide' method, leading to an ArithmeticException. However, the finally block will still be executed even if an exception occurs. The suggested correction is to consider handling the division by zero separately to prevent the finally block from executing in such cases.",
      "This answer incorrectly states that the code has no errors, ignoring the potential division by zero.",
      "This answer incorrectly suggests that the potential issue is the missing 'throws ArithmeticException' declaration, which is unrelated to the division by zero.",
      "This answer incorrectly suggests adding a try-catch block, which is not necessary for handling division by zero.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "Analyze the given Java code snippet and identify the potential error:",
    code: 'public class ErrorAnalysis {\n    public static void main(String[] args) {\n        try {\n            int[] arr = new int[5];\n            System.out.println(arr[6]); // ArrayIndexOutOfBoundsException\n        } catch (ArrayIndexOutOfBoundsException e) {\n            System.out.println("Array index out of bounds");\n        } catch (Exception e) {\n            System.out.println("Exception occurred: " + e.getMessage());\n        }\n    }\n}',
    answers: [
      "The potential error is the attempt to access an index outside the bounds of the array (ArrayIndexOutOfBoundsException). To correct it, adjust the index to a valid value within the array's bounds.",
      "The code has no errors.",
      "The potential error is the missing 'throws' declaration in the method signature. To correct it, add 'throws Exception' to the main method signature.",
      "The potential error is the missing 'try-catch' block around the array access. To correct it, enclose the array access with a try-catch block.",
    ],
    correct: 0,
    explanations: [
      "The correct answer identifies the potential error in the code, which is the attempt to access an index outside the bounds of the array, leading to an ArrayIndexOutOfBoundsException. The suggested correction is to adjust the index to a valid value within the array's bounds.",
      "This answer incorrectly states that the code has no errors, ignoring the ArrayIndexOutOfBoundsException.",
      "This answer incorrectly suggests that the potential error is the missing 'throws' declaration, which is unrelated to the ArrayIndexOutOfBoundsException.",
      "This answer incorrectly suggests adding a try-catch block, which is already present in the code.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question: "Analyze the given Java code and identify the potential error:",
    code: 'public class ErrorAnalysis {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        try {\n            return dividend / divisor;\n        } finally {\n            System.out.println("Finally block executed");\n        }\n    }\n}',
    answers: [
      "The potential error is division by zero in the 'divide' method, which can cause an ArithmeticException. However, the finally block will still be executed even if an exception occurs. To address this, consider handling the division by zero separately to prevent the finally block from executing in such cases.",
      "The code has no errors.",
      "The potential error is the missing 'throws ArithmeticException' declaration in the 'divide' method signature. To address this, add 'throws ArithmeticException' to the method signature.",
      "The potential error is the missing 'try-catch' block around the division operation in the 'divide' method. To address this, enclose the division operation with a try-catch block.",
    ],
    correct: 0,
    explanations: [
      "The correct answer identifies the potential error in the code, which is division by zero in the 'divide' method, leading to an ArithmeticException. However, the finally block will still be executed even if an exception occurs. The suggested correction is to consider handling the division by zero separately to prevent the finally block from executing in such cases.",
      "This answer incorrectly states that the code has no errors, ignoring the potential division by zero.",
      "This answer incorrectly suggests that the potential issue is the missing 'throws ArithmeticException' declaration, which is unrelated to the division by zero.",
      "This answer incorrectly suggests adding a try-catch block, which is not necessary for handling division by zero.",
    ],
    bloomTaxonomy: "Analyzing",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question: "Evaluate the given Java code and determine the output:",
    code: 'public class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 2); // Valid division\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Result: 5",
      "The output will be: Error: Division by zero",
      "The code will not compile due to a missing semicolon.",
      "The code will throw a NullPointerException.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be "Result: 5" since the division operation is valid and will result in 5.',
      "This answer incorrectly suggests that the output will be an error message due to division by zero, which is not the case in this code.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question: "Evaluate the given Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Error: Division by zero",
      "The output will be: Result: Infinity",
      "The code will throw a NullPointerException.",
      "The code will not compile due to a missing semicolon.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be an error message "Error: Division by zero" since the code attempts to perform division by zero, resulting in an ArithmeticException.',
      'This answer incorrectly suggests that the output will be "Result: Infinity", which is not the case for division by zero in Java.',
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question: "Evaluate the given Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (Exception e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Error: Division by zero",
      "The output will be: Result: Infinity",
      "The code will throw a NullPointerException.",
      "The code will not compile due to a missing semicolon.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be an error message "Error: Division by zero" since the code attempts to perform division by zero, resulting in an ArithmeticException, which is caught by the catch block for Exception.',
      'This answer incorrectly suggests that the output will be "Result: Infinity", which is not the case for division by zero in Java.',
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question: "Evaluate the given Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 2); // Valid division\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Result: 5",
      "The output will be: Error: Division by zero",
      "The code will not compile due to a missing semicolon.",
      "The code will throw a NullPointerException.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be "Result: 5" since the division operation is valid and will result in 5.',
      "This answer incorrectly suggests that the output will be an error message due to division by zero, which is not the case in this code.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question: "Evaluate the given Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Error: Division by zero",
      "The output will be: Result: Infinity",
      "The code will throw a NullPointerException.",
      "The code will not compile due to a missing semicolon.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be an error message "Error: Division by zero" since the code attempts to perform division by zero, resulting in an ArithmeticException.',
      'This answer incorrectly suggests that the output will be "Result: Infinity", which is not the case for division by zero in Java.',
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question: "Evaluate the given Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (Exception e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Error: Division by zero",
      "The output will be: Result: Infinity",
      "The code will throw a NullPointerException.",
      "The code will not compile due to a missing semicolon.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be an error message "Error: Division by zero" since the code attempts to perform division by zero, resulting in an ArithmeticException, which is caught by the catch block for Exception.',
      'This answer incorrectly suggests that the output will be "Result: Infinity", which is not the case for division by zero in Java.',
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question: "Evaluate the given Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 2); // Valid division\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Result: 5",
      "The output will be: Error: Division by zero",
      "The code will not compile due to a missing semicolon.",
      "The code will throw a NullPointerException.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be "Result: 5" since the division operation is valid and will result in 5.',
      "This answer incorrectly suggests that the output will be an error message due to division by zero, which is not the case in this code.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question: "Evaluate the given Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Error: Division by zero",
      "The output will be: Result: Infinity",
      "The code will throw a NullPointerException.",
      "The code will not compile due to a missing semicolon.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be an error message "Error: Division by zero" since the code attempts to perform division by zero, resulting in an ArithmeticException.',
      'This answer incorrectly suggests that the output will be "Result: Infinity", which is not the case for division by zero in Java.',
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question: "Evaluate the given Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (Exception e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Error: Division by zero",
      "The output will be: Result: Infinity",
      "The code will throw a NullPointerException.",
      "The code will not compile due to a missing semicolon.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be an error message "Error: Division by zero" since the code attempts to perform division by zero, resulting in an ArithmeticException, which is caught by the catch block for Exception.',
      'This answer incorrectly suggests that the output will be "Result: Infinity", which is not the case for division by zero in Java.',
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question: "Evaluate the given Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 2); // Valid division\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Result: 5",
      "The output will be: Error: Division by zero",
      "The code will not compile due to a missing semicolon.",
      "The code will throw a NullPointerException.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be "Result: 5" since the division operation is valid and will result in 5.',
      "This answer incorrectly suggests that the output will be an error message due to division by zero, which is not the case in this code.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question: "Evaluate the given Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Error: Division by zero",
      "The output will be: Result: Infinity",
      "The code will throw a NullPointerException.",
      "The code will not compile due to a missing semicolon.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be an error message "Error: Division by zero" since the code attempts to perform division by zero, resulting in an ArithmeticException.',
      'This answer incorrectly suggests that the output will be "Result: Infinity", which is not the case for division by zero in Java.',
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question: "Evaluate the given Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (Exception e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Error: Division by zero",
      "The output will be: Result: Infinity",
      "The code will throw a NullPointerException.",
      "The code will not compile due to a missing semicolon.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be an error message "Error: Division by zero" since the code attempts to perform division by zero, resulting in an ArithmeticException, which is caught by the catch block for Exception.',
      'This answer incorrectly suggests that the output will be "Result: Infinity", which is not the case for division by zero in Java.',
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question: "Evaluate the following Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 2); // Valid division\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Result: 5",
      "The output will be: Error: Division by zero",
      "The code will not compile due to a missing semicolon.",
      "The code will throw a NullPointerException.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be "Result: 5" since the division operation is valid and will result in 5.',
      "This answer incorrectly suggests that the output will be an error message due to division by zero, which is not the case in this code.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.9,
    question: "Evaluate the following Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Error: Division by zero",
      "The output will be: Result: Infinity",
      "The code will throw a NullPointerException.",
      "The code will not compile due to a missing semicolon.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be an error message "Error: Division by zero" since the code attempts to perform division by zero, resulting in an ArithmeticException.',
      'This answer incorrectly suggests that the output will be "Result: Infinity", which is not the case for division by zero in Java.',
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question: "Evaluate the following Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (Exception e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Error: Division by zero",
      "The output will be: Result: Infinity",
      "The code will throw a NullPointerException.",
      "The code will not compile due to a missing semicolon.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be an error message "Error: Division by zero" since the code attempts to perform division by zero, resulting in an ArithmeticException, which is caught by the catch block for Exception.',
      'This answer incorrectly suggests that the output will be "Result: Infinity", which is not the case for division by zero in Java.',
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question: "Evaluate the following Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Error: Division by zero",
      "The output will be: Result: Infinity",
      "The code will throw a NullPointerException.",
      "The code will not compile due to a missing semicolon.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be an error message "Error: Division by zero" since the code attempts to perform division by zero, resulting in an ArithmeticException.',
      'This answer incorrectly suggests that the output will be "Result: Infinity", which is not the case for division by zero in Java.',
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question: "Evaluate the following Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 2); // Valid division\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Result: 5",
      "The output will be: Error: Division by zero",
      "The code will not compile due to a missing semicolon.",
      "The code will throw a NullPointerException.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be "Result: 5" since the division operation is valid and will result in 5.',
      "This answer incorrectly suggests that the output will be an error message due to division by zero, which is not the case in this code.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.9,
    question: "Evaluate the following Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 0); // Division by zero\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Error: Division by zero",
      "The output will be: Result: Infinity",
      "The code will throw a NullPointerException.",
      "The code will not compile due to a missing semicolon.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be an error message "Error: Division by zero" since the code attempts to perform division by zero, resulting in an ArithmeticException.',
      'This answer incorrectly suggests that the output will be "Result: Infinity", which is not the case for division by zero in Java.',
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question: "Evaluate the following Java code and determine the output:",
    code: '\npublic class ErrorHandling {\n    public static void main(String[] args) {\n        try {\n            int result = divide(10, 2); // Valid division\n            System.out.println("Result: " + result);\n        } catch (ArithmeticException e) {\n            System.out.println("Error: Division by zero");\n        }\n    }\n\n    public static int divide(int dividend, int divisor) {\n        return dividend / divisor;\n    }\n}\n',
    answers: [
      "The output will be: Result: 5",
      "The output will be: Error: Division by zero",
      "The code will not compile due to a missing semicolon.",
      "The code will throw a NullPointerException.",
    ],
    correct: 0,
    explanations: [
      'The correct answer evaluates the code and determines the output to be "Result: 5" since the division operation is valid and will result in 5.',
      "This answer incorrectly suggests that the output will be an error message due to division by zero, which is not the case in this code.",
      "This answer incorrectly identifies a compilation error, which is not present in the code provided.",
      "This answer incorrectly predicts a NullPointerException, which is not related to the code provided.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question:
      "Create a Java program that handles a custom exception named 'CustomException' and throws it when a number entered by the user is negative.",
    code: "",
    answers: [
      "The code correctly handles the custom exception and throws it when a negative number is entered.",
      "The code throws an ArithmeticException instead of the custom exception for negative numbers.",
      "The code does not handle exceptions properly and crashes when a negative number is entered.",
      "The code does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that defines a custom exception 'CustomException' and throws it when a negative number is entered by the user.",
      "This answer incorrectly identifies a different type of exception being thrown instead of the custom exception specified in the question.",
      "This answer indicates that the code does not handle exceptions properly, leading to program crashes, which is incorrect for a well-designed error handling mechanism.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "Create a Java method named 'checkNumber' that takes an integer as input and throws a 'NegativeNumberException' if the input is negative.",
    code: "",
    answers: [
      "The 'checkNumber' method correctly throws a 'NegativeNumberException' when a negative number is passed as input.",
      "The 'checkNumber' method throws a NullPointerException instead of the 'NegativeNumberException'.",
      "The 'checkNumber' method does not throw any exception for negative numbers.",
      "The 'checkNumber' method throws an ArithmeticException instead of the 'NegativeNumberException'.",
    ],
    correct: 0,
    explanations: [
      "The correct answer defines a Java method 'checkNumber' that properly throws a 'NegativeNumberException' when a negative number is passed as input.",
      "This answer incorrectly suggests a NullPointerException being thrown instead of the specified 'NegativeNumberException'.",
      "This answer indicates that the method does not throw any exception for negative numbers, which is incorrect based on the question requirements.",
      "This answer incorrectly identifies a different type of exception being thrown instead of the specified 'NegativeNumberException'.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.9,
    question:
      "Create a Java program that reads input from the user and handles NumberFormatException gracefully by displaying an appropriate error message.",
    code: "",
    answers: [
      "The program correctly handles NumberFormatException by displaying an appropriate error message.",
      "The program crashes when NumberFormatException occurs without displaying any error message.",
      "The program throws a NullPointerException instead of handling NumberFormatException.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that reads input from the user and gracefully handles NumberFormatException by displaying an appropriate error message.",
      "This answer indicates that the program crashes when NumberFormatException occurs without displaying any error message, which is incorrect for a well-handled error scenario.",
      "This answer incorrectly suggests that the program throws a NullPointerException instead of properly handling NumberFormatException.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question:
      "Create a Java program that defines a custom exception 'InvalidInputException' and throws it when the user enters a non-numeric input.",
    code: "",
    answers: [
      "The program correctly defines the custom exception 'InvalidInputException' and throws it for non-numeric inputs.",
      "The program throws a NumberFormatException instead of the custom exception for non-numeric inputs.",
      "The program does not handle non-numeric inputs and crashes.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly defines a custom exception 'InvalidInputException' and throws it when the user enters a non-numeric input.",
      "This answer incorrectly suggests that the program throws a NumberFormatException instead of the specified custom exception for non-numeric inputs.",
      "This answer indicates that the program does not handle non-numeric inputs and crashes, which is incorrect for a well-designed error handling mechanism.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "Create a Java method named 'validateInput' that takes a string as input and throws a 'InvalidInputException' if the input contains any non-alphanumeric characters.",
    code: "",
    answers: [
      "The 'validateInput' method correctly throws a 'InvalidInputException' for input containing non-alphanumeric characters.",
      "The 'validateInput' method throws a NullPointerException instead of the 'InvalidInputException'.",
      "The 'validateInput' method does not throw any exception for non-alphanumeric inputs.",
      "The 'validateInput' method throws a NumberFormatException instead of the 'InvalidInputException'.",
    ],
    correct: 0,
    explanations: [
      "The correct answer defines a Java method 'validateInput' that properly throws a 'InvalidInputException' for input containing non-alphanumeric characters.",
      "This answer incorrectly suggests a NullPointerException being thrown instead of the specified 'InvalidInputException'.",
      "This answer indicates that the method does not throw any exception for inputs containing non-alphanumeric characters, which is incorrect based on the question requirements.",
      "This answer incorrectly identifies a different type of exception being thrown instead of the specified 'InvalidInputException'.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.9,
    question:
      "Create a Java program that handles multiple exceptions including FileNotFoundException and IOException by providing appropriate error messages.",
    code: "",
    answers: [
      "The program correctly handles FileNotFoundException and IOException by providing appropriate error messages.",
      "The program crashes when FileNotFoundException or IOException occurs without displaying any error messages.",
      "The program throws a NullPointerException instead of handling FileNotFoundException and IOException.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly handles multiple exceptions including FileNotFoundException and IOException by providing appropriate error messages.",
      "This answer indicates that the program crashes when FileNotFoundException or IOException occurs without displaying any error messages, which is incorrect for a well-handled error scenario.",
      "This answer incorrectly suggests that the program throws a NullPointerException instead of properly handling FileNotFoundException and IOException.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question:
      "Create a Java program that defines a custom exception 'FileReadException' and throws it when a file read operation fails.",
    code: "",
    answers: [
      "The program correctly defines the custom exception 'FileReadException' and throws it for file read failures.",
      "The program throws a FileNotFoundException instead of the custom exception for file read failures.",
      "The program does not handle file read failures and crashes.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly defines a custom exception 'FileReadException' and throws it when a file read operation fails.",
      "This answer incorrectly suggests that the program throws a FileNotFoundException instead of the specified custom exception for file read failures.",
      "This answer indicates that the program does not handle file read failures and crashes, which is incorrect for a well-designed error handling mechanism.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "Create a Java method named 'parseInput' that takes a string as input and throws a 'InvalidFormatException' if the input cannot be parsed to an integer.",
    code: "",
    answers: [
      "The 'parseInput' method correctly throws a 'InvalidFormatException' for input that cannot be parsed to an integer.",
      "The 'parseInput' method throws a NullPointerException instead of the 'InvalidFormatException'.",
      "The 'parseInput' method does not throw any exception for invalid input.",
      "The 'parseInput' method throws a NumberFormatException instead of the 'InvalidFormatException'.",
    ],
    correct: 0,
    explanations: [
      "The correct answer defines a Java method 'parseInput' that properly throws a 'InvalidFormatException' for input that cannot be parsed to an integer.",
      "This answer incorrectly suggests a NullPointerException being thrown instead of the specified 'InvalidFormatException'.",
      "This answer indicates that the method does not throw any exception for invalid input, which is incorrect based on the question requirements.",
      "This answer incorrectly identifies a different type of exception being thrown instead of the specified 'InvalidFormatException'.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.9,
    question:
      "Create a Java program that handles ArrayIndexOutOfBoundsException by gracefully terminating the program with an appropriate error message.",
    code: "",
    answers: [
      "The program correctly handles ArrayIndexOutOfBoundsException by gracefully terminating with an appropriate error message.",
      "The program crashes when ArrayIndexOutOfBoundsException occurs without displaying any error message.",
      "The program throws a NullPointerException instead of handling ArrayIndexOutOfBoundsException.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly handles ArrayIndexOutOfBoundsException by gracefully terminating with an appropriate error message.",
      "This answer indicates that the program crashes when ArrayIndexOutOfBoundsException occurs without displaying any error message, which is incorrect for a well-handled error scenario.",
      "This answer incorrectly suggests that the program throws a NullPointerException instead of properly handling ArrayIndexOutOfBoundsException.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question:
      "Create a Java program that defines a custom exception 'DataFormatException' and throws it when the format of input data is invalid.",
    code: "",
    answers: [
      "The program correctly defines the custom exception 'DataFormatException' and throws it for invalid input data formats.",
      "The program throws a NumberFormatException instead of the custom exception for invalid input data formats.",
      "The program does not handle invalid input data formats and crashes.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly defines a custom exception 'DataFormatException' and throws it when the format of input data is invalid.",
      "This answer incorrectly suggests that the program throws a NumberFormatException instead of the specified custom exception for invalid input data formats.",
      "This answer indicates that the program does not handle invalid input data formats and crashes, which is incorrect for a well-designed error handling mechanism.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "Create a Java method named 'validateEmail' that takes an email address as input and throws an 'InvalidEmailException' if the email format is incorrect.",
    code: "",
    answers: [
      "The 'validateEmail' method correctly throws an 'InvalidEmailException' for incorrect email formats.",
      "The 'validateEmail' method throws a NullPointerException instead of the 'InvalidEmailException'.",
      "The 'validateEmail' method does not throw any exception for incorrect email formats.",
      "The 'validateEmail' method throws a NumberFormatException instead of the 'InvalidEmailException'.",
    ],
    correct: 0,
    explanations: [
      "The correct answer defines a Java method 'validateEmail' that properly throws an 'InvalidEmailException' for incorrect email formats.",
      "This answer incorrectly suggests a NullPointerException being thrown instead of the specified 'InvalidEmailException'.",
      "This answer indicates that the method does not throw any exception for incorrect email formats, which is incorrect based on the question requirements.",
      "This answer incorrectly identifies a different type of exception being thrown instead of the specified 'InvalidEmailException'.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question:
      "Create a Java program that defines a custom exception 'InvalidPasswordException' and throws it when the length of the password entered by the user is less than 8 characters.",
    code: "",
    answers: [
      "The program correctly defines the custom exception 'InvalidPasswordException' and throws it for passwords with less than 8 characters.",
      "The program throws a NullPointerException instead of the custom exception for passwords with less than 8 characters.",
      "The program does not handle passwords with less than 8 characters and crashes.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly defines a custom exception 'InvalidPasswordException' and throws it when the length of the password entered by the user is less than 8 characters.",
      "This answer incorrectly suggests that the program throws a NullPointerException instead of the specified custom exception for passwords with less than 8 characters.",
      "This answer indicates that the program does not handle passwords with less than 8 characters and crashes, which is incorrect for a well-designed error handling mechanism.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.9,
    question:
      "Create a Java program that handles NullPointerException by providing a user-friendly error message and terminating gracefully.",
    code: "",
    answers: [
      "The program correctly handles NullPointerException by providing a user-friendly error message and terminating gracefully.",
      "The program crashes when NullPointerException occurs without displaying any error message.",
      "The program throws a NumberFormatException instead of handling NullPointerException.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly handles NullPointerException by providing a user-friendly error message and terminating gracefully.",
      "This answer indicates that the program crashes when NullPointerException occurs without displaying any error message, which is incorrect for a well-handled error scenario.",
      "This answer incorrectly suggests that the program throws a NumberFormatException instead of properly handling NullPointerException.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "Create a Java method named 'checkUsername' that takes a username as input and throws an 'InvalidUsernameException' if the username contains any special characters.",
    code: "",
    answers: [
      "The 'checkUsername' method correctly throws an 'InvalidUsernameException' for usernames containing special characters.",
      "The 'checkUsername' method throws a NullPointerException instead of the 'InvalidUsernameException'.",
      "The 'checkUsername' method does not throw any exception for usernames containing special characters.",
      "The 'checkUsername' method throws a NumberFormatException instead of the 'InvalidUsernameException'.",
    ],
    correct: 0,
    explanations: [
      "The correct answer defines a Java method 'checkUsername' that properly throws an 'InvalidUsernameException' for usernames containing special characters.",
      "This answer incorrectly suggests a NullPointerException being thrown instead of the specified 'InvalidUsernameException'.",
      "This answer indicates that the method does not throw any exception for usernames containing special characters, which is incorrect based on the question requirements.",
      "This answer incorrectly identifies a different type of exception being thrown instead of the specified 'InvalidUsernameException'.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question:
      "Create a Java program that defines a custom exception 'InvalidInputException' and throws it when the user enters a negative number.",
    code: "",
    answers: [
      "The program correctly defines the custom exception 'InvalidInputException' and throws it for negative numbers entered by the user.",
      "The program throws a NumberFormatException instead of the custom exception for negative numbers entered by the user.",
      "The program does not handle negative numbers entered by the user and crashes.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly defines a custom exception 'InvalidInputException' and throws it when the user enters a negative number.",
      "This answer incorrectly suggests that the program throws a NumberFormatException instead of the specified custom exception for negative numbers entered by the user.",
      "This answer indicates that the program does not handle negative numbers entered by the user and crashes, which is incorrect for a well-designed error handling mechanism.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.9,
    question:
      "Create a Java program that handles ArrayIndexOutOfBoundsException by providing an appropriate error message and gracefully terminating.",
    code: "",
    answers: [
      "The program correctly handles ArrayIndexOutOfBoundsException by providing an appropriate error message and terminating gracefully.",
      "The program crashes when ArrayIndexOutOfBoundsException occurs without displaying any error message.",
      "The program throws a NullPointerException instead of handling ArrayIndexOutOfBoundsException.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly handles ArrayIndexOutOfBoundsException by providing an appropriate error message and terminating gracefully.",
      "This answer indicates that the program crashes when ArrayIndexOutOfBoundsException occurs without displaying any error message, which is incorrect for a well-handled error scenario.",
      "This answer incorrectly suggests that the program throws a NullPointerException instead of properly handling ArrayIndexOutOfBoundsException.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "Create a Java method named 'validatePassword' that takes a password as input and throws an 'InvalidPasswordException' if the password is weak (less than 8 characters).",
    code: "",
    answers: [
      "The 'validatePassword' method correctly throws an 'InvalidPasswordException' for weak passwords.",
      "The 'validatePassword' method throws a NullPointerException instead of the 'InvalidPasswordException'.",
      "The 'validatePassword' method does not throw any exception for weak passwords.",
      "The 'validatePassword' method throws a NumberFormatException instead of the 'InvalidPasswordException'.",
    ],
    correct: 0,
    explanations: [
      "The correct answer defines a Java method 'validatePassword' that properly throws an 'InvalidPasswordException' for weak passwords.",
      "This answer incorrectly suggests a NullPointerException being thrown instead of the specified 'InvalidPasswordException'.",
      "This answer indicates that the method does not throw any exception for weak passwords, which is incorrect based on the question requirements.",
      "This answer incorrectly identifies a different type of exception being thrown instead of the specified 'InvalidPasswordException'.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.9,
    question:
      "Create a Java program that handles FileNotFoundException by providing an appropriate error message and gracefully terminating.",
    code: "",
    answers: [
      "The program correctly handles FileNotFoundException by providing an appropriate error message and terminating gracefully.",
      "The program crashes when FileNotFoundException occurs without displaying any error message.",
      "The program throws a NullPointerException instead of handling FileNotFoundException.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly handles FileNotFoundException by providing an appropriate error message and terminating gracefully.",
      "This answer indicates that the program crashes when FileNotFoundException occurs without displaying any error message, which is incorrect for a well-handled error scenario.",
      "This answer incorrectly suggests that the program throws a NullPointerException instead of properly handling FileNotFoundException.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "Create a Java method named 'checkInput' that takes an integer as input and throws a 'NegativeNumberException' if the input is negative.",
    code: "",
    answers: [
      "The 'checkInput' method correctly throws a 'NegativeNumberException' when a negative number is passed as input.",
      "The 'checkInput' method throws a NullPointerException instead of the 'NegativeNumberException' for negative numbers.",
      "The 'checkInput' method does not throw any exception for negative numbers.",
      "The 'checkInput' method throws an ArithmeticException instead of the 'NegativeNumberException' for negative numbers.",
    ],
    correct: 0,
    explanations: [
      "The correct answer defines a Java method 'checkInput' that properly throws a 'NegativeNumberException' when a negative number is passed as input.",
      "This answer incorrectly suggests a NullPointerException being thrown instead of the specified 'NegativeNumberException' for negative numbers.",
      "This answer indicates that the method does not throw any exception for negative numbers, which is incorrect based on the question requirements.",
      "This answer incorrectly identifies a different type of exception being thrown instead of the specified 'NegativeNumberException' for negative numbers.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question:
      "Create a Java program that handles NullPointerException by printing 'Null Pointer Exception Occurred' and terminating gracefully.",
    code: "",
    answers: [
      "The program correctly handles NullPointerException by printing 'Null Pointer Exception Occurred' and terminating gracefully.",
      "The program crashes when NullPointerException occurs without displaying any message.",
      "The program throws a NumberFormatException instead of handling NullPointerException.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly handles NullPointerException by printing 'Null Pointer Exception Occurred' and terminating gracefully.",
      "This answer indicates that the program crashes when NullPointerException occurs without displaying any message, which is incorrect for a well-handled error scenario.",
      "This answer incorrectly suggests that the program throws a NumberFormatException instead of properly handling NullPointerException.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question:
      "Create a Java program that defines a custom exception 'InvalidInputException' and throws it when the user enters a non-numeric input.",
    code: "",
    answers: [
      "The program correctly defines the custom exception 'InvalidInputException' and throws it for non-numeric inputs.",
      "The program throws a NumberFormatException instead of the custom exception for non-numeric inputs.",
      "The program does not handle non-numeric inputs and crashes.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly defines a custom exception 'InvalidInputException' and throws it when the user enters a non-numeric input.",
      "This answer incorrectly suggests that the program throws a NumberFormatException instead of the specified custom exception for non-numeric inputs.",
      "This answer indicates that the program does not handle non-numeric inputs and crashes, which is incorrect for a well-designed error handling mechanism.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "Create a Java method named 'validateAge' that takes an integer as input and throws an 'InvalidAgeException' if the age is negative.",
    code: "",
    answers: [
      "The 'validateAge' method correctly throws an 'InvalidAgeException' when a negative age is passed as input.",
      "The 'validateAge' method throws a NullPointerException instead of the 'InvalidAgeException' for negative ages.",
      "The 'validateAge' method does not throw any exception for negative ages.",
      "The 'validateAge' method throws an ArithmeticException instead of the 'InvalidAgeException' for negative ages.",
    ],
    correct: 0,
    explanations: [
      "The correct answer defines a Java method 'validateAge' that properly throws an 'InvalidAgeException' when a negative age is passed as input.",
      "This answer incorrectly suggests a NullPointerException being thrown instead of the specified 'InvalidAgeException' for negative ages.",
      "This answer indicates that the method does not throw any exception for negative ages, which is incorrect based on the question requirements.",
      "This answer incorrectly identifies a different type of exception being thrown instead of the specified 'InvalidAgeException' for negative ages.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question:
      "Create a Java program that handles ArithmeticException by printing 'Arithmetic Exception Occurred' and terminating gracefully.",
    code: "",
    answers: [
      "The program correctly handles ArithmeticException by printing 'Arithmetic Exception Occurred' and terminating gracefully.",
      "The program crashes when ArithmeticException occurs without displaying any message.",
      "The program throws a NullPointerException instead of handling ArithmeticException.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly handles ArithmeticException by printing 'Arithmetic Exception Occurred' and terminating gracefully.",
      "This answer indicates that the program crashes when ArithmeticException occurs without displaying any message, which is incorrect for a well-handled error scenario.",
      "This answer incorrectly suggests that the program throws a NullPointerException instead of properly handling ArithmeticException.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question:
      "Create a Java program that defines a custom exception 'InvalidInputException' and throws it when the user enters a string longer than 10 characters.",
    code: "",
    answers: [
      "The program correctly defines the custom exception 'InvalidInputException' and throws it for strings longer than 10 characters.",
      "The program throws a NumberFormatException instead of the custom exception for strings longer than 10 characters.",
      "The program does not handle strings longer than 10 characters and crashes.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly defines a custom exception 'InvalidInputException' and throws it when the user enters a string longer than 10 characters.",
      "This answer incorrectly suggests that the program throws a NumberFormatException instead of the specified custom exception for strings longer than 10 characters.",
      "This answer indicates that the program does not handle strings longer than 10 characters and crashes, which is incorrect for a well-designed error handling mechanism.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "Create a Java method named 'validateUsername' that takes a string as input and throws an 'InvalidUsernameException' if the username is empty.",
    code: "",
    answers: [
      "The 'validateUsername' method correctly throws an 'InvalidUsernameException' when an empty username is passed as input.",
      "The 'validateUsername' method throws a NullPointerException instead of the 'InvalidUsernameException' for empty usernames.",
      "The 'validateUsername' method does not throw any exception for empty usernames.",
      "The 'validateUsername' method throws an IllegalArgumentException instead of the 'InvalidUsernameException' for empty usernames.",
    ],
    correct: 0,
    explanations: [
      "The correct answer defines a Java method 'validateUsername' that properly throws an 'InvalidUsernameException' when an empty username is passed as input.",
      "This answer incorrectly suggests a NullPointerException being thrown instead of the specified 'InvalidUsernameException' for empty usernames.",
      "This answer indicates that the method does not throw any exception for empty usernames, which is incorrect based on the question requirements.",
      "This answer incorrectly identifies a different type of exception being thrown instead of the specified 'InvalidUsernameException' for empty usernames.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question:
      "Create a Java program that handles FileNotFoundException by printing 'File Not Found Exception Occurred' and terminating gracefully.",
    code: "",
    answers: [
      "The program correctly handles FileNotFoundException by printing 'File Not Found Exception Occurred' and terminating gracefully.",
      "The program crashes when FileNotFoundException occurs without displaying any message.",
      "The program throws a NullPointerException instead of handling FileNotFoundException.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly handles FileNotFoundException by printing 'File Not Found Exception Occurred' and terminating gracefully.",
      "This answer indicates that the program crashes when FileNotFoundException occurs without displaying any message, which is incorrect for a well-handled error scenario.",
      "This answer incorrectly suggests that the program throws a NullPointerException instead of properly handling FileNotFoundException.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question:
      "Create a Java program that defines a custom exception 'InvalidInputException' and throws it when the user enters a negative number.",
    code: "",
    answers: [
      "The program correctly defines the custom exception 'InvalidInputException' and throws it for negative numbers entered by the user.",
      "The program throws a NumberFormatException instead of the custom exception for negative numbers entered by the user.",
      "The program does not handle negative numbers entered by the user and crashes.",
      "The program does not compile due to syntax errors.",
    ],
    correct: 0,
    explanations: [
      "The correct answer creates a Java program that properly defines a custom exception 'InvalidInputException' and throws it when the user enters a negative number.",
      "This answer incorrectly suggests that the program throws a NumberFormatException instead of the specified custom exception for negative numbers entered by the user.",
      "This answer indicates that the program does not handle negative numbers entered by the user and crashes, which is incorrect for a well-designed error handling mechanism.",
      "This answer suggests that the code does not compile due to syntax errors, which may not necessarily be the case if the implementation is correct.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "Create a Java method named 'validatePhoneNumber' that takes a string as input and throws an 'InvalidPhoneNumberException' if the phone number format is incorrect.",
    code: "",
    answers: [
      "The 'validatePhoneNumber' method correctly throws an 'InvalidPhoneNumberException' for incorrect phone number formats.",
      "The 'validatePhoneNumber' method throws a NullPointerException instead of the 'InvalidPhoneNumberException'.",
      "The 'validatePhoneNumber' method does not throw any exception for incorrect phone number formats.",
      "The 'validatePhoneNumber' method throws a NumberFormatException instead of the 'InvalidPhoneNumberException'.",
    ],
    correct: 0,
    explanations: [
      "The correct answer defines a Java method 'validatePhoneNumber' that properly throws an 'InvalidPhoneNumberException' for incorrect phone number formats.",
      "This answer incorrectly suggests a NullPointerException being thrown instead of the specified 'InvalidPhoneNumberException'.",
      "This answer indicates that the method does not throw any exception for incorrect phone number formats, which is incorrect based on the question requirements.",
      "This answer incorrectly identifies a different type of exception being thrown instead of the specified 'InvalidPhoneNumberException'.",
    ],
    bloomTaxonomy: "Creating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question:
      "In Java, which keyword is used to explicitly throw an exception?",

    answers: ["throw", "try", "catch", "finally"],
    correct: 0,
    explanations: [
      "The 'throw' keyword is used to explicitly throw an exception in Java.",
      "Incorrect: 'try' is used to start a block of code that will be tested for exceptions.",
      "Incorrect: 'catch' is used to catch exceptions that are thrown by the 'try' block.",
      "Incorrect: 'finally' is used to create a block of code that will be executed after a 'try' block, regardless of whether an exception is thrown or not.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question:
      "What is the purpose of the 'finally' block in Java exception handling?",

    answers: [
      "To define a block of code that will be executed after a 'try' block, regardless of whether an exception is thrown or not.",
      "To catch exceptions that are thrown by the 'try' block.",
      "To define a block of code that will be executed only if an exception is thrown by the 'try' block.",
      "To explicitly throw an exception.",
    ],
    correct: 0,
    explanations: [
      "The purpose of the 'finally' block is to define a block of code that will be executed after a 'try' block, regardless of whether an exception is thrown or not.",
      "Incorrect: 'catch' is used to catch exceptions that are thrown by the 'try' block.",
      "Incorrect: This describes the behavior of a 'catch' block, not 'finally'.",
      "Incorrect: The 'throw' keyword is used to explicitly throw an exception.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question: "Which of the following is a checked exception in Java?",

    answers: [
      "IOException",
      "NullPointerException",
      "ArrayIndexOutOfBoundsException",
      "NumberFormatException",
    ],
    correct: 0,
    explanations: [
      "IOException is a checked exception in Java, meaning it must be either caught or declared to be thrown.",
      "Incorrect: NullPointerException is an unchecked exception.",
      "Incorrect: ArrayIndexOutOfBoundsException is an unchecked exception.",
      "Incorrect: NumberFormatException is an unchecked exception.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      'What does the following Java code snippet do?\ntry {\n    // Code that may throw exceptions\n}\ncatch (Exception e) {\n    System.out.println("An error occurred: " + e.getMessage());\n}\nfinally {\n    System.out.println("Finally block executed.");\n}',

    answers: [
      "Attempts to execute the code within the 'try' block, catches any exceptions thrown, prints an error message, and then executes the code within the 'finally' block.",
      "Attempts to execute the code within the 'try' block, catches any exceptions thrown, and then executes the code within the 'finally' block.",
      "Executes the code within the 'finally' block regardless of whether exceptions were thrown or not.",
      "Throws an exception regardless of the execution of the 'try' block.",
    ],
    correct: 0,
    explanations: [
      "The code attempts to execute the code within the 'try' block, catches any exceptions thrown, prints an error message, and then executes the code within the 'finally' block.",
      "Incorrect: This answer doesn't include printing the error message.",
      "Incorrect: This answer doesn't handle exceptions caught by the 'catch' block.",
      "Incorrect: The code does not throw an exception itself, it only catches and handles exceptions.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "What is the purpose of the 'throws' keyword in Java method declaration?",

    answers: [
      "To declare that the method may throw certain exceptions and to specify them.",
      "To catch exceptions thrown by the method.",
      "To specify that the method must be surrounded by a 'try-catch' block.",
      "To create a custom exception.",
    ],
    correct: 0,
    explanations: [
      "The 'throws' keyword in Java method declaration is used to declare that the method may throw certain exceptions and to specify them.",
      "Incorrect: 'try-catch' blocks are used to catch exceptions thrown by the method.",
      "Incorrect: The 'throws' keyword does not specify that the method must be surrounded by a 'try-catch' block, but rather that calling code must handle the specified exceptions.",
      "Incorrect: The 'throws' keyword does not create custom exceptions, it only specifies which exceptions may be thrown by the method.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question: "In Java, what is an unchecked exception?",

    answers: [
      "An exception that does not need to be explicitly caught or declared in a method signature.",
      "An exception that must be explicitly caught or declared in a method signature.",
      "An exception that is thrown by the Java Virtual Machine (JVM).",
      "An exception that occurs only during compile-time.",
    ],
    correct: 0,
    explanations: [
      "An unchecked exception in Java is an exception that does not need to be explicitly caught or declared in a method signature.",
      "Incorrect: Checked exceptions must be explicitly caught or declared in a method signature.",
      "Incorrect: Checked exceptions are exceptions that occur during runtime, not necessarily thrown by the JVM.",
      "Incorrect: Compile-time exceptions are not necessarily unchecked exceptions; they can be checked exceptions.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question:
      "Which of the following statements about Java exceptions is true?",

    answers: [
      "Unchecked exceptions are subclasses of RuntimeException.",
      "Checked exceptions are subclasses of Error.",
      "All exceptions in Java are checked exceptions.",
      "The 'throws' keyword is used to catch exceptions.",
    ],
    correct: 0,
    explanations: [
      "Unchecked exceptions in Java are subclasses of RuntimeException.",
      "Incorrect: Checked exceptions are not subclasses of Error; they are a separate category of exceptions.",
      "Incorrect: All exceptions in Java are not checked exceptions; there are also unchecked exceptions.",
      "Incorrect: The 'throws' keyword is used to declare that a method may throw certain exceptions, not to catch exceptions.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question:
      "Which of the following statements about Java exception handling is true?",

    answers: [
      "Exception handling in Java helps manage runtime errors and abnormal conditions.",
      "Java only supports checked exceptions.",
      "The 'finally' block is required in every try-catch statement.",
      "Java does not allow custom exceptions.",
    ],
    correct: 0,
    explanations: [
      "Exception handling in Java helps manage runtime errors and abnormal conditions.",
      "Incorrect: Java supports both checked and unchecked exceptions.",
      "Incorrect: The 'finally' block is not required in every try-catch statement, though it's often used for cleanup operations.",
      "Incorrect: Java allows custom exceptions to be defined.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "What happens if an exception is thrown in the 'catch' block of a Java try-catch statement?",

    answers: [
      "The exception can be caught by an enclosing try-catch statement.",
      "The program terminates.",
      "The exception is silently ignored.",
      "The 'finally' block is executed immediately.",
    ],
    correct: 0,
    explanations: [
      "An exception thrown in the 'catch' block of a Java try-catch statement can be caught by an enclosing try-catch statement.",
      "Incorrect: Unless there's an enclosing try-catch statement, the program does not necessarily terminate.",
      "Incorrect: Exceptions in the 'catch' block are not silently ignored; they can be caught by enclosing try-catch statements.",
      "Incorrect: The 'finally' block is executed after the 'try' block, whether or not an exception is thrown.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.2,
    question:
      "What does the 'getMessage()' method of the Exception class in Java return?",

    answers: [
      "The error message associated with the exception.",
      "The name of the exception class.",
      "The stack trace of the exception.",
      "The error code associated with the exception.",
    ],
    correct: 0,
    explanations: [
      "The 'getMessage()' method of the Exception class in Java returns the error message associated with the exception.",
      "Incorrect: This describes the 'getClass().getName()' method, which returns the name of the exception class.",
      "Incorrect: This describes the 'printStackTrace()' method, which prints the stack trace of the exception.",
      "Incorrect: There is no standard 'errorCode' associated with exceptions in Java.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question:
      'What is the output of the following Java code?\ntry {\n    int[] arr = new int[5];\n    arr[10] = 7;\n}\ncatch (ArrayIndexOutOfBoundsException e) {\n    System.out.println("Array index out of bounds.");\n}\nfinally {\n    System.out.println("Finally block executed.");\n}',

    answers: [
      "Array index out of bounds.\nFinally block executed.",
      "Array index out of bounds.",
      "Finally block executed.",
      "ArrayIndexOutOfBoundsException",
    ],
    correct: 0,
    explanations: [
      "The output of the code is 'Array index out of bounds.' followed by 'Finally block executed.'",
      "Incorrect: This answer does not include the 'Finally block executed.' message.",
      "Incorrect: This answer does not include the 'Array index out of bounds.' message.",
      "Incorrect: The output is not the exception itself, but the message printed by the catch block.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question: "Which of the following is NOT a standard Java exception?",

    answers: [
      "InvalidParameterException",
      "FileNotFoundException",
      "NumberFormatException",
      "NullPointerException",
    ],
    correct: 0,
    explanations: [
      "InvalidParameterException is not a standard Java exception.",
      "Incorrect: FileNotFoundException, NumberFormatException, and NullPointerException are all standard Java exceptions.",
      "Incorrect: FileNotFoundException is a standard Java exception.",
      "Incorrect: NumberFormatException is a standard Java exception.",
      "Incorrect: NullPointerException is a standard Java exception.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question: "What is the primary purpose of using try-catch blocks in Java?",

    answers: [
      "To handle exceptions that may occur during the execution of code.",
      "To declare that a method may throw certain exceptions.",
      "To explicitly throw an exception.",
      "To catch errors thrown by the JVM.",
    ],
    correct: 0,
    explanations: [
      "The primary purpose of using try-catch blocks in Java is to handle exceptions that may occur during the execution of code.",
      "Incorrect: The 'throws' keyword is used to declare that a method may throw certain exceptions.",
      "Incorrect: The 'throw' keyword is used to explicitly throw an exception.",
      "Incorrect: Errors thrown by the JVM are typically caught by higher-level exception handlers or not caught at all.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question:
      "What does the 'printStackTrace()' method of the Exception class in Java do?",

    answers: [
      "Prints the stack trace of the exception to the standard error stream.",
      "Prints the error message associated with the exception to the standard output stream.",
      "Prints the name of the exception class to the standard output stream.",
      "Prints the error code associated with the exception to the standard error stream.",
    ],
    correct: 0,
    explanations: [
      "The 'printStackTrace()' method of the Exception class in Java prints the stack trace of the exception to the standard error stream.",
      "Incorrect: This describes the 'getMessage()' method, which returns the error message associated with the exception.",
      "Incorrect: This describes the 'getClass().getName()' method, which returns the name of the exception class.",
      "Incorrect: There is no standard 'errorCode' associated with exceptions in Java.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question: "Which keyword in Java is used to define custom exceptions?",

    answers: ["class", "try", "catch", "finally"],
    correct: 0,
    explanations: [
      "The 'class' keyword in Java is used to define custom exceptions by creating a new exception class.",
      "Incorrect: 'try' is used to start a block of code that will be tested for exceptions.",
      "Incorrect: 'catch' is used to catch exceptions that are thrown by the 'try' block.",
      "Incorrect: 'finally' is used to create a block of code that will be executed after a 'try' block, regardless of whether an exception is thrown or not.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "What is the purpose of the 'getMessage()' method in Java exceptions?",

    answers: [
      "To retrieve the error message associated with the exception.",
      "To retrieve the name of the exception class.",
      "To print the stack trace of the exception.",
      "To throw an exception.",
    ],
    correct: 0,
    explanations: [
      "The purpose of the 'getMessage()' method in Java exceptions is to retrieve the error message associated with the exception.",
      "Incorrect: This describes the 'getClass().getName()' method, which returns the name of the exception class.",
      "Incorrect: This describes the 'printStackTrace()' method, which prints the stack trace of the exception.",
      "Incorrect: The 'throw' keyword is used to explicitly throw an exception.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "What is the purpose of the 'printStackTrace()' method in Java exceptions?",

    answers: [
      "To print the stack trace of the exception to the standard error stream.",
      "To print the error message associated with the exception to the standard output stream.",
      "To print the name of the exception class to the standard output stream.",
      "To print the error code associated with the exception to the standard error stream.",
    ],
    correct: 0,
    explanations: [
      "The purpose of the 'printStackTrace()' method in Java exceptions is to print the stack trace of the exception to the standard error stream.",
      "Incorrect: This describes the 'getMessage()' method, which returns the error message associated with the exception.",
      "Incorrect: This describes the 'getClass().getName()' method, which returns the name of the exception class.",
      "Incorrect: There is no standard 'errorCode' associated with exceptions in Java.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "What is the purpose of the 'finally' block in Java exception handling?",

    answers: [
      "To define a block of code that will be executed after a 'try' block, regardless of whether an exception is thrown or not.",
      "To catch exceptions that are thrown by the 'try' block.",
      "To define a block of code that will be executed only if an exception is thrown by the 'try' block.",
      "To explicitly throw an exception.",
    ],
    correct: 0,
    explanations: [
      "The purpose of the 'finally' block is to define a block of code that will be executed after a 'try' block, regardless of whether an exception is thrown or not.",
      "Incorrect: 'catch' is used to catch exceptions that are thrown by the 'try' block.",
      "Incorrect: This describes the behavior of a 'catch' block, not 'finally'.",
      "Incorrect: The 'throw' keyword is used to explicitly throw an exception.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question:
      "In Java, which keyword is used to explicitly throw an exception?",

    answers: ["throw", "try", "catch", "finally"],
    correct: 0,
    explanations: [
      "The 'throw' keyword is used to explicitly throw an exception in Java.",
      "Incorrect: 'try' is used to start a block of code that will be tested for exceptions.",
      "Incorrect: 'catch' is used to catch exceptions that are thrown by the 'try' block.",
      "Incorrect: 'finally' is used to create a block of code that will be executed after a 'try' block, regardless of whether an exception is thrown or not.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question: "Which of the following is a checked exception in Java?",

    answers: [
      "IOException",
      "NullPointerException",
      "ArrayIndexOutOfBoundsException",
      "NumberFormatException",
    ],
    correct: 0,
    explanations: [
      "IOException is a checked exception in Java, meaning it must be either caught or declared to be thrown.",
      "Incorrect: NullPointerException is an unchecked exception.",
      "Incorrect: ArrayIndexOutOfBoundsException is an unchecked exception.",
      "Incorrect: NumberFormatException is an unchecked exception.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question: "What is the primary purpose of using try-catch blocks in Java?",

    answers: [
      "To handle exceptions that may occur during the execution of code.",
      "To declare that a method may throw certain exceptions.",
      "To explicitly throw an exception.",
      "To catch errors thrown by the JVM.",
    ],
    correct: 0,
    explanations: [
      "The primary purpose of using try-catch blocks in Java is to handle exceptions that may occur during the execution of code.",
      "Incorrect: The 'throws' keyword is used to declare that a method may throw certain exceptions.",
      "Incorrect: The 'throw' keyword is used to explicitly throw an exception.",
      "Incorrect: Errors thrown by the JVM are typically caught by higher-level exception handlers or not caught at all.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question:
      "Which of the following statements about Java exception handling is true?",

    answers: [
      "Exception handling in Java helps manage runtime errors and abnormal conditions.",
      "Java only supports checked exceptions.",
      "The 'finally' block is required in every try-catch statement.",
      "Java does not allow custom exceptions.",
    ],
    correct: 0,
    explanations: [
      "Exception handling in Java helps manage runtime errors and abnormal conditions.",
      "Incorrect: Java supports both checked and unchecked exceptions.",
      "Incorrect: The 'finally' block is not required in every try-catch statement, though it's often used for cleanup operations.",
      "Incorrect: Java allows custom exceptions to be defined.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.2,
    question:
      "What does the 'getMessage()' method of the Exception class in Java return?",

    answers: [
      "The error message associated with the exception.",
      "The name of the exception class.",
      "The stack trace of the exception.",
      "The error code associated with the exception.",
    ],
    correct: 0,
    explanations: [
      "The 'getMessage()' method of the Exception class in Java returns the error message associated with the exception.",
      "Incorrect: This describes the 'getClass().getName()' method, which returns the name of the exception class.",
      "Incorrect: This describes the 'printStackTrace()' method, which prints the stack trace of the exception.",
      "Incorrect: There is no standard 'errorCode' associated with exceptions in Java.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question:
      "Which of the following statements about Java exceptions is true?",

    answers: [
      "Unchecked exceptions are subclasses of RuntimeException.",
      "Checked exceptions are subclasses of Error.",
      "All exceptions in Java are checked exceptions.",
      "The 'throws' keyword is used to catch exceptions.",
    ],
    correct: 0,
    explanations: [
      "Unchecked exceptions in Java are subclasses of RuntimeException.",
      "Incorrect: Checked exceptions are not subclasses of Error; they are a separate category of exceptions.",
      "Incorrect: All exceptions in Java are not checked exceptions; there are also unchecked exceptions.",
      "Incorrect: The 'throws' keyword is used to declare that a method may throw certain exceptions, not to catch exceptions.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "What happens if an exception is thrown in the 'catch' block of a Java try-catch statement?",

    answers: [
      "The exception can be caught by an enclosing try-catch statement.",
      "The program terminates.",
      "The exception is silently ignored.",
      "The 'finally' block is executed immediately.",
    ],
    correct: 0,
    explanations: [
      "An exception thrown in the 'catch' block of a Java try-catch statement can be caught by an enclosing try-catch statement.",
      "Incorrect: Unless there's an enclosing try-catch statement, the program does not necessarily terminate.",
      "Incorrect: Exceptions in the 'catch' block are not silently ignored; they can be caught by enclosing try-catch statements.",
      "Incorrect: The 'finally' block is executed after the 'try' block, whether or not an exception is thrown.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question:
      "What does the 'printStackTrace()' method of the Exception class in Java do?",

    answers: [
      "Prints the stack trace of the exception to the standard error stream.",
      "Prints the error message associated with the exception to the standard output stream.",
      "Prints the name of the exception class to the standard output stream.",
      "Prints the error code associated with the exception to the standard error stream.",
    ],
    correct: 0,
    explanations: [
      "The 'printStackTrace()' method of the Exception class in Java prints the stack trace of the exception to the standard error stream.",
      "Incorrect: This describes the 'getMessage()' method, which returns the error message associated with the exception.",
      "Incorrect: This describes the 'getClass().getName()' method, which returns the name of the exception class.",
      "Incorrect: There is no standard 'errorCode' associated with exceptions in Java.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question: "Which of the following is NOT a standard Java exception?",

    answers: [
      "InvalidParameterException",
      "FileNotFoundException",
      "NumberFormatException",
      "NullPointerException",
    ],
    correct: 0,
    explanations: [
      "InvalidParameterException is not a standard Java exception.",
      "Incorrect: FileNotFoundException, NumberFormatException, and NullPointerException are all standard Java exceptions.",
      "Incorrect: FileNotFoundException is a standard Java exception.",
      "Incorrect: NumberFormatException is a standard Java exception.",
      "Incorrect: NullPointerException is a standard Java exception.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "What is the purpose of the 'getMessage()' method in Java exceptions?",

    answers: [
      "To retrieve the error message associated with the exception.",
      "To retrieve the name of the exception class.",
      "To print the stack trace of the exception.",
      "To throw an exception.",
    ],
    correct: 0,
    explanations: [
      "The purpose of the 'getMessage()' method in Java exceptions is to retrieve the error message associated with the exception.",
      "Incorrect: This describes the 'getClass().getName()' method, which returns the name of the exception class.",
      "Incorrect: This describes the 'printStackTrace()' method, which prints the stack trace of the exception.",
      "Incorrect: The 'throw' keyword is used to explicitly throw an exception.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question: "Which keyword in Java is used to define custom exceptions?",

    answers: ["class", "try", "catch", "finally"],
    correct: 0,
    explanations: [
      "The 'class' keyword in Java is used to define custom exceptions by creating a new exception class.",
      "Incorrect: 'try' is used to start a block of code that will be tested for exceptions.",
      "Incorrect: 'catch' is used to catch exceptions that are thrown by the 'try' block.",
      "Incorrect: 'finally' is used to create a block of code that will be executed after a 'try' block, regardless of whether an exception is thrown or not.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "What is the purpose of the 'printStackTrace()' method in Java exceptions?",

    answers: [
      "To print the stack trace of the exception to the standard error stream.",
      "To print the error message associated with the exception to the standard output stream.",
      "To print the name of the exception class to the standard output stream.",
      "To print the error code associated with the exception to the standard error stream.",
    ],
    correct: 0,
    explanations: [
      "The purpose of the 'printStackTrace()' method in Java exceptions is to print the stack trace of the exception to the standard error stream.",
      "Incorrect: This describes the 'getMessage()' method, which returns the error message associated with the exception.",
      "Incorrect: This describes the 'getClass().getName()' method, which returns the name of the exception class.",
      "Incorrect: There is no standard 'errorCode' associated with exceptions in Java.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      'What does the following Java code snippet do?\ntry {\n    // Code that may throw exceptions\n}\ncatch (Exception e) {\n    System.out.println("An error occurred: " + e.getMessage());\n}\nfinally {\n    System.out.println("Finally block executed.");\n}',

    answers: [
      "Attempts to execute the code within the 'try' block, catches any exceptions thrown, prints an error message, and then executes the code within the 'finally' block.",
      "Attempts to execute the code within the 'try' block, catches any exceptions thrown, and then executes the code within the 'finally' block.",
      "Executes the code within the 'finally' block regardless of whether exceptions were thrown or not.",
      "Throws an exception regardless of the execution of the 'try' block.",
    ],
    correct: 0,
    explanations: [
      "The code attempts to execute the code within the 'try' block, catches any exceptions thrown, prints an error message, and then executes the code within the 'finally' block.",
      "Incorrect: This answer doesn't include printing the error message.",
      "Incorrect: This answer doesn't handle exceptions caught by the 'catch' block.",
      "Incorrect: The code does not throw an exception itself.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question:
      "Which of the following statements is true regarding custom exceptions in Java?",

    answers: [
      "Custom exceptions must be subclasses of the Exception class or one of its subclasses.",
      "Custom exceptions cannot have custom error messages.",
      "Custom exceptions must not be subclassed further.",
      "Custom exceptions are automatically checked exceptions.",
    ],
    correct: 0,
    explanations: [
      "Custom exceptions must be subclasses of the Exception class or one of its subclasses.",
      "Incorrect: Custom exceptions can have custom error messages.",
      "Incorrect: Custom exceptions can be subclassed further if necessary.",
      "Incorrect: Whether a custom exception is checked or unchecked depends on its hierarchy.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question:
      "What is the purpose of the 'getMessage()' method in Java exceptions?",

    answers: [
      "To retrieve the error message associated with the exception.",
      "To retrieve the name of the exception class.",
      "To print the stack trace of the exception.",
      "To throw an exception.",
    ],
    correct: 0,
    explanations: [
      "The purpose of the 'getMessage()' method in Java exceptions is to retrieve the error message associated with the exception.",
      "Incorrect: This describes the 'getClass().getName()' method, which returns the name of the exception class.",
      "Incorrect: This describes the 'printStackTrace()' method, which prints the stack trace of the exception.",
      "Incorrect: The 'throw' keyword is used to explicitly throw an exception.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "In Java, what happens if you throw an exception inside a 'finally' block?",
    code: "",
    answers: [
      "The exception thrown inside the 'finally' block overrides any previously caught exceptions.",
      "The program terminates immediately.",
      "The exception is caught by an enclosing 'try-catch' block, if one exists.",
      "The exception is silently ignored.",
    ],
    correct: 0,
    explanations: [
      "If you throw an exception inside a 'finally' block in Java, the exception is caught by an enclosing 'try-catch' block, if one exists.",
      "The 'finally' block executes regardless of whether an exception occurs, and any exception thrown inside it is handled accordingly.",
      "Incorrect: The program will not necessarily terminate immediately; it depends on whether the thrown exception is caught higher up in the call stack.",
      "Incorrect: Exceptions thrown within 'finally' blocks are not silently ignored; they can be caught by enclosing 'try-catch' blocks.",
    ],
    bloomTaxonomy: "Evaluating",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question: "What is the purpose of the 'try-catch' block in Java?",
    code: "",
    answers: [
      "To handle exceptions that may occur during the execution of code.",
      "To explicitly throw an exception.",
      "To define a block of code that will be executed after a 'finally' block.",
      "To catch errors thrown by the JVM.",
    ],
    correct: 0,
    explanations: [
      "The purpose of the 'try-catch' block in Java is to handle exceptions that may occur during the execution of code.",
      "Incorrect: The 'throw' keyword is used to explicitly throw an exception.",
      "Incorrect: The 'finally' block is used to define a block of code that will be executed after a 'try' block.",
      "Incorrect: Errors thrown by the JVM are typically caught by higher-level exception handlers or not caught at all.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "Which of the following statements about Java exception handling is true?",
    code: "",
    answers: [
      "Java supports both checked and unchecked exceptions.",
      "Java only supports checked exceptions.",
      "Java only supports unchecked exceptions.",
      "Java does not support exceptions.",
    ],
    correct: 0,
    explanations: [
      "Java supports both checked and unchecked exceptions.",
      "Incorrect: Java supports both checked and unchecked exceptions.",
      "Incorrect: Java supports both checked and unchecked exceptions.",
      "Incorrect: Java supports both checked and unchecked exceptions.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question:
      "What is the purpose of the 'getMessage()' method in Java exceptions?",
    code: "",
    answers: [
      "To retrieve the error message associated with the exception.",
      "To retrieve the name of the exception class.",
      "To print the stack trace of the exception.",
      "To throw an exception.",
    ],
    correct: 0,
    explanations: [
      "The purpose of the 'getMessage()' method in Java exceptions is to retrieve the error message associated with the exception.",
      "This method returns a String containing the error message that was passed when the exception was created.",
      "Incorrect: This method returns the name of the exception class.",
      "Incorrect: This method prints the stack trace of the exception.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question:
      "What is the purpose of the 'printStackTrace()' method in Java exceptions?",
    code: "",
    answers: [
      "To print the stack trace of the exception to the standard error stream.",
      "To print the error message associated with the exception to the standard output stream.",
      "To print the name of the exception class to the standard output stream.",
      "To print the error code associated with the exception to the standard error stream.",
    ],
    correct: 0,
    explanations: [
      "The purpose of the 'printStackTrace()' method in Java exceptions is to print the stack trace of the exception to the standard error stream.",
      "This method is useful for debugging, as it provides information about the sequence of method calls leading up to the exception.",
      "Incorrect: This method prints the error message associated with the exception.",
      "Incorrect: There is no standard 'errorCode' associated with exceptions in Java.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question:
      "Which of the following keywords is used to catch exceptions in Java?",
    code: "",
    answers: ["catch", "try", "throw", "finally"],
    correct: 0,
    explanations: [
      "The 'catch' keyword is used to catch exceptions in Java.",
      "Incorrect: 'try' is used to start a block of code that will be tested for exceptions.",
      "Incorrect: 'throw' is used to explicitly throw an exception.",
      "Incorrect: 'finally' is used to create a block of code that will be executed after a 'try' block, regardless of whether an exception is thrown or not.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "What is the purpose of the 'throws' keyword in Java method declarations?",
    code: "",
    answers: [
      "To indicate that the method may throw certain exceptions and it's the caller's responsibility to handle them.",
      "To indicate that the method will catch all exceptions thrown within its body.",
      "To indicate that the method is expected to rethrow any exceptions it catches.",
      "To indicate that the method will throw an exception regardless of its execution path.",
    ],
    correct: 0,
    explanations: [
      "The 'throws' keyword in Java method declarations is used to indicate that the method may throw certain exceptions and it's the caller's responsibility to handle them.",
      "Incorrect: The 'throws' keyword does not imply that the method catches exceptions thrown within its body.",
      "Incorrect: The 'throws' keyword does not imply that the method is expected to rethrow any exceptions it catches.",
      "Incorrect: The 'throws' keyword does not imply that the method will throw an exception regardless of its execution path.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question: "Which of the following is NOT a standard Java exception?",
    code: "",
    answers: [
      "InvalidParameterException",
      "FileNotFoundException",
      "NumberFormatException",
      "NullPointerException",
    ],
    correct: 0,
    explanations: [
      "InvalidParameterException is not a standard Java exception.",
      "Incorrect: FileNotFoundException, NumberFormatException, and NullPointerException are all standard Java exceptions.",
      "Incorrect: FileNotFoundException is a standard Java exception.",
      "Incorrect: NumberFormatException is a standard Java exception.",
      "Incorrect: NullPointerException is a standard Java exception.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question: "What does the 'getMessage()' method in Java exceptions return?",
    code: "",
    answers: [
      "The error message associated with the exception.",
      "The name of the exception class.",
      "The stack trace of the exception.",
      "The error code associated with the exception.",
    ],
    correct: 0,
    explanations: [
      "The 'getMessage()' method in Java exceptions returns the error message associated with the exception.",
      "This method returns a String containing the error message that was passed when the exception was created.",
      "Incorrect: This method returns the name of the exception class.",
      "Incorrect: This method returns the stack trace of the exception.",
      "Incorrect: Java exceptions do not typically have an error code associated with them.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question: "What does the 'printStackTrace()' method in Java exceptions do?",
    code: "",
    answers: [
      "Prints the stack trace of the exception to the standard error stream.",
      "Prints the error message associated with the exception to the standard output stream.",
      "Prints the name of the exception class to the standard output stream.",
      "Prints the error code associated with the exception to the standard error stream.",
    ],
    correct: 0,
    explanations: [
      "The 'printStackTrace()' method in Java exceptions prints the stack trace of the exception to the standard error stream.",
      "This method is useful for debugging, as it provides information about the sequence of method calls leading up to the exception.",
      "Incorrect: This method prints the error message associated with the exception.",
      "Incorrect: There is no standard 'errorCode' associated with exceptions in Java.",
      "Incorrect: This method does not print the name of the exception class.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question: "What happens if you catch an exception but don't handle it?",
    code: "",
    answers: [
      "The program will compile but may crash at runtime if the exception is not handled.",
      "The program will not compile because all exceptions must be handled.",
      "The program will ignore the exception and continue executing.",
      "The program will prompt the user to handle the exception.",
    ],
    correct: 0,
    explanations: [
      "If you catch an exception but don't handle it, the program will compile but may crash at runtime if the exception is not handled.",
      "Incorrect: While it's good practice to handle exceptions, it's not mandatory for compilation.",
      "Incorrect: Ignoring exceptions can lead to unpredictable behavior and is generally not recommended.",
      "Incorrect: The program does not prompt the user to handle exceptions automatically.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "What is the purpose of the 'finally' block in exception handling?",
    code: "",
    answers: [
      "To execute code that should always run, regardless of whether an exception is thrown or not.",
      "To catch exceptions that are thrown within the 'try' block.",
      "To rethrow exceptions caught by the 'catch' block.",
      "To handle exceptions thrown by the 'try' block.",
    ],
    correct: 0,
    explanations: [
      "The purpose of the 'finally' block in exception handling is to execute code that should always run, regardless of whether an exception is thrown or not.",
      "Incorrect: 'finally' blocks do not catch exceptions but execute cleanup code.",
      "Incorrect: 'finally' blocks do not rethrow exceptions but execute cleanup code.",
      "Incorrect: 'finally' blocks do not handle exceptions but execute cleanup code.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question:
      "Which of the following statements about checked and unchecked exceptions in Java is true?",
    code: "",
    answers: [
      "Checked exceptions must be caught or declared in the method signature, while unchecked exceptions do not need to be caught or declared.",
      "Unchecked exceptions must be caught or declared in the method signature, while checked exceptions do not need to be caught or declared.",
      "Both checked and unchecked exceptions must be caught or declared in the method signature.",
      "Neither checked nor unchecked exceptions need to be caught or declared in the method signature.",
    ],
    correct: 0,
    explanations: [
      "The statement that checked exceptions must be caught or declared in the method signature, while unchecked exceptions do not need to be caught or declared, is true.",
      "Checked exceptions are subject to compile-time checking and must be either caught or declared in the method signature, while unchecked exceptions are not subject to this requirement.",
      "Incorrect: Unchecked exceptions do not need to be caught or declared.",
      "Incorrect: Both types of exceptions have different handling requirements.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question: "What is the difference between 'throw' and 'throws' in Java?",
    code: "",
    answers: [
      "'throw' is used to explicitly throw an exception, while 'throws' is used to declare that a method may throw certain exceptions.",
      "'throw' is used to declare that a method may throw certain exceptions, while 'throws' is used to explicitly throw an exception.",
      "'throw' is used to catch exceptions, while 'throws' is used to handle them.",
      "'throw' is used to rethrow exceptions, while 'throws' is used to catch them.",
    ],
    correct: 0,
    explanations: [
      "The difference between 'throw' and 'throws' in Java is that 'throw' is used to explicitly throw an exception, while 'throws' is used to declare that a method may throw certain exceptions.",
      "Incorrect: 'throws' is used to declare exceptions, not to explicitly throw them.",
      "Incorrect: Neither 'throw' nor 'throws' is used to catch exceptions.",
      "Incorrect: Neither 'throw' nor 'throws' is used to handle exceptions.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question:
      "What happens if an exception is thrown within a 'finally' block?",
    code: "",
    answers: [
      "The exception will be propagated to the caller of the method.",
      "The exception will be caught and handled by the 'finally' block.",
      "The exception will be ignored and the 'finally' block will execute normally.",
      "The exception will cause the program to terminate abruptly.",
    ],
    correct: 0,
    explanations: [
      "If an exception is thrown within a 'finally' block, the exception will be propagated to the caller of the method.",
      "Incorrect: 'finally' blocks do not catch exceptions but execute cleanup code.",
      "Incorrect: 'finally' blocks do not handle exceptions but execute cleanup code.",
      "Incorrect: While the exception will cause the program to terminate, it will be propagated to the caller rather than causing abrupt termination.",
    ],
    bloomTaxonomy: "Applying",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question:
      "What is the purpose of the 'getMessage()' method in Java exceptions?",
    code: "",
    answers: [
      "To retrieve the error message associated with the exception.",
      "To retrieve the name of the exception class.",
      "To retrieve the stack trace of the exception.",
      "To retrieve the error code associated with the exception.",
    ],
    correct: 0,
    explanations: [
      "The purpose of the 'getMessage()' method in Java exceptions is to retrieve the error message associated with the exception.",
      "Incorrect: The 'getMessage()' method returns the error message passed when the exception was created.",
      "Incorrect: The 'getMessage()' method does not retrieve the name of the exception class.",
      "Incorrect: The 'getMessage()' method does not retrieve the stack trace or error code associated with the exception.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "What is the difference between 'printStackTrace()' and 'getMessage()' methods in Java exceptions?",
    code: "",
    answers: [
      "'printStackTrace()' prints the stack trace of the exception, while 'getMessage()' retrieves the error message associated with the exception.",
      "'printStackTrace()' retrieves the error message associated with the exception, while 'getMessage()' prints the stack trace of the exception.",
      "'printStackTrace()' prints the error code associated with the exception, while 'getMessage()' prints the name of the exception class.",
      "'printStackTrace()' prints the name of the exception class, while 'getMessage()' prints the error code associated with the exception.",
    ],
    correct: 0,
    explanations: [
      "'printStackTrace()' prints the stack trace of the exception, while 'getMessage()' retrieves the error message associated with the exception.",
      "Incorrect: 'printStackTrace()' does not retrieve the error message associated with the exception.",
      "Incorrect: 'getMessage()' does not print the stack trace of the exception.",
      "Incorrect: Neither method prints or retrieves the error code or name of the exception class.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question:
      "Which of the following statements about try-catch blocks in Java is true?",
    code: "",
    answers: [
      "A try block must be followed by at least one catch or finally block.",
      "A try block must always be followed by a finally block.",
      "A try block can be used on its own without any catch or finally blocks.",
      "A try block can only be followed by a catch block and not a finally block.",
    ],
    correct: 0,
    explanations: [
      "A try block must be followed by at least one catch or finally block in Java.",
      "Incorrect: A finally block is optional and not always required.",
      "Incorrect: A try block cannot be used on its own without any catch or finally blocks.",
      "Incorrect: A try block can be followed by both catch and finally blocks.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question: "Which of the following is NOT a standard Java exception?",
    code: "",
    answers: [
      "InvalidParameterException",
      "FileNotFoundException",
      "NumberFormatException",
      "NullPointerException",
    ],
    correct: 0,
    explanations: [
      "InvalidParameterException is not a standard Java exception.",
      "Incorrect: FileNotFoundException, NumberFormatException, and NullPointerException are all standard Java exceptions.",
      "Incorrect: FileNotFoundException is a standard Java exception.",
      "Incorrect: NumberFormatException is a standard Java exception.",
      "Incorrect: NullPointerException is a standard Java exception.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.6,
    question:
      "Which of the following is true about checked and unchecked exceptions in Java?",
    code: "",
    answers: [
      "Checked exceptions are subject to compile-time checking, while unchecked exceptions are not.",
      "Unchecked exceptions are subject to compile-time checking, while checked exceptions are not.",
      "Both checked and unchecked exceptions are subject to compile-time checking.",
      "Neither checked nor unchecked exceptions are subject to compile-time checking.",
    ],
    correct: 0,
    explanations: [
      "Checked exceptions are subject to compile-time checking, while unchecked exceptions are not.",
      "Incorrect: Unchecked exceptions are not subject to compile-time checking.",
      "Incorrect: Both types of exceptions have different checking requirements.",
      "Incorrect: Checked exceptions are subject to compile-time checking.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question:
      "Which of the following statements about try-with-resources in Java is true?",
    code: "",
    answers: [
      "Try-with-resources automatically closes resources declared within its parentheses after the try block finishes execution.",
      "Try-with-resources requires explicitly closing resources declared within its parentheses after the try block finishes execution.",
      "Try-with-resources is only applicable to checked exceptions.",
      "Try-with-resources is deprecated and should not be used.",
    ],
    correct: 0,
    explanations: [
      "Try-with-resources automatically closes resources declared within its parentheses after the try block finishes execution.",
      "Incorrect: Try-with-resources automatically closes resources, so explicit closing is not required.",
      "Incorrect: Try-with-resources is applicable to both checked and unchecked exceptions.",
      "Incorrect: Try-with-resources is not deprecated and is commonly used in Java for resource management.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question: "What is the purpose of the 'throws' keyword in Java?",
    code: "",
    answers: [
      "To declare that a method may throw certain exceptions.",
      "To explicitly throw an exception.",
      "To catch exceptions thrown within the method body.",
      "To handle exceptions thrown by other methods.",
    ],
    correct: 0,
    explanations: [
      "The purpose of the 'throws' keyword in Java is to declare that a method may throw certain exceptions.",
      "Incorrect: 'throws' is not used to explicitly throw exceptions but to declare which exceptions may be thrown.",
      "Incorrect: 'throws' does not catch exceptions but declares them.",
      "Incorrect: 'throws' does not handle exceptions thrown by other methods but declares which exceptions may be thrown by the method itself.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question: "Which of the following is NOT a standard Java exception?",
    code: "",
    answers: [
      "InvalidParameterException",
      "FileNotFoundException",
      "NumberFormatException",
      "NullPointerException",
    ],
    correct: 0,
    explanations: [
      "InvalidParameterException is not a standard Java exception.",
      "Incorrect: FileNotFoundException, NumberFormatException, and NullPointerException are all standard Java exceptions.",
      "Incorrect: FileNotFoundException is a standard Java exception.",
      "Incorrect: NumberFormatException is a standard Java exception.",
      "Incorrect: NullPointerException is a standard Java exception.",
    ],
    bloomTaxonomy: "Remembering",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.5,
    question: "What is the primary purpose of exception handling in Java?",
    code: "",
    answers: [
      "To gracefully handle unexpected runtime errors and prevent application crashes.",
      "To intentionally cause runtime errors for testing purposes.",
      "To optimize code performance by skipping error checking.",
      "To ignore runtime errors and continue program execution.",
    ],
    correct: 0,
    explanations: [
      "The primary purpose of exception handling in Java is to gracefully handle unexpected runtime errors and prevent application crashes.",
      "Incorrect: Exception handling is not intended to cause runtime errors, but to handle them.",
      "Incorrect: Exception handling does not optimize code performance but adds error checking.",
      "Incorrect: Exception handling is not intended to ignore runtime errors, but to handle them.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.3,
    question: "What does the 'getMessage()' method in Java exceptions return?",
    code: "",
    answers: [
      "The error message associated with the exception.",
      "The name of the exception class.",
      "The stack trace of the exception.",
      "The error code associated with the exception.",
    ],
    correct: 0,
    explanations: [
      "The 'getMessage()' method in Java exceptions returns the error message associated with the exception.",
      "This method returns a String containing the error message that was passed when the exception was created.",
      "Incorrect: This method returns the name of the exception class.",
      "Incorrect: This method returns the stack trace of the exception.",
      "Incorrect: Java exceptions do not typically have an error code associated with them.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.8,
    question: "What does the 'printStackTrace()' method in Java exceptions do?",
    code: "",
    answers: [
      "Prints the stack trace of the exception to the standard error stream.",
      "Prints the error message associated with the exception to the standard output stream.",
      "Prints the name of the exception class to the standard output stream.",
      "Prints the error code associated with the exception to the standard error stream.",
    ],
    correct: 0,
    explanations: [
      "The 'printStackTrace()' method in Java exceptions prints the stack trace of the exception to the standard error stream.",
      "This method is useful for debugging, as it provides information about the sequence of method calls leading up to the exception.",
      "Incorrect: This method prints the error message associated with the exception.",
      "Incorrect: There is no standard 'errorCode' associated with exceptions in Java.",
      "Incorrect: This method does not print the name of the exception class.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
  {
    difficulty: 0.4,
    question: "What is the purpose of the 'throws' keyword in Java?",
    code: "",
    answers: [
      "To indicate that a method may throw certain exceptions and it's the caller's responsibility to handle them.",
      "To indicate that the method will catch all exceptions thrown within its body.",
      "To indicate that the method is expected to rethrow any exceptions it catches.",
      "To indicate that the method will throw an exception regardless of its execution path.",
    ],
    correct: 0,
    explanations: [
      "The 'throws' keyword in Java method declarations is used to indicate that the method may throw certain exceptions and it's the caller's responsibility to handle them.",
      "Incorrect: The 'throws' keyword does not imply that the method catches exceptions thrown within its body.",
      "Incorrect: The 'throws' keyword does not imply that the method is expected to rethrow any exceptions it catches.",
      "Incorrect: The 'throws' keyword does not imply that the method will throw an exception regardless of its execution path.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 60,
    topic: "Error Handling",
  },
  {
    difficulty: 0.7,
    question:
      "What is the main purpose of the 'throws' keyword in Java method declarations?",
    code: "",
    answers: [
      "To indicate that the method may throw certain exceptions and it's the caller's responsibility to handle them.",
      "To indicate that the method will catch all exceptions thrown within its body.",
      "To indicate that the method is expected to rethrow any exceptions it catches.",
      "To indicate that the method will throw an exception regardless of its execution path.",
    ],
    correct: 0,
    explanations: [
      "The 'throws' keyword in Java method declarations is used to indicate that the method may throw certain exceptions and it's the caller's responsibility to handle them.",
      "Incorrect: The 'throws' keyword does not imply that the method catches exceptions thrown within its body.",
      "Incorrect: The 'throws' keyword does not imply that the method is expected to rethrow any exceptions it catches.",
      "Incorrect: The 'throws' keyword does not imply that the method will throw an exception regardless of its execution path.",
    ],
    bloomTaxonomy: "Understanding",
    timeTakenSeconds: 90,
    topic: "Error Handling",
  },
];
